/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        } 
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member) 
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else 
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;
  
fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);
      
}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  const char *className;
  void* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  lua_getfield(L, -1, ".type");
  className = lua_tostring(L, -1);

  lua_pushfstring(L, "<%s userdata: %p>", className, userData);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metatmethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows to skip searching metamethod in givel clss and immideatelly go to searching in bases. skip_check
 * is not caried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */
  
  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);
  
  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));
  
  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1); 

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index); 

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);
      
      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success; 
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metatmethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_FILE swig_types[0]
#define SWIGTYPE_p_THREAD_PARAM swig_types[1]
#define SWIGTYPE_p_WSEMAPHORE swig_types[2]
#define SWIGTYPE_p__rlFileLines_ swig_types[3]
#define SWIGTYPE_p__rlHistoryLogLine_ swig_types[4]
#define SWIGTYPE_p__rlHistoryReaderLine_ swig_types[5]
#define SWIGTYPE_p_a_4__char swig_types[6]
#define SWIGTYPE_p_double swig_types[7]
#define SWIGTYPE_p_f_p_q_const__unsigned_char_int__void swig_types[8]
#define SWIGTYPE_p_f_p_void__p_void swig_types[9]
#define SWIGTYPE_p_f_p_void__void swig_types[10]
#define SWIGTYPE_p_float swig_types[11]
#define SWIGTYPE_p_int swig_types[12]
#define SWIGTYPE_p_p_char swig_types[13]
#define SWIGTYPE_p_p_void swig_types[14]
#define SWIGTYPE_p_pthread_attr_t swig_types[15]
#define SWIGTYPE_p_pthread_mutex_t swig_types[16]
#define SWIGTYPE_p_pthread_t swig_types[17]
#define SWIGTYPE_p_rl3964R swig_types[18]
#define SWIGTYPE_p_rlCommandlineInterface swig_types[19]
#define SWIGTYPE_p_rlDataAcquisition swig_types[20]
#define SWIGTYPE_p_rlDataAcquisitionProvider swig_types[21]
#define SWIGTYPE_p_rlDataProvider swig_types[22]
#define SWIGTYPE_p_rlDataProviderClient swig_types[23]
#define SWIGTYPE_p_rlDataProviderThreads swig_types[24]
#define SWIGTYPE_p_rlEventLogServer swig_types[25]
#define SWIGTYPE_p_rlEventLogServerThreads swig_types[26]
#define SWIGTYPE_p_rlFifo swig_types[27]
#define SWIGTYPE_p_rlFileLoad swig_types[28]
#define SWIGTYPE_p_rlHistoryLogger swig_types[29]
#define SWIGTYPE_p_rlHistoryReader swig_types[30]
#define SWIGTYPE_p_rlIniFile swig_types[31]
#define SWIGTYPE_p_rlInterpreter swig_types[32]
#define SWIGTYPE_p_rlIpAdr swig_types[33]
#define SWIGTYPE_p_rlMailbox swig_types[34]
#define SWIGTYPE_p_rlModbus swig_types[35]
#define SWIGTYPE_p_rlModbusClient swig_types[36]
#define SWIGTYPE_p_rlMutex swig_types[37]
#define SWIGTYPE_p_rlOpcXmlDa swig_types[38]
#define SWIGTYPE_p_rlPPIClient swig_types[39]
#define SWIGTYPE_p_rlPcontrol swig_types[40]
#define SWIGTYPE_p_rlPlcMem swig_types[41]
#define SWIGTYPE_p_rlPlcState swig_types[42]
#define SWIGTYPE_p_rlSemaphore swig_types[43]
#define SWIGTYPE_p_rlSerial swig_types[44]
#define SWIGTYPE_p_rlSharedMemory swig_types[45]
#define SWIGTYPE_p_rlSiemensTCP swig_types[46]
#define SWIGTYPE_p_rlSiemensTCPClient swig_types[47]
#define SWIGTYPE_p_rlSocket swig_types[48]
#define SWIGTYPE_p_rlSpawn swig_types[49]
#define SWIGTYPE_p_rlSpreadsheetCell swig_types[50]
#define SWIGTYPE_p_rlSpreadsheetRow swig_types[51]
#define SWIGTYPE_p_rlSpreadsheetTable swig_types[52]
#define SWIGTYPE_p_rlSpreadsheetWorkbook swig_types[53]
#define SWIGTYPE_p_rlString swig_types[54]
#define SWIGTYPE_p_rlSvgAnimator swig_types[55]
#define SWIGTYPE_p_rlSvgCat swig_types[56]
#define SWIGTYPE_p_rlSvgPosition swig_types[57]
#define SWIGTYPE_p_rlSvgPosition__rlPositionInit swig_types[58]
#define SWIGTYPE_p_rlThread swig_types[59]
#define SWIGTYPE_p_rlTime swig_types[60]
#define SWIGTYPE_p_rlUdpSocket swig_types[61]
#define SWIGTYPE_p_rlWebcam swig_types[62]
#define SWIGTYPE_p_short swig_types[63]
#define SWIGTYPE_p_sockaddr_in swig_types[64]
#define SWIGTYPE_p_std__shared_ptrT_rlSharedMemory__LockUserAddr_t swig_types[65]
#define SWIGTYPE_p_unsigned_char swig_types[66]
#define SWIGTYPE_p_unsigned_int swig_types[67]
#define SWIGTYPE_p_unsigned_short swig_types[68]
#define SWIGTYPE_p_void swig_types[69]
static swig_type_info *swig_types[71];
static swig_module_info swig_module = {swig_types, 70, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "rllib"
#define SWIG_init      luaopen_rllib
#define SWIG_init_user luaopen_rllib_user

#define SWIG_LUACODE   luaopen_rllib_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


/*Putheadersandotherdeclarationshere*/
#include"../rllib/lib/rldefine.h"
#include"../rllib/lib/rlthread.h"
#include"../rllib/lib/rlsharedmemory.h"
#include"../rllib/lib/rludpsocket.h"
#include"../rllib/lib/rlsocket.h"
#include"../rllib/lib/rl3964r.h"
#include"../rllib/lib/rlcommandlineinterface.h"
//#include"../rllib/lib/rlcontroller.h"
#include"../rllib/lib/rlcutil.h"
#include"../rllib/lib/rldataacquisition.h"
#include"../rllib/lib/rldataacquisitionprovider.h"
#include"../rllib/lib/rldataprovider.h"
//#include"../rllib/lib/rleibnetip.h"
#include"../rllib/lib/rlevent.h"
#include"../rllib/lib/rleventlogserver.h"
#include"../rllib/lib/rlfifo.h"
#include"../rllib/lib/rlfileload.h"
//win #include"../rllib/lib/rlhilschercif.h"
#include"../rllib/lib/rlhistorylogger.h"
#include"../rllib/lib/rlhistoryreader.h"
#include"../rllib/lib/rlinifile.h"
#include"../rllib/lib/rlinterpreter.h"
#include"../rllib/lib/rlmailbox.h"
#include"../rllib/lib/rlmodbusclient.h"
#include"../rllib/lib/rlmodbus.h"
#include"../rllib/lib/rlopcxmlda.h"
#include"../rllib/lib/rlpcontrol.h"
#include"../rllib/lib/rlplc.h"
#include"../rllib/lib/rlppiclient.h"
#include"../rllib/lib/rlserial.h"
#include"../rllib/lib/rlsiemenstcpclient.h"
#include"../rllib/lib/rlsiemenstcp.h"
#include"../rllib/lib/rlspawn.h"
#include"../rllib/lib/rlspreadsheet.h"
#include"../rllib/lib/rlstring.h"
#include"../rllib/lib/rlsubset.h"
#include"../rllib/lib/rlsvganimator.h"
#include"../rllib/lib/rlsvgcat.h"
#include"../rllib/lib/rltime.h"
#include"../rllib/lib/rlwebcam.h"
#include"../rllib/lib/rlwthread.h"


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_THREAD_PARAM_thread_set(lua_State* L) {
  int SWIG_arg = 0;
  THREAD_PARAM *arg1 = (THREAD_PARAM *) 0 ;
  rlThread *arg2 = (rlThread *) 0 ;
  
  SWIG_check_num_args("THREAD_PARAM::thread",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("THREAD_PARAM::thread",1,"THREAD_PARAM *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("THREAD_PARAM::thread",2,"rlThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_THREAD_PARAM,0))){
    SWIG_fail_ptr("THREAD_PARAM_thread_set",1,SWIGTYPE_p_THREAD_PARAM);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlThread,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("THREAD_PARAM_thread_set",2,SWIGTYPE_p_rlThread);
  }
  
  if (arg1) (arg1)->thread = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_THREAD_PARAM_thread_get(lua_State* L) {
  int SWIG_arg = 0;
  THREAD_PARAM *arg1 = (THREAD_PARAM *) 0 ;
  rlThread *result = 0 ;
  
  SWIG_check_num_args("THREAD_PARAM::thread",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("THREAD_PARAM::thread",1,"THREAD_PARAM *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_THREAD_PARAM,0))){
    SWIG_fail_ptr("THREAD_PARAM_thread_get",1,SWIGTYPE_p_THREAD_PARAM);
  }
  
  result = (rlThread *) ((arg1)->thread);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlThread,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_THREAD_PARAM_user_set(lua_State* L) {
  int SWIG_arg = 0;
  THREAD_PARAM *arg1 = (THREAD_PARAM *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("THREAD_PARAM::user",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("THREAD_PARAM::user",1,"THREAD_PARAM *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("THREAD_PARAM::user",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_THREAD_PARAM,0))){
    SWIG_fail_ptr("THREAD_PARAM_user_set",1,SWIGTYPE_p_THREAD_PARAM);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"THREAD_PARAM_user_set");
  if (arg1) (arg1)->user = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_THREAD_PARAM_user_get(lua_State* L) {
  int SWIG_arg = 0;
  THREAD_PARAM *arg1 = (THREAD_PARAM *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("THREAD_PARAM::user",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("THREAD_PARAM::user",1,"THREAD_PARAM *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_THREAD_PARAM,0))){
    SWIG_fail_ptr("THREAD_PARAM_user_get",1,SWIGTYPE_p_THREAD_PARAM);
  }
  
  result = (void *) ((arg1)->user);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_THREAD_PARAM_running_set(lua_State* L) {
  int SWIG_arg = 0;
  THREAD_PARAM *arg1 = (THREAD_PARAM *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("THREAD_PARAM::running",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("THREAD_PARAM::running",1,"THREAD_PARAM *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("THREAD_PARAM::running",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_THREAD_PARAM,0))){
    SWIG_fail_ptr("THREAD_PARAM_running_set",1,SWIGTYPE_p_THREAD_PARAM);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->running = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_THREAD_PARAM_running_get(lua_State* L) {
  int SWIG_arg = 0;
  THREAD_PARAM *arg1 = (THREAD_PARAM *) 0 ;
  int result;
  
  SWIG_check_num_args("THREAD_PARAM::running",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("THREAD_PARAM::running",1,"THREAD_PARAM *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_THREAD_PARAM,0))){
    SWIG_fail_ptr("THREAD_PARAM_running_get",1,SWIGTYPE_p_THREAD_PARAM);
  }
  
  result = (int) ((arg1)->running);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_THREAD_PARAM(lua_State* L) {
  int SWIG_arg = 0;
  THREAD_PARAM *result = 0 ;
  
  SWIG_check_num_args("THREAD_PARAM::THREAD_PARAM",0,0)
  result = (THREAD_PARAM *)new THREAD_PARAM();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_THREAD_PARAM,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_THREAD_PARAM(void *obj) {
THREAD_PARAM *arg1 = (THREAD_PARAM *) obj;
delete arg1;
}
static int _proxy__wrap_new_THREAD_PARAM(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_THREAD_PARAM);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_THREAD_PARAM_attributes[] = {
    { "thread", _wrap_THREAD_PARAM_thread_get, _wrap_THREAD_PARAM_thread_set },
    { "user", _wrap_THREAD_PARAM_user_get, _wrap_THREAD_PARAM_user_set },
    { "running", _wrap_THREAD_PARAM_running_get, _wrap_THREAD_PARAM_running_set },
    {0,0,0}
};
static swig_lua_method swig_THREAD_PARAM_methods[]= {
    {0,0}
};
static swig_lua_method swig_THREAD_PARAM_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_THREAD_PARAM_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_THREAD_PARAM_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_THREAD_PARAM_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_THREAD_PARAM_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_THREAD_PARAM_Sf_SwigStatic = {
    "THREAD_PARAM",
    swig_THREAD_PARAM_Sf_SwigStatic_methods,
    swig_THREAD_PARAM_Sf_SwigStatic_attributes,
    swig_THREAD_PARAM_Sf_SwigStatic_constants,
    swig_THREAD_PARAM_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_THREAD_PARAM_bases[] = {0};
static const char *swig_THREAD_PARAM_base_names[] = {0};
static swig_lua_class _wrap_class_THREAD_PARAM = { "THREAD_PARAM", "THREAD_PARAM", &SWIGTYPE_p_THREAD_PARAM,_proxy__wrap_new_THREAD_PARAM, swig_delete_THREAD_PARAM, swig_THREAD_PARAM_methods, swig_THREAD_PARAM_attributes, &swig_THREAD_PARAM_Sf_SwigStatic, swig_THREAD_PARAM_meta, swig_THREAD_PARAM_bases, swig_THREAD_PARAM_base_names };

static int _wrap_new_rlThread__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  rlThread *result = 0 ;
  
  SWIG_check_num_args("rlThread::rlThread",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlThread::rlThread",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (rlThread *)new rlThread(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlThread,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlThread__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlThread *result = 0 ;
  
  SWIG_check_num_args("rlThread::rlThread",0,0)
  result = (rlThread *)new rlThread();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlThread,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlThread(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_rlThread__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_rlThread__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlThread'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlThread::rlThread(int)\n"
    "    rlThread::rlThread()\n");
  lua_error(L);return 0;
}


static int _wrap_rlThread_create(lua_State* L) {
  int SWIG_arg = 0;
  rlThread *arg1 = (rlThread *) 0 ;
  void *(*arg2)(void *) = (void *(*)(void *)) 0 ;
  void *arg3 = (void *) 0 ;
  int result;
  
  SWIG_check_num_args("rlThread::create",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlThread::create",1,"rlThread *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlThread::create",2,"void *(*)(void *)");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("rlThread::create",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlThread,0))){
    SWIG_fail_ptr("rlThread_create",1,SWIGTYPE_p_rlThread);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void__p_void,0))){
    SWIG_fail_ptr("rlThread_create",2,SWIGTYPE_p_f_p_void__p_void);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"rlThread_create");
  result = (int)(arg1)->create(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlThread_trylock(lua_State* L) {
  int SWIG_arg = 0;
  rlThread *arg1 = (rlThread *) 0 ;
  int result;
  
  SWIG_check_num_args("rlThread::trylock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlThread::trylock",1,"rlThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlThread,0))){
    SWIG_fail_ptr("rlThread_trylock",1,SWIGTYPE_p_rlThread);
  }
  
  result = (int)(arg1)->trylock();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlThread_lock(lua_State* L) {
  int SWIG_arg = 0;
  rlThread *arg1 = (rlThread *) 0 ;
  int result;
  
  SWIG_check_num_args("rlThread::lock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlThread::lock",1,"rlThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlThread,0))){
    SWIG_fail_ptr("rlThread_lock",1,SWIGTYPE_p_rlThread);
  }
  
  result = (int)(arg1)->lock();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlThread_unlock(lua_State* L) {
  int SWIG_arg = 0;
  rlThread *arg1 = (rlThread *) 0 ;
  int result;
  
  SWIG_check_num_args("rlThread::unlock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlThread::unlock",1,"rlThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlThread,0))){
    SWIG_fail_ptr("rlThread_unlock",1,SWIGTYPE_p_rlThread);
  }
  
  result = (int)(arg1)->unlock();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlThread_waitSemaphore(lua_State* L) {
  int SWIG_arg = 0;
  rlThread *arg1 = (rlThread *) 0 ;
  int result;
  
  SWIG_check_num_args("rlThread::waitSemaphore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlThread::waitSemaphore",1,"rlThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlThread,0))){
    SWIG_fail_ptr("rlThread_waitSemaphore",1,SWIGTYPE_p_rlThread);
  }
  
  result = (int)(arg1)->waitSemaphore();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlThread_incrementSemaphore(lua_State* L) {
  int SWIG_arg = 0;
  rlThread *arg1 = (rlThread *) 0 ;
  int result;
  
  SWIG_check_num_args("rlThread::incrementSemaphore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlThread::incrementSemaphore",1,"rlThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlThread,0))){
    SWIG_fail_ptr("rlThread_incrementSemaphore",1,SWIGTYPE_p_rlThread);
  }
  
  result = (int)(arg1)->incrementSemaphore();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlThread_join(lua_State* L) {
  int SWIG_arg = 0;
  rlThread *arg1 = (rlThread *) 0 ;
  void **arg2 = (void **) 0 ;
  int result;
  
  SWIG_check_num_args("rlThread::join",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlThread::join",1,"rlThread *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlThread::join",2,"void **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlThread,0))){
    SWIG_fail_ptr("rlThread_join",1,SWIGTYPE_p_rlThread);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_void,0))){
    SWIG_fail_ptr("rlThread_join",2,SWIGTYPE_p_p_void);
  }
  
  result = (int)(arg1)->join(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlThread_cancel(lua_State* L) {
  int SWIG_arg = 0;
  rlThread *arg1 = (rlThread *) 0 ;
  int result;
  
  SWIG_check_num_args("rlThread::cancel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlThread::cancel",1,"rlThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlThread,0))){
    SWIG_fail_ptr("rlThread_cancel",1,SWIGTYPE_p_rlThread);
  }
  
  result = (int)(arg1)->cancel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlThread_threadExit(lua_State* L) {
  int SWIG_arg = 0;
  rlThread *arg1 = (rlThread *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("rlThread::threadExit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlThread::threadExit",1,"rlThread *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlThread::threadExit",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlThread,0))){
    SWIG_fail_ptr("rlThread_threadExit",1,SWIGTYPE_p_rlThread);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlThread_threadExit");
  (arg1)->threadExit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlThread_tid_set(lua_State* L) {
  int SWIG_arg = 0;
  rlThread *arg1 = (rlThread *) 0 ;
  pthread_t arg2 ;
  pthread_t *argp2 ;
  
  SWIG_check_num_args("rlThread::tid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlThread::tid",1,"rlThread *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("rlThread::tid",2,"pthread_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlThread,0))){
    SWIG_fail_ptr("rlThread_tid_set",1,SWIGTYPE_p_rlThread);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_pthread_t,0))){
    SWIG_fail_ptr("rlThread_tid_set",2,SWIGTYPE_p_pthread_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->tid = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlThread_tid_get(lua_State* L) {
  int SWIG_arg = 0;
  rlThread *arg1 = (rlThread *) 0 ;
  pthread_t result;
  
  SWIG_check_num_args("rlThread::tid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlThread::tid",1,"rlThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlThread,0))){
    SWIG_fail_ptr("rlThread_tid_get",1,SWIGTYPE_p_rlThread);
  }
  
  result =  ((arg1)->tid);
  {
    pthread_t * resultptr = new pthread_t((const pthread_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pthread_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlThread_attr_set(lua_State* L) {
  int SWIG_arg = 0;
  rlThread *arg1 = (rlThread *) 0 ;
  pthread_attr_t arg2 ;
  pthread_attr_t *argp2 ;
  
  SWIG_check_num_args("rlThread::attr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlThread::attr",1,"rlThread *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("rlThread::attr",2,"pthread_attr_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlThread,0))){
    SWIG_fail_ptr("rlThread_attr_set",1,SWIGTYPE_p_rlThread);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_pthread_attr_t,0))){
    SWIG_fail_ptr("rlThread_attr_set",2,SWIGTYPE_p_pthread_attr_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->attr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlThread_attr_get(lua_State* L) {
  int SWIG_arg = 0;
  rlThread *arg1 = (rlThread *) 0 ;
  pthread_attr_t result;
  
  SWIG_check_num_args("rlThread::attr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlThread::attr",1,"rlThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlThread,0))){
    SWIG_fail_ptr("rlThread_attr_get",1,SWIGTYPE_p_rlThread);
  }
  
  result =  ((arg1)->attr);
  {
    pthread_attr_t * resultptr = new pthread_attr_t((const pthread_attr_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pthread_attr_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlThread_mutex_set(lua_State* L) {
  int SWIG_arg = 0;
  rlThread *arg1 = (rlThread *) 0 ;
  pthread_mutex_t arg2 ;
  pthread_mutex_t *argp2 ;
  
  SWIG_check_num_args("rlThread::mutex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlThread::mutex",1,"rlThread *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("rlThread::mutex",2,"pthread_mutex_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlThread,0))){
    SWIG_fail_ptr("rlThread_mutex_set",1,SWIGTYPE_p_rlThread);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_pthread_mutex_t,0))){
    SWIG_fail_ptr("rlThread_mutex_set",2,SWIGTYPE_p_pthread_mutex_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mutex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlThread_mutex_get(lua_State* L) {
  int SWIG_arg = 0;
  rlThread *arg1 = (rlThread *) 0 ;
  pthread_mutex_t result;
  
  SWIG_check_num_args("rlThread::mutex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlThread::mutex",1,"rlThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlThread,0))){
    SWIG_fail_ptr("rlThread_mutex_get",1,SWIGTYPE_p_rlThread);
  }
  
  result =  ((arg1)->mutex);
  {
    pthread_mutex_t * resultptr = new pthread_mutex_t((const pthread_mutex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pthread_mutex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlThread_semaphore_set(lua_State* L) {
  int SWIG_arg = 0;
  rlThread *arg1 = (rlThread *) 0 ;
  WSEMAPHORE arg2 ;
  WSEMAPHORE *argp2 ;
  
  SWIG_check_num_args("rlThread::semaphore",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlThread::semaphore",1,"rlThread *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("rlThread::semaphore",2,"WSEMAPHORE");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlThread,0))){
    SWIG_fail_ptr("rlThread_semaphore_set",1,SWIGTYPE_p_rlThread);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_WSEMAPHORE,0))){
    SWIG_fail_ptr("rlThread_semaphore_set",2,SWIGTYPE_p_WSEMAPHORE);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->semaphore = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlThread_semaphore_get(lua_State* L) {
  int SWIG_arg = 0;
  rlThread *arg1 = (rlThread *) 0 ;
  WSEMAPHORE result;
  
  SWIG_check_num_args("rlThread::semaphore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlThread::semaphore",1,"rlThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlThread,0))){
    SWIG_fail_ptr("rlThread_semaphore_get",1,SWIGTYPE_p_rlThread);
  }
  
  result =  ((arg1)->semaphore);
  {
    WSEMAPHORE * resultptr = new WSEMAPHORE((const WSEMAPHORE &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_WSEMAPHORE,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlThread(void *obj) {
rlThread *arg1 = (rlThread *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlThread(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlThread);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlThread_attributes[] = {
    { "tid", _wrap_rlThread_tid_get, _wrap_rlThread_tid_set },
    { "attr", _wrap_rlThread_attr_get, _wrap_rlThread_attr_set },
    { "mutex", _wrap_rlThread_mutex_get, _wrap_rlThread_mutex_set },
    { "semaphore", _wrap_rlThread_semaphore_get, _wrap_rlThread_semaphore_set },
    {0,0,0}
};
static swig_lua_method swig_rlThread_methods[]= {
    { "create", _wrap_rlThread_create},
    { "trylock", _wrap_rlThread_trylock},
    { "lock", _wrap_rlThread_lock},
    { "unlock", _wrap_rlThread_unlock},
    { "waitSemaphore", _wrap_rlThread_waitSemaphore},
    { "incrementSemaphore", _wrap_rlThread_incrementSemaphore},
    { "join", _wrap_rlThread_join},
    { "cancel", _wrap_rlThread_cancel},
    { "threadExit", _wrap_rlThread_threadExit},
    {0,0}
};
static swig_lua_method swig_rlThread_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlThread_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlThread_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlThread_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlThread_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlThread_Sf_SwigStatic = {
    "rlThread",
    swig_rlThread_Sf_SwigStatic_methods,
    swig_rlThread_Sf_SwigStatic_attributes,
    swig_rlThread_Sf_SwigStatic_constants,
    swig_rlThread_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlThread_bases[] = {0};
static const char *swig_rlThread_base_names[] = {0};
static swig_lua_class _wrap_class_rlThread = { "rlThread", "rlThread", &SWIGTYPE_p_rlThread,_proxy__wrap_new_rlThread, swig_delete_rlThread, swig_rlThread_methods, swig_rlThread_attributes, &swig_rlThread_Sf_SwigStatic, swig_rlThread_meta, swig_rlThread_bases, swig_rlThread_base_names };

static int _wrap_new_rlMutex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  rlMutex *result = 0 ;
  
  SWIG_check_num_args("rlMutex::rlMutex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlMutex::rlMutex",1,"void const *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"new_rlMutex");
  result = (rlMutex *)new rlMutex((void const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlMutex,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlMutex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlMutex *result = 0 ;
  
  SWIG_check_num_args("rlMutex::rlMutex",0,0)
  result = (rlMutex *)new rlMutex();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlMutex,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlMutex(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_rlMutex__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_rlMutex__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlMutex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlMutex::rlMutex(void const *)\n"
    "    rlMutex::rlMutex()\n");
  lua_error(L);return 0;
}


static int _wrap_rlMutex_trylock(lua_State* L) {
  int SWIG_arg = 0;
  rlMutex *arg1 = (rlMutex *) 0 ;
  int result;
  
  SWIG_check_num_args("rlMutex::trylock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlMutex::trylock",1,"rlMutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlMutex,0))){
    SWIG_fail_ptr("rlMutex_trylock",1,SWIGTYPE_p_rlMutex);
  }
  
  result = (int)(arg1)->trylock();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlMutex_lock(lua_State* L) {
  int SWIG_arg = 0;
  rlMutex *arg1 = (rlMutex *) 0 ;
  int result;
  
  SWIG_check_num_args("rlMutex::lock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlMutex::lock",1,"rlMutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlMutex,0))){
    SWIG_fail_ptr("rlMutex_lock",1,SWIGTYPE_p_rlMutex);
  }
  
  result = (int)(arg1)->lock();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlMutex_unlock(lua_State* L) {
  int SWIG_arg = 0;
  rlMutex *arg1 = (rlMutex *) 0 ;
  int result;
  
  SWIG_check_num_args("rlMutex::unlock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlMutex::unlock",1,"rlMutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlMutex,0))){
    SWIG_fail_ptr("rlMutex_unlock",1,SWIGTYPE_p_rlMutex);
  }
  
  result = (int)(arg1)->unlock();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlMutex_mutex_set(lua_State* L) {
  int SWIG_arg = 0;
  rlMutex *arg1 = (rlMutex *) 0 ;
  pthread_mutex_t arg2 ;
  pthread_mutex_t *argp2 ;
  
  SWIG_check_num_args("rlMutex::mutex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlMutex::mutex",1,"rlMutex *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("rlMutex::mutex",2,"pthread_mutex_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlMutex,0))){
    SWIG_fail_ptr("rlMutex_mutex_set",1,SWIGTYPE_p_rlMutex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_pthread_mutex_t,0))){
    SWIG_fail_ptr("rlMutex_mutex_set",2,SWIGTYPE_p_pthread_mutex_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mutex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlMutex_mutex_get(lua_State* L) {
  int SWIG_arg = 0;
  rlMutex *arg1 = (rlMutex *) 0 ;
  pthread_mutex_t result;
  
  SWIG_check_num_args("rlMutex::mutex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlMutex::mutex",1,"rlMutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlMutex,0))){
    SWIG_fail_ptr("rlMutex_mutex_get",1,SWIGTYPE_p_rlMutex);
  }
  
  result =  ((arg1)->mutex);
  {
    pthread_mutex_t * resultptr = new pthread_mutex_t((const pthread_mutex_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pthread_mutex_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlMutex(void *obj) {
rlMutex *arg1 = (rlMutex *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlMutex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlMutex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlMutex_attributes[] = {
    { "mutex", _wrap_rlMutex_mutex_get, _wrap_rlMutex_mutex_set },
    {0,0,0}
};
static swig_lua_method swig_rlMutex_methods[]= {
    { "trylock", _wrap_rlMutex_trylock},
    { "lock", _wrap_rlMutex_lock},
    { "unlock", _wrap_rlMutex_unlock},
    {0,0}
};
static swig_lua_method swig_rlMutex_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlMutex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlMutex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlMutex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlMutex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlMutex_Sf_SwigStatic = {
    "rlMutex",
    swig_rlMutex_Sf_SwigStatic_methods,
    swig_rlMutex_Sf_SwigStatic_attributes,
    swig_rlMutex_Sf_SwigStatic_constants,
    swig_rlMutex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlMutex_bases[] = {0};
static const char *swig_rlMutex_base_names[] = {0};
static swig_lua_class _wrap_class_rlMutex = { "rlMutex", "rlMutex", &SWIGTYPE_p_rlMutex,_proxy__wrap_new_rlMutex, swig_delete_rlMutex, swig_rlMutex_methods, swig_rlMutex_attributes, &swig_rlMutex_Sf_SwigStatic, swig_rlMutex_meta, swig_rlMutex_bases, swig_rlMutex_base_names };

static int _wrap_new_rlSemaphore__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  rlSemaphore *result = 0 ;
  
  SWIG_check_num_args("rlSemaphore::rlSemaphore",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlSemaphore::rlSemaphore",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (rlSemaphore *)new rlSemaphore(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSemaphore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSemaphore__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSemaphore *result = 0 ;
  
  SWIG_check_num_args("rlSemaphore::rlSemaphore",0,0)
  result = (rlSemaphore *)new rlSemaphore();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSemaphore,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSemaphore(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_rlSemaphore__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_rlSemaphore__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlSemaphore'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSemaphore::rlSemaphore(int)\n"
    "    rlSemaphore::rlSemaphore()\n");
  lua_error(L);return 0;
}


static int _wrap_rlSemaphore_waitSemaphore(lua_State* L) {
  int SWIG_arg = 0;
  rlSemaphore *arg1 = (rlSemaphore *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSemaphore::waitSemaphore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSemaphore::waitSemaphore",1,"rlSemaphore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSemaphore,0))){
    SWIG_fail_ptr("rlSemaphore_waitSemaphore",1,SWIGTYPE_p_rlSemaphore);
  }
  
  result = (int)(arg1)->waitSemaphore();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSemaphore_incrementSemaphore(lua_State* L) {
  int SWIG_arg = 0;
  rlSemaphore *arg1 = (rlSemaphore *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSemaphore::incrementSemaphore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSemaphore::incrementSemaphore",1,"rlSemaphore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSemaphore,0))){
    SWIG_fail_ptr("rlSemaphore_incrementSemaphore",1,SWIGTYPE_p_rlSemaphore);
  }
  
  result = (int)(arg1)->incrementSemaphore();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSemaphore_semaphore_set(lua_State* L) {
  int SWIG_arg = 0;
  rlSemaphore *arg1 = (rlSemaphore *) 0 ;
  WSEMAPHORE arg2 ;
  WSEMAPHORE *argp2 ;
  
  SWIG_check_num_args("rlSemaphore::semaphore",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSemaphore::semaphore",1,"rlSemaphore *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("rlSemaphore::semaphore",2,"WSEMAPHORE");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSemaphore,0))){
    SWIG_fail_ptr("rlSemaphore_semaphore_set",1,SWIGTYPE_p_rlSemaphore);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_WSEMAPHORE,0))){
    SWIG_fail_ptr("rlSemaphore_semaphore_set",2,SWIGTYPE_p_WSEMAPHORE);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->semaphore = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSemaphore_semaphore_get(lua_State* L) {
  int SWIG_arg = 0;
  rlSemaphore *arg1 = (rlSemaphore *) 0 ;
  WSEMAPHORE result;
  
  SWIG_check_num_args("rlSemaphore::semaphore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSemaphore::semaphore",1,"rlSemaphore *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSemaphore,0))){
    SWIG_fail_ptr("rlSemaphore_semaphore_get",1,SWIGTYPE_p_rlSemaphore);
  }
  
  result =  ((arg1)->semaphore);
  {
    WSEMAPHORE * resultptr = new WSEMAPHORE((const WSEMAPHORE &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_WSEMAPHORE,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlSemaphore(void *obj) {
rlSemaphore *arg1 = (rlSemaphore *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlSemaphore(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlSemaphore);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlSemaphore_attributes[] = {
    { "semaphore", _wrap_rlSemaphore_semaphore_get, _wrap_rlSemaphore_semaphore_set },
    {0,0,0}
};
static swig_lua_method swig_rlSemaphore_methods[]= {
    { "waitSemaphore", _wrap_rlSemaphore_waitSemaphore},
    { "incrementSemaphore", _wrap_rlSemaphore_incrementSemaphore},
    {0,0}
};
static swig_lua_method swig_rlSemaphore_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlSemaphore_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlSemaphore_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlSemaphore_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlSemaphore_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlSemaphore_Sf_SwigStatic = {
    "rlSemaphore",
    swig_rlSemaphore_Sf_SwigStatic_methods,
    swig_rlSemaphore_Sf_SwigStatic_attributes,
    swig_rlSemaphore_Sf_SwigStatic_constants,
    swig_rlSemaphore_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlSemaphore_bases[] = {0};
static const char *swig_rlSemaphore_base_names[] = {0};
static swig_lua_class _wrap_class_rlSemaphore = { "rlSemaphore", "rlSemaphore", &SWIGTYPE_p_rlSemaphore,_proxy__wrap_new_rlSemaphore, swig_delete_rlSemaphore, swig_rlSemaphore_methods, swig_rlSemaphore_attributes, &swig_rlSemaphore_Sf_SwigStatic, swig_rlSemaphore_meta, swig_rlSemaphore_bases, swig_rlSemaphore_base_names };

static int _wrap_new_rlSharedMemory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  unsigned long arg2 ;
  int arg3 ;
  rlSharedMemory *result = 0 ;
  
  SWIG_check_num_args("rlSharedMemory::rlSharedMemory",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlSharedMemory::rlSharedMemory",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSharedMemory::rlSharedMemory",2,"unsigned long");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSharedMemory::rlSharedMemory",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned long)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (rlSharedMemory *)new rlSharedMemory((char const *)arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSharedMemory,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSharedMemory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  unsigned long arg2 ;
  rlSharedMemory *result = 0 ;
  
  SWIG_check_num_args("rlSharedMemory::rlSharedMemory",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlSharedMemory::rlSharedMemory",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSharedMemory::rlSharedMemory",2,"unsigned long");
  arg1 = (char *)lua_tostring(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned long)lua_tonumber(L, 2);
  result = (rlSharedMemory *)new rlSharedMemory((char const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSharedMemory,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSharedMemory(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_rlSharedMemory__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_rlSharedMemory__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlSharedMemory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSharedMemory::rlSharedMemory(char const *,unsigned long,int)\n"
    "    rlSharedMemory::rlSharedMemory(char const *,unsigned long)\n");
  lua_error(L);return 0;
}


static int _wrap_rlSharedMemory_deleteSharedMemory(lua_State* L) {
  int SWIG_arg = 0;
  rlSharedMemory *arg1 = (rlSharedMemory *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSharedMemory::deleteSharedMemory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSharedMemory::deleteSharedMemory",1,"rlSharedMemory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSharedMemory,0))){
    SWIG_fail_ptr("rlSharedMemory_deleteSharedMemory",1,SWIGTYPE_p_rlSharedMemory);
  }
  
  result = (int)(arg1)->deleteSharedMemory();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSharedMemory_write(lua_State* L) {
  int SWIG_arg = 0;
  rlSharedMemory *arg1 = (rlSharedMemory *) 0 ;
  unsigned long arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlSharedMemory::write",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSharedMemory::write",1,"rlSharedMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSharedMemory::write",2,"unsigned long");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("rlSharedMemory::write",3,"void const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSharedMemory::write",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSharedMemory,0))){
    SWIG_fail_ptr("rlSharedMemory_write",1,SWIGTYPE_p_rlSharedMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned long)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"rlSharedMemory_write");
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->write(arg2,(void const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSharedMemory_read(lua_State* L) {
  int SWIG_arg = 0;
  rlSharedMemory *arg1 = (rlSharedMemory *) 0 ;
  unsigned long arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlSharedMemory::read",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSharedMemory::read",1,"rlSharedMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSharedMemory::read",2,"unsigned long");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("rlSharedMemory::read",3,"void *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSharedMemory::read",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSharedMemory,0))){
    SWIG_fail_ptr("rlSharedMemory_read",1,SWIGTYPE_p_rlSharedMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned long)lua_tonumber(L, 2);
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"rlSharedMemory_read");
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->read(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSharedMemory_readInt(lua_State* L) {
  int SWIG_arg = 0;
  rlSharedMemory *arg1 = (rlSharedMemory *) 0 ;
  unsigned long arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlSharedMemory::readInt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSharedMemory::readInt",1,"rlSharedMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSharedMemory::readInt",2,"unsigned long");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSharedMemory::readInt",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSharedMemory,0))){
    SWIG_fail_ptr("rlSharedMemory_readInt",1,SWIGTYPE_p_rlSharedMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned long)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->readInt(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSharedMemory_readShort(lua_State* L) {
  int SWIG_arg = 0;
  rlSharedMemory *arg1 = (rlSharedMemory *) 0 ;
  unsigned long arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlSharedMemory::readShort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSharedMemory::readShort",1,"rlSharedMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSharedMemory::readShort",2,"unsigned long");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSharedMemory::readShort",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSharedMemory,0))){
    SWIG_fail_ptr("rlSharedMemory_readShort",1,SWIGTYPE_p_rlSharedMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned long)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->readShort(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSharedMemory_readByte(lua_State* L) {
  int SWIG_arg = 0;
  rlSharedMemory *arg1 = (rlSharedMemory *) 0 ;
  unsigned long arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlSharedMemory::readByte",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSharedMemory::readByte",1,"rlSharedMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSharedMemory::readByte",2,"unsigned long");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSharedMemory::readByte",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSharedMemory,0))){
    SWIG_fail_ptr("rlSharedMemory_readByte",1,SWIGTYPE_p_rlSharedMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned long)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->readByte(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSharedMemory_readFloat(lua_State* L) {
  int SWIG_arg = 0;
  rlSharedMemory *arg1 = (rlSharedMemory *) 0 ;
  unsigned long arg2 ;
  int arg3 ;
  float result;
  
  SWIG_check_num_args("rlSharedMemory::readFloat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSharedMemory::readFloat",1,"rlSharedMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSharedMemory::readFloat",2,"unsigned long");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSharedMemory::readFloat",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSharedMemory,0))){
    SWIG_fail_ptr("rlSharedMemory_readFloat",1,SWIGTYPE_p_rlSharedMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned long)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float)(arg1)->readFloat(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSharedMemory_writeInt(lua_State* L) {
  int SWIG_arg = 0;
  rlSharedMemory *arg1 = (rlSharedMemory *) 0 ;
  unsigned long arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlSharedMemory::writeInt",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSharedMemory::writeInt",1,"rlSharedMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSharedMemory::writeInt",2,"unsigned long");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSharedMemory::writeInt",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSharedMemory::writeInt",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSharedMemory,0))){
    SWIG_fail_ptr("rlSharedMemory_writeInt",1,SWIGTYPE_p_rlSharedMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned long)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->writeInt(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSharedMemory_writeShort(lua_State* L) {
  int SWIG_arg = 0;
  rlSharedMemory *arg1 = (rlSharedMemory *) 0 ;
  unsigned long arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlSharedMemory::writeShort",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSharedMemory::writeShort",1,"rlSharedMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSharedMemory::writeShort",2,"unsigned long");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSharedMemory::writeShort",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSharedMemory::writeShort",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSharedMemory,0))){
    SWIG_fail_ptr("rlSharedMemory_writeShort",1,SWIGTYPE_p_rlSharedMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned long)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->writeShort(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSharedMemory_writeByte(lua_State* L) {
  int SWIG_arg = 0;
  rlSharedMemory *arg1 = (rlSharedMemory *) 0 ;
  unsigned long arg2 ;
  int arg3 ;
  unsigned char arg4 ;
  int result;
  
  SWIG_check_num_args("rlSharedMemory::writeByte",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSharedMemory::writeByte",1,"rlSharedMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSharedMemory::writeByte",2,"unsigned long");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSharedMemory::writeByte",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSharedMemory::writeByte",4,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSharedMemory,0))){
    SWIG_fail_ptr("rlSharedMemory_writeByte",1,SWIGTYPE_p_rlSharedMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned long)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned char)lua_tonumber(L, 4);
  result = (int)(arg1)->writeByte(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSharedMemory_writeFloat(lua_State* L) {
  int SWIG_arg = 0;
  rlSharedMemory *arg1 = (rlSharedMemory *) 0 ;
  unsigned long arg2 ;
  int arg3 ;
  float arg4 ;
  int result;
  
  SWIG_check_num_args("rlSharedMemory::writeFloat",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSharedMemory::writeFloat",1,"rlSharedMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSharedMemory::writeFloat",2,"unsigned long");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSharedMemory::writeFloat",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSharedMemory::writeFloat",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSharedMemory,0))){
    SWIG_fail_ptr("rlSharedMemory_writeFloat",1,SWIGTYPE_p_rlSharedMemory);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned long)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (int)(arg1)->writeFloat(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSharedMemory_getUserAdr(lua_State* L) {
  int SWIG_arg = 0;
  rlSharedMemory *arg1 = (rlSharedMemory *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("rlSharedMemory::getUserAdr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSharedMemory::getUserAdr",1,"rlSharedMemory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSharedMemory,0))){
    SWIG_fail_ptr("rlSharedMemory_getUserAdr",1,SWIGTYPE_p_rlSharedMemory);
  }
  
  result = (void *)(arg1)->getUserAdr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSharedMemory_getLock(lua_State* L) {
  int SWIG_arg = 0;
  rlSharedMemory *arg1 = (rlSharedMemory *) 0 ;
  SwigValueWrapper< std::shared_ptr< rlSharedMemory::LockUserAddr > > result;
  
  SWIG_check_num_args("rlSharedMemory::getLock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSharedMemory::getLock",1,"rlSharedMemory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSharedMemory,0))){
    SWIG_fail_ptr("rlSharedMemory_getLock",1,SWIGTYPE_p_rlSharedMemory);
  }
  
  result = (arg1)->getLock();
  {
    std::shared_ptr< rlSharedMemory::LockUserAddr > * resultptr = new std::shared_ptr< rlSharedMemory::LockUserAddr >((const std::shared_ptr< rlSharedMemory::LockUserAddr > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_rlSharedMemory__LockUserAddr_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSharedMemory_shmKey(lua_State* L) {
  int SWIG_arg = 0;
  rlSharedMemory *arg1 = (rlSharedMemory *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSharedMemory::shmKey",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSharedMemory::shmKey",1,"rlSharedMemory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSharedMemory,0))){
    SWIG_fail_ptr("rlSharedMemory_shmKey",1,SWIGTYPE_p_rlSharedMemory);
  }
  
  result = (int)(arg1)->shmKey();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSharedMemory_shmId(lua_State* L) {
  int SWIG_arg = 0;
  rlSharedMemory *arg1 = (rlSharedMemory *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSharedMemory::shmId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSharedMemory::shmId",1,"rlSharedMemory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSharedMemory,0))){
    SWIG_fail_ptr("rlSharedMemory_shmId",1,SWIGTYPE_p_rlSharedMemory);
  }
  
  result = (int)(arg1)->shmId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSharedMemory_size(lua_State* L) {
  int SWIG_arg = 0;
  rlSharedMemory *arg1 = (rlSharedMemory *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("rlSharedMemory::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSharedMemory::size",1,"rlSharedMemory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSharedMemory,0))){
    SWIG_fail_ptr("rlSharedMemory_size",1,SWIGTYPE_p_rlSharedMemory);
  }
  
  result = (unsigned long)(arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSharedMemory_status_set(lua_State* L) {
  int SWIG_arg = 0;
  rlSharedMemory *arg1 = (rlSharedMemory *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlSharedMemory::status",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSharedMemory::status",1,"rlSharedMemory *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSharedMemory::status",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSharedMemory,0))){
    SWIG_fail_ptr("rlSharedMemory_status_set",1,SWIGTYPE_p_rlSharedMemory);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->status = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSharedMemory_status_get(lua_State* L) {
  int SWIG_arg = 0;
  rlSharedMemory *arg1 = (rlSharedMemory *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSharedMemory::status",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSharedMemory::status",1,"rlSharedMemory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSharedMemory,0))){
    SWIG_fail_ptr("rlSharedMemory_status_get",1,SWIGTYPE_p_rlSharedMemory);
  }
  
  result = (int) ((arg1)->status);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSharedMemory_name_set(lua_State* L) {
  int SWIG_arg = 0;
  rlSharedMemory *arg1 = (rlSharedMemory *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("rlSharedMemory::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSharedMemory::name",1,"rlSharedMemory *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSharedMemory::name",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSharedMemory,0))){
    SWIG_fail_ptr("rlSharedMemory_name_set",1,SWIGTYPE_p_rlSharedMemory);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSharedMemory_name_get(lua_State* L) {
  int SWIG_arg = 0;
  rlSharedMemory *arg1 = (rlSharedMemory *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlSharedMemory::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSharedMemory::name",1,"rlSharedMemory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSharedMemory,0))){
    SWIG_fail_ptr("rlSharedMemory_name_get",1,SWIGTYPE_p_rlSharedMemory);
  }
  
  result = (char *) ((arg1)->name);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlSharedMemory(void *obj) {
rlSharedMemory *arg1 = (rlSharedMemory *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlSharedMemory(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlSharedMemory);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlSharedMemory_attributes[] = {
    { "status", _wrap_rlSharedMemory_status_get, _wrap_rlSharedMemory_status_set },
    { "name", _wrap_rlSharedMemory_name_get, _wrap_rlSharedMemory_name_set },
    {0,0,0}
};
static swig_lua_method swig_rlSharedMemory_methods[]= {
    { "deleteSharedMemory", _wrap_rlSharedMemory_deleteSharedMemory},
    { "write", _wrap_rlSharedMemory_write},
    { "read", _wrap_rlSharedMemory_read},
    { "readInt", _wrap_rlSharedMemory_readInt},
    { "readShort", _wrap_rlSharedMemory_readShort},
    { "readByte", _wrap_rlSharedMemory_readByte},
    { "readFloat", _wrap_rlSharedMemory_readFloat},
    { "writeInt", _wrap_rlSharedMemory_writeInt},
    { "writeShort", _wrap_rlSharedMemory_writeShort},
    { "writeByte", _wrap_rlSharedMemory_writeByte},
    { "writeFloat", _wrap_rlSharedMemory_writeFloat},
    { "getUserAdr", _wrap_rlSharedMemory_getUserAdr},
    { "getLock", _wrap_rlSharedMemory_getLock},
    { "shmKey", _wrap_rlSharedMemory_shmKey},
    { "shmId", _wrap_rlSharedMemory_shmId},
    { "size", _wrap_rlSharedMemory_size},
    {0,0}
};
static swig_lua_method swig_rlSharedMemory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlSharedMemory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlSharedMemory_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("OK", rlSharedMemory::OK)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_FILE", rlSharedMemory::ERROR_FILE)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_SHMGET", rlSharedMemory::ERROR_SHMGET)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_SHMAT", rlSharedMemory::ERROR_SHMAT)},
    {SWIG_LUA_CONSTTAB_INT("ERROR_SHMCTL", rlSharedMemory::ERROR_SHMCTL)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlSharedMemory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlSharedMemory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlSharedMemory_Sf_SwigStatic = {
    "rlSharedMemory",
    swig_rlSharedMemory_Sf_SwigStatic_methods,
    swig_rlSharedMemory_Sf_SwigStatic_attributes,
    swig_rlSharedMemory_Sf_SwigStatic_constants,
    swig_rlSharedMemory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlSharedMemory_bases[] = {0};
static const char *swig_rlSharedMemory_base_names[] = {0};
static swig_lua_class _wrap_class_rlSharedMemory = { "rlSharedMemory", "rlSharedMemory", &SWIGTYPE_p_rlSharedMemory,_proxy__wrap_new_rlSharedMemory, swig_delete_rlSharedMemory, swig_rlSharedMemory_methods, swig_rlSharedMemory_attributes, &swig_rlSharedMemory_Sf_SwigStatic, swig_rlSharedMemory_meta, swig_rlSharedMemory_bases, swig_rlSharedMemory_base_names };

static int _wrap_new_rlIpAdr(lua_State* L) {
  int SWIG_arg = 0;
  rlIpAdr *result = 0 ;
  
  SWIG_check_num_args("rlIpAdr::rlIpAdr",0,0)
  result = (rlIpAdr *)new rlIpAdr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlIpAdr,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIpAdr_setAdr(lua_State* L) {
  int SWIG_arg = 0;
  rlIpAdr *arg1 = (rlIpAdr *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlIpAdr::setAdr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIpAdr::setAdr",1,"rlIpAdr *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlIpAdr::setAdr",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlIpAdr::setAdr",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIpAdr,0))){
    SWIG_fail_ptr("rlIpAdr_setAdr",1,SWIGTYPE_p_rlIpAdr);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->setAdr((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIpAdr___eq(lua_State* L) {
  int SWIG_arg = 0;
  rlIpAdr *arg1 = (rlIpAdr *) 0 ;
  rlIpAdr *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("rlIpAdr::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIpAdr::operator ==",1,"rlIpAdr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("rlIpAdr::operator ==",2,"rlIpAdr &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIpAdr,0))){
    SWIG_fail_ptr("rlIpAdr___eq",1,SWIGTYPE_p_rlIpAdr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlIpAdr,0))){
    SWIG_fail_ptr("rlIpAdr___eq",2,SWIGTYPE_p_rlIpAdr);
  }
  
  result = (int)(arg1)->operator ==(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIpAdr_address_set(lua_State* L) {
  int SWIG_arg = 0;
  rlIpAdr *arg1 = (rlIpAdr *) 0 ;
  sockaddr_in arg2 ;
  sockaddr_in *argp2 ;
  
  SWIG_check_num_args("rlIpAdr::address",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIpAdr::address",1,"rlIpAdr *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("rlIpAdr::address",2,"sockaddr_in");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIpAdr,0))){
    SWIG_fail_ptr("rlIpAdr_address_set",1,SWIGTYPE_p_rlIpAdr);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_sockaddr_in,0))){
    SWIG_fail_ptr("rlIpAdr_address_set",2,SWIGTYPE_p_sockaddr_in);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->address = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIpAdr_address_get(lua_State* L) {
  int SWIG_arg = 0;
  rlIpAdr *arg1 = (rlIpAdr *) 0 ;
  sockaddr_in result;
  
  SWIG_check_num_args("rlIpAdr::address",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIpAdr::address",1,"rlIpAdr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIpAdr,0))){
    SWIG_fail_ptr("rlIpAdr_address_get",1,SWIGTYPE_p_rlIpAdr);
  }
  
  result =  ((arg1)->address);
  {
    sockaddr_in * resultptr = new sockaddr_in((const sockaddr_in &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_sockaddr_in,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlIpAdr(void *obj) {
rlIpAdr *arg1 = (rlIpAdr *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlIpAdr(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlIpAdr);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlIpAdr_attributes[] = {
    { "address", _wrap_rlIpAdr_address_get, _wrap_rlIpAdr_address_set },
    {0,0,0}
};
static swig_lua_method swig_rlIpAdr_methods[]= {
    { "setAdr", _wrap_rlIpAdr_setAdr},
    { "__eq", _wrap_rlIpAdr___eq},
    {0,0}
};
static swig_lua_method swig_rlIpAdr_meta[] = {
    { "__eq", _wrap_rlIpAdr___eq},
    {0,0}
};

static swig_lua_attribute swig_rlIpAdr_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlIpAdr_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlIpAdr_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlIpAdr_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlIpAdr_Sf_SwigStatic = {
    "rlIpAdr",
    swig_rlIpAdr_Sf_SwigStatic_methods,
    swig_rlIpAdr_Sf_SwigStatic_attributes,
    swig_rlIpAdr_Sf_SwigStatic_constants,
    swig_rlIpAdr_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlIpAdr_bases[] = {0};
static const char *swig_rlIpAdr_base_names[] = {0};
static swig_lua_class _wrap_class_rlIpAdr = { "rlIpAdr", "rlIpAdr", &SWIGTYPE_p_rlIpAdr,_proxy__wrap_new_rlIpAdr, swig_delete_rlIpAdr, swig_rlIpAdr_methods, swig_rlIpAdr_attributes, &swig_rlIpAdr_Sf_SwigStatic, swig_rlIpAdr_meta, swig_rlIpAdr_bases, swig_rlIpAdr_base_names };

static int _wrap_new_rlUdpSocket__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  rlUdpSocket *result = 0 ;
  
  SWIG_check_num_args("rlUdpSocket::rlUdpSocket",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlUdpSocket::rlUdpSocket",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (rlUdpSocket *)new rlUdpSocket(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlUdpSocket,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlUdpSocket__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlUdpSocket *result = 0 ;
  
  SWIG_check_num_args("rlUdpSocket::rlUdpSocket",0,0)
  result = (rlUdpSocket *)new rlUdpSocket();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlUdpSocket,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlUdpSocket(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_rlUdpSocket__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_rlUdpSocket__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlUdpSocket'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlUdpSocket::rlUdpSocket(int)\n"
    "    rlUdpSocket::rlUdpSocket()\n");
  lua_error(L);return 0;
}


static int _wrap_rlUdpSocket_setSockopt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlUdpSocket *arg1 = (rlUdpSocket *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlUdpSocket::setSockopt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlUdpSocket::setSockopt",1,"rlUdpSocket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlUdpSocket::setSockopt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlUdpSocket,0))){
    SWIG_fail_ptr("rlUdpSocket_setSockopt",1,SWIGTYPE_p_rlUdpSocket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->setSockopt(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlUdpSocket_setSockopt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlUdpSocket *arg1 = (rlUdpSocket *) 0 ;
  int arg2 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int result;
  
  SWIG_check_num_args("rlUdpSocket::setSockopt",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlUdpSocket::setSockopt",1,"rlUdpSocket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlUdpSocket::setSockopt",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlUdpSocket::setSockopt",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlUdpSocket::setSockopt",4,"void *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlUdpSocket::setSockopt",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlUdpSocket,0))){
    SWIG_fail_ptr("rlUdpSocket_setSockopt",1,SWIGTYPE_p_rlUdpSocket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"rlUdpSocket_setSockopt");
  arg5 = (int)lua_tonumber(L, 5);
  result = (int)(arg1)->setSockopt(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlUdpSocket_setSockopt(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlUdpSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_rlUdpSocket_setSockopt__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlUdpSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_rlUdpSocket_setSockopt__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlUdpSocket_setSockopt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlUdpSocket::setSockopt(int)\n"
    "    rlUdpSocket::setSockopt(int,int,void *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_rlUdpSocket_bind(lua_State* L) {
  int SWIG_arg = 0;
  rlUdpSocket *arg1 = (rlUdpSocket *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlUdpSocket::bind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlUdpSocket::bind",1,"rlUdpSocket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlUdpSocket::bind",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlUdpSocket,0))){
    SWIG_fail_ptr("rlUdpSocket_bind",1,SWIGTYPE_p_rlUdpSocket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->bind(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlUdpSocket_select(lua_State* L) {
  int SWIG_arg = 0;
  rlUdpSocket *arg1 = (rlUdpSocket *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlUdpSocket::select",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlUdpSocket::select",1,"rlUdpSocket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlUdpSocket::select",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlUdpSocket,0))){
    SWIG_fail_ptr("rlUdpSocket_select",1,SWIGTYPE_p_rlUdpSocket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->select(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlUdpSocket_recvfrom__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlUdpSocket *arg1 = (rlUdpSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  rlIpAdr *arg4 = (rlIpAdr *) 0 ;
  int arg5 ;
  int result;
  
  SWIG_check_num_args("rlUdpSocket::recvfrom",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlUdpSocket::recvfrom",1,"rlUdpSocket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlUdpSocket::recvfrom",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlUdpSocket::recvfrom",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlUdpSocket::recvfrom",4,"rlIpAdr *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlUdpSocket::recvfrom",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlUdpSocket,0))){
    SWIG_fail_ptr("rlUdpSocket_recvfrom",1,SWIGTYPE_p_rlUdpSocket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlUdpSocket_recvfrom");
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_rlIpAdr,0))){
    SWIG_fail_ptr("rlUdpSocket_recvfrom",4,SWIGTYPE_p_rlIpAdr);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (int)(arg1)->recvfrom(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlUdpSocket_recvfrom__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlUdpSocket *arg1 = (rlUdpSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  rlIpAdr *arg4 = (rlIpAdr *) 0 ;
  int result;
  
  SWIG_check_num_args("rlUdpSocket::recvfrom",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlUdpSocket::recvfrom",1,"rlUdpSocket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlUdpSocket::recvfrom",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlUdpSocket::recvfrom",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlUdpSocket::recvfrom",4,"rlIpAdr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlUdpSocket,0))){
    SWIG_fail_ptr("rlUdpSocket_recvfrom",1,SWIGTYPE_p_rlUdpSocket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlUdpSocket_recvfrom");
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_rlIpAdr,0))){
    SWIG_fail_ptr("rlUdpSocket_recvfrom",4,SWIGTYPE_p_rlIpAdr);
  }
  
  result = (int)(arg1)->recvfrom(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlUdpSocket_recvfrom(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlUdpSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_rlIpAdr, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_rlUdpSocket_recvfrom__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlUdpSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_rlIpAdr, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_rlUdpSocket_recvfrom__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlUdpSocket_recvfrom'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlUdpSocket::recvfrom(void *,int,rlIpAdr *,int)\n"
    "    rlUdpSocket::recvfrom(void *,int,rlIpAdr *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlUdpSocket_sendto(lua_State* L) {
  int SWIG_arg = 0;
  rlUdpSocket *arg1 = (rlUdpSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  rlIpAdr *arg4 = (rlIpAdr *) 0 ;
  int result;
  
  SWIG_check_num_args("rlUdpSocket::sendto",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlUdpSocket::sendto",1,"rlUdpSocket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlUdpSocket::sendto",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlUdpSocket::sendto",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlUdpSocket::sendto",4,"rlIpAdr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlUdpSocket,0))){
    SWIG_fail_ptr("rlUdpSocket_sendto",1,SWIGTYPE_p_rlUdpSocket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlUdpSocket_sendto");
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_rlIpAdr,0))){
    SWIG_fail_ptr("rlUdpSocket_sendto",4,SWIGTYPE_p_rlIpAdr);
  }
  
  result = (int)(arg1)->sendto((void const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlUdpSocket_printf(lua_State* L) {
  int SWIG_arg = 0;
  rlUdpSocket *arg1 = (rlUdpSocket *) 0 ;
  rlIpAdr *arg2 = (rlIpAdr *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  int result;
  
  SWIG_check_num_args("rlUdpSocket::printf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlUdpSocket::printf",1,"rlUdpSocket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlUdpSocket::printf",2,"rlIpAdr *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlUdpSocket::printf",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlUdpSocket,0))){
    SWIG_fail_ptr("rlUdpSocket_printf",1,SWIGTYPE_p_rlUdpSocket);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlIpAdr,0))){
    SWIG_fail_ptr("rlUdpSocket_printf",2,SWIGTYPE_p_rlIpAdr);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->printf(arg2,(char const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlUdpSocket_debug_set(lua_State* L) {
  int SWIG_arg = 0;
  rlUdpSocket *arg1 = (rlUdpSocket *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlUdpSocket::debug",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlUdpSocket::debug",1,"rlUdpSocket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlUdpSocket::debug",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlUdpSocket,0))){
    SWIG_fail_ptr("rlUdpSocket_debug_set",1,SWIGTYPE_p_rlUdpSocket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->debug = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlUdpSocket_debug_get(lua_State* L) {
  int SWIG_arg = 0;
  rlUdpSocket *arg1 = (rlUdpSocket *) 0 ;
  int result;
  
  SWIG_check_num_args("rlUdpSocket::debug",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlUdpSocket::debug",1,"rlUdpSocket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlUdpSocket,0))){
    SWIG_fail_ptr("rlUdpSocket_debug_get",1,SWIGTYPE_p_rlUdpSocket);
  }
  
  result = (int) ((arg1)->debug);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlUdpSocket_readflag_set(lua_State* L) {
  int SWIG_arg = 0;
  rlUdpSocket *arg1 = (rlUdpSocket *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlUdpSocket::readflag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlUdpSocket::readflag",1,"rlUdpSocket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlUdpSocket::readflag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlUdpSocket,0))){
    SWIG_fail_ptr("rlUdpSocket_readflag_set",1,SWIGTYPE_p_rlUdpSocket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->readflag = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlUdpSocket_readflag_get(lua_State* L) {
  int SWIG_arg = 0;
  rlUdpSocket *arg1 = (rlUdpSocket *) 0 ;
  int result;
  
  SWIG_check_num_args("rlUdpSocket::readflag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlUdpSocket::readflag",1,"rlUdpSocket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlUdpSocket,0))){
    SWIG_fail_ptr("rlUdpSocket_readflag_get",1,SWIGTYPE_p_rlUdpSocket);
  }
  
  result = (int) ((arg1)->readflag);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlUdpSocket_writeflag_set(lua_State* L) {
  int SWIG_arg = 0;
  rlUdpSocket *arg1 = (rlUdpSocket *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlUdpSocket::writeflag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlUdpSocket::writeflag",1,"rlUdpSocket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlUdpSocket::writeflag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlUdpSocket,0))){
    SWIG_fail_ptr("rlUdpSocket_writeflag_set",1,SWIGTYPE_p_rlUdpSocket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->writeflag = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlUdpSocket_writeflag_get(lua_State* L) {
  int SWIG_arg = 0;
  rlUdpSocket *arg1 = (rlUdpSocket *) 0 ;
  int result;
  
  SWIG_check_num_args("rlUdpSocket::writeflag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlUdpSocket::writeflag",1,"rlUdpSocket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlUdpSocket,0))){
    SWIG_fail_ptr("rlUdpSocket_writeflag_get",1,SWIGTYPE_p_rlUdpSocket);
  }
  
  result = (int) ((arg1)->writeflag);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlUdpSocket(void *obj) {
rlUdpSocket *arg1 = (rlUdpSocket *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlUdpSocket(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlUdpSocket);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlUdpSocket_attributes[] = {
    { "debug", _wrap_rlUdpSocket_debug_get, _wrap_rlUdpSocket_debug_set },
    { "readflag", _wrap_rlUdpSocket_readflag_get, _wrap_rlUdpSocket_readflag_set },
    { "writeflag", _wrap_rlUdpSocket_writeflag_get, _wrap_rlUdpSocket_writeflag_set },
    {0,0,0}
};
static swig_lua_method swig_rlUdpSocket_methods[]= {
    { "setSockopt", _wrap_rlUdpSocket_setSockopt},
    { "bind", _wrap_rlUdpSocket_bind},
    { "select", _wrap_rlUdpSocket_select},
    { "recvfrom", _wrap_rlUdpSocket_recvfrom},
    { "sendto", _wrap_rlUdpSocket_sendto},
    { "printf", _wrap_rlUdpSocket_printf},
    {0,0}
};
static swig_lua_method swig_rlUdpSocket_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlUdpSocket_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlUdpSocket_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlUdpSocket_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlUdpSocket_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlUdpSocket_Sf_SwigStatic = {
    "rlUdpSocket",
    swig_rlUdpSocket_Sf_SwigStatic_methods,
    swig_rlUdpSocket_Sf_SwigStatic_attributes,
    swig_rlUdpSocket_Sf_SwigStatic_constants,
    swig_rlUdpSocket_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlUdpSocket_bases[] = {0};
static const char *swig_rlUdpSocket_base_names[] = {0};
static swig_lua_class _wrap_class_rlUdpSocket = { "rlUdpSocket", "rlUdpSocket", &SWIGTYPE_p_rlUdpSocket,_proxy__wrap_new_rlUdpSocket, swig_delete_rlUdpSocket, swig_rlUdpSocket_methods, swig_rlUdpSocket_attributes, &swig_rlUdpSocket_Sf_SwigStatic, swig_rlUdpSocket_meta, swig_rlUdpSocket_bases, swig_rlUdpSocket_base_names };

static int _wrap_rlwsa(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("rlwsa",0,0)
  result = (int)rlwsa();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlScoketWrite(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = (int *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlScoketWrite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlScoketWrite",1,"int *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlScoketWrite",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlScoketWrite",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlScoketWrite",1,SWIGTYPE_p_int);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlScoketWrite");
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)rlScoketWrite(arg1,(void const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSocket__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  rlSocket *result = 0 ;
  
  SWIG_check_num_args("rlSocket::rlSocket",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlSocket::rlSocket",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSocket::rlSocket",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSocket::rlSocket",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (rlSocket *)new rlSocket((char const *)arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSocket,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSocket__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  rlSocket *result = 0 ;
  
  SWIG_check_num_args("rlSocket::rlSocket",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlSocket::rlSocket",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (rlSocket *)new rlSocket(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSocket,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSocket(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_rlSocket__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_rlSocket__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlSocket'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSocket::rlSocket(char const *,int,int)\n"
    "    rlSocket::rlSocket(int)\n");
  lua_error(L);return 0;
}


static int _wrap_rlSocket_setAdr(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("rlSocket::setAdr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::setAdr",1,"rlSocket *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSocket::setAdr",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_setAdr",1,SWIGTYPE_p_rlSocket);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setAdr((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_setPort(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlSocket::setPort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::setPort",1,"rlSocket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSocket::setPort",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_setPort",1,SWIGTYPE_p_rlSocket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setPort(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_getPort(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSocket::getPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::getPort",1,"rlSocket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_getPort",1,SWIGTYPE_p_rlSocket);
  }
  
  result = (int)(arg1)->getPort();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_setActive(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlSocket::setActive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::setActive",1,"rlSocket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSocket::setActive",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_setActive",1,SWIGTYPE_p_rlSocket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setActive(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlSocket::read",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::read",1,"rlSocket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSocket::read",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSocket::read",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSocket::read",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_read",1,SWIGTYPE_p_rlSocket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlSocket_read");
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->read(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlSocket::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::read",1,"rlSocket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSocket::read",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSocket::read",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_read",1,SWIGTYPE_p_rlSocket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlSocket_read");
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->read(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_read(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_rlSocket_read__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_rlSocket_read__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlSocket_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSocket::read(void *,int,int)\n"
    "    rlSocket::read(void *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_rlSocket_readStr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlSocket::readStr",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::readStr",1,"rlSocket *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSocket::readStr",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSocket::readStr",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSocket::readStr",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_readStr",1,SWIGTYPE_p_rlSocket);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->readStr(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_readStr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlSocket::readStr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::readStr",1,"rlSocket *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSocket::readStr",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSocket::readStr",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_readStr",1,SWIGTYPE_p_rlSocket);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->readStr(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_readStr(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_rlSocket_readStr__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_rlSocket_readStr__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlSocket_readStr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSocket::readStr(char *,int,int)\n"
    "    rlSocket::readStr(char *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_rlSocket_readHttpHeader__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  rlString *arg2 = (rlString *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlSocket::readHttpHeader",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::readHttpHeader",1,"rlSocket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSocket::readHttpHeader",2,"rlString *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSocket::readHttpHeader",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_readHttpHeader",1,SWIGTYPE_p_rlSocket);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlSocket_readHttpHeader",2,SWIGTYPE_p_rlString);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->readHttpHeader(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_readHttpHeader__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  rlString *arg2 = (rlString *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSocket::readHttpHeader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::readHttpHeader",1,"rlSocket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSocket::readHttpHeader",2,"rlString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_readHttpHeader",1,SWIGTYPE_p_rlSocket);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlSocket_readHttpHeader",2,SWIGTYPE_p_rlString);
  }
  
  result = (int)(arg1)->readHttpHeader(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_readHttpHeader(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_rlString, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_rlSocket_readHttpHeader__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_rlString, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_rlSocket_readHttpHeader__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlSocket_readHttpHeader'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSocket::readHttpHeader(rlString *,int)\n"
    "    rlSocket::readHttpHeader(rlString *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlSocket_write(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlSocket::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::write",1,"rlSocket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSocket::write",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSocket::write",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_write",1,SWIGTYPE_p_rlSocket);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlSocket_write");
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->write((void const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_printf(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  int result;
  
  SWIG_check_num_args("rlSocket::printf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::printf",1,"rlSocket *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSocket::printf",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_printf",1,SWIGTYPE_p_rlSocket);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->printf((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_connect(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSocket::connect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::connect",1,"rlSocket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_connect",1,SWIGTYPE_p_rlSocket);
  }
  
  result = (int)(arg1)->connect();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_disconnect(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSocket::disconnect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::disconnect",1,"rlSocket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_disconnect",1,SWIGTYPE_p_rlSocket);
  }
  
  result = (int)(arg1)->disconnect();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_select__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlSocket::select",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::select",1,"rlSocket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSocket::select",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_select",1,SWIGTYPE_p_rlSocket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->select(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_select__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSocket::select",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::select",1,"rlSocket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_select",1,SWIGTYPE_p_rlSocket);
  }
  
  result = (int)(arg1)->select();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_select(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rlSocket_select__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_rlSocket_select__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlSocket_select'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSocket::select(int)\n"
    "    rlSocket::select()\n");
  lua_error(L);return 0;
}


static int _wrap_rlSocket_isConnected(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSocket::isConnected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::isConnected",1,"rlSocket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_isConnected",1,SWIGTYPE_p_rlSocket);
  }
  
  result = (int)(arg1)->isConnected();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_setIPVersion(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlSocket::setIPVersion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::setIPVersion",1,"rlSocket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSocket::setIPVersion",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_setIPVersion",1,SWIGTYPE_p_rlSocket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->setIPVersion(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_getIPVersion(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSocket::getIPVersion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::getIPVersion",1,"rlSocket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_getIPVersion",1,SWIGTYPE_p_rlSocket);
  }
  
  result = (int)(arg1)->getIPVersion();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_sendProcessViewBrowserButtonEvent(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlSocket::sendProcessViewBrowserButtonEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::sendProcessViewBrowserButtonEvent",1,"rlSocket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSocket::sendProcessViewBrowserButtonEvent",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_sendProcessViewBrowserButtonEvent",1,SWIGTYPE_p_rlSocket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->sendProcessViewBrowserButtonEvent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_s_set(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlSocket::s",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::s",1,"rlSocket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSocket::s",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_s_set",1,SWIGTYPE_p_rlSocket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->s = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_s_get(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSocket::s",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::s",1,"rlSocket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_s_get",1,SWIGTYPE_p_rlSocket);
  }
  
  result = (int) ((arg1)->s);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_rlGetsockopt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  int *arg5 = (int *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSocket::rlGetsockopt",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlSocket::rlGetsockopt",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSocket::rlGetsockopt",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSocket::rlGetsockopt",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlSocket::rlGetsockopt",4,"void *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("rlSocket::rlGetsockopt",5,"int *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"rlSocket_rlGetsockopt");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlSocket_rlGetsockopt",5,SWIGTYPE_p_int);
  }
  
  result = (int)rlSocket::rlGetsockopt(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_rlSetsockopt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int result;
  
  SWIG_check_num_args("rlSocket::rlSetsockopt",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlSocket::rlSetsockopt",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSocket::rlSetsockopt",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSocket::rlSetsockopt",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlSocket::rlSetsockopt",4,"void const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlSocket::rlSetsockopt",5,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"rlSocket_rlSetsockopt");
  arg5 = (int)lua_tonumber(L, 5);
  result = (int)rlSocket::rlSetsockopt(arg1,arg2,arg3,(void const *)arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_rlGetsockopt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlSocket::rlGetsockopt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::rlGetsockopt",1,"rlSocket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSocket::rlGetsockopt",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSocket::rlGetsockopt",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_rlGetsockopt",1,SWIGTYPE_p_rlSocket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->rlGetsockopt(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_rlGetsockopt(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_rlSocket_rlGetsockopt__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_rlSocket_rlGetsockopt__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlSocket_rlGetsockopt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSocket::rlGetsockopt(int,int,int,void *,int *)\n"
    "    rlSocket::rlGetsockopt(int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_rlSocket_rlSetsockopt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlSocket::rlSetsockopt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::rlSetsockopt",1,"rlSocket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSocket::rlSetsockopt",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSocket::rlSetsockopt",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_rlSetsockopt",1,SWIGTYPE_p_rlSocket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->rlSetsockopt(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_rlSetsockopt(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSocket, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_rlSocket_rlSetsockopt__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_rlSocket_rlSetsockopt__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlSocket_rlSetsockopt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSocket::rlSetsockopt(int,int,int,void const *,int)\n"
    "    rlSocket::rlSetsockopt(int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_rlSocket_readHttpContentLength(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlSocket::readHttpContentLength",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::readHttpContentLength",1,"rlSocket *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSocket::readHttpContentLength",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_readHttpContentLength",1,SWIGTYPE_p_rlSocket);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->readHttpContentLength(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_sockaddr_set(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  unsigned char *arg2 ;
  
  SWIG_check_num_args("rlSocket::sockaddr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::sockaddr",1,"rlSocket *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSocket::sockaddr",2,"unsigned char [16+48]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_sockaddr_set",1,SWIGTYPE_p_rlSocket);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlSocket_sockaddr_set",2,SWIGTYPE_p_unsigned_char);
  }
  
  {
    size_t ii;
    unsigned char *b = (unsigned char *) arg1->sockaddr;
    for (ii = 0; ii < (size_t)16+48; ii++) b[ii] = *((unsigned char *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSocket_sockaddr_get(lua_State* L) {
  int SWIG_arg = 0;
  rlSocket *arg1 = (rlSocket *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("rlSocket::sockaddr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSocket::sockaddr",1,"rlSocket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlSocket_sockaddr_get",1,SWIGTYPE_p_rlSocket);
  }
  
  result = (unsigned char *)(unsigned char *) ((arg1)->sockaddr);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlSocket(void *obj) {
rlSocket *arg1 = (rlSocket *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlSocket(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlSocket);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlSocket_attributes[] = {
    { "s", _wrap_rlSocket_s_get, _wrap_rlSocket_s_set },
    { "sockaddr", _wrap_rlSocket_sockaddr_get, _wrap_rlSocket_sockaddr_set },
    {0,0,0}
};
static swig_lua_method swig_rlSocket_methods[]= {
    { "setAdr", _wrap_rlSocket_setAdr},
    { "setPort", _wrap_rlSocket_setPort},
    { "getPort", _wrap_rlSocket_getPort},
    { "setActive", _wrap_rlSocket_setActive},
    { "read", _wrap_rlSocket_read},
    { "readStr", _wrap_rlSocket_readStr},
    { "readHttpHeader", _wrap_rlSocket_readHttpHeader},
    { "write", _wrap_rlSocket_write},
    { "printf", _wrap_rlSocket_printf},
    { "connect", _wrap_rlSocket_connect},
    { "disconnect", _wrap_rlSocket_disconnect},
    { "select", _wrap_rlSocket_select},
    { "isConnected", _wrap_rlSocket_isConnected},
    { "setIPVersion", _wrap_rlSocket_setIPVersion},
    { "getIPVersion", _wrap_rlSocket_getIPVersion},
    { "sendProcessViewBrowserButtonEvent", _wrap_rlSocket_sendProcessViewBrowserButtonEvent},
    { "rlGetsockopt", _wrap_rlSocket_rlGetsockopt},
    { "rlSetsockopt", _wrap_rlSocket_rlSetsockopt},
    { "readHttpContentLength", _wrap_rlSocket_readHttpContentLength},
    {0,0}
};
static swig_lua_method swig_rlSocket_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlSocket_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlSocket_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("SOCKET_ERR", rlSocket::SOCKET_ERR)},
    {SWIG_LUA_CONSTTAB_INT("SETSOCKOPT_ERR", rlSocket::SETSOCKOPT_ERR)},
    {SWIG_LUA_CONSTTAB_INT("LISTEN_ERR", rlSocket::LISTEN_ERR)},
    {SWIG_LUA_CONSTTAB_INT("ACCEPT_ERR", rlSocket::ACCEPT_ERR)},
    {SWIG_LUA_CONSTTAB_INT("INET_ADDR_ERR", rlSocket::INET_ADDR_ERR)},
    {SWIG_LUA_CONSTTAB_INT("CONNECT_ERR", rlSocket::CONNECT_ERR)},
    {SWIG_LUA_CONSTTAB_INT("PORT_ERR", rlSocket::PORT_ERR)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlSocket_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlSocket_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlSocket_Sf_SwigStatic = {
    "rlSocket",
    swig_rlSocket_Sf_SwigStatic_methods,
    swig_rlSocket_Sf_SwigStatic_attributes,
    swig_rlSocket_Sf_SwigStatic_constants,
    swig_rlSocket_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlSocket_bases[] = {0};
static const char *swig_rlSocket_base_names[] = {0};
static swig_lua_class _wrap_class_rlSocket = { "rlSocket", "rlSocket", &SWIGTYPE_p_rlSocket,_proxy__wrap_new_rlSocket, swig_delete_rlSocket, swig_rlSocket_methods, swig_rlSocket_attributes, &swig_rlSocket_Sf_SwigStatic, swig_rlSocket_meta, swig_rlSocket_bases, swig_rlSocket_base_names };

static int _wrap_new_rl3964R__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  rl3964R *result = 0 ;
  
  SWIG_check_num_args("rl3964R::rl3964R",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rl3964R::rl3964R",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (rl3964R *)new rl3964R(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rl3964R,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rl3964R__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *result = 0 ;
  
  SWIG_check_num_args("rl3964R::rl3964R",0,0)
  result = (rl3964R *)new rl3964R();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rl3964R,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rl3964R(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_rl3964R__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_rl3964R__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rl3964R'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rl3964R::rl3964R(int)\n"
    "    rl3964R::rl3964R()\n");
  lua_error(L);return 0;
}


static int _wrap_rl3964R_open__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *arg1 = (rl3964R *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rl3964R::open",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rl3964R::open",1,"rl3964R *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rl3964R::open",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rl3964R::open",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rl3964R,0))){
    SWIG_fail_ptr("rl3964R_open",1,SWIGTYPE_p_rl3964R);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->open((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rl3964R_open__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *arg1 = (rl3964R *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rl3964R::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rl3964R::open",1,"rl3964R *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rl3964R::open",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rl3964R,0))){
    SWIG_fail_ptr("rl3964R_open",1,SWIGTYPE_p_rl3964R);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->open((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rl3964R_open(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rl3964R, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_rl3964R_open__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rl3964R, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_rl3964R_open__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rl3964R_open'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rl3964R::open(char const *,int)\n"
    "    rl3964R::open(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_rl3964R_close(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *arg1 = (rl3964R *) 0 ;
  int result;
  
  SWIG_check_num_args("rl3964R::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rl3964R::close",1,"rl3964R *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rl3964R,0))){
    SWIG_fail_ptr("rl3964R_close",1,SWIGTYPE_p_rl3964R);
  }
  
  result = (int)(arg1)->close();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rl3964R_setReadCallback(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *arg1 = (rl3964R *) 0 ;
  void (*arg2)(unsigned char const *,int) = (void (*)(unsigned char const *,int)) 0 ;
  int result;
  
  SWIG_check_num_args("rl3964R::setReadCallback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rl3964R::setReadCallback",1,"rl3964R *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rl3964R::setReadCallback",2,"void (*)(unsigned char const *,int)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rl3964R,0))){
    SWIG_fail_ptr("rl3964R_setReadCallback",1,SWIGTYPE_p_rl3964R);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_q_const__unsigned_char_int__void,0))){
    SWIG_fail_ptr("rl3964R_setReadCallback",2,SWIGTYPE_p_f_p_q_const__unsigned_char_int__void);
  }
  
  result = (int)(arg1)->setReadCallback(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rl3964R_write(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *arg1 = (rl3964R *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rl3964R::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rl3964R::write",1,"rl3964R *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rl3964R::write",2,"unsigned char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rl3964R::write",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rl3964R,0))){
    SWIG_fail_ptr("rl3964R_write",1,SWIGTYPE_p_rl3964R);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rl3964R_write",2,SWIGTYPE_p_unsigned_char);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->write((unsigned char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rl3964R_send(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *arg1 = (rl3964R *) 0 ;
  int result;
  
  SWIG_check_num_args("rl3964R::send",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rl3964R::send",1,"rl3964R *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rl3964R,0))){
    SWIG_fail_ptr("rl3964R_send",1,SWIGTYPE_p_rl3964R);
  }
  
  result = (int)(arg1)->send();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rl3964R_receive(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *arg1 = (rl3964R *) 0 ;
  int result;
  
  SWIG_check_num_args("rl3964R::receive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rl3964R::receive",1,"rl3964R *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rl3964R,0))){
    SWIG_fail_ptr("rl3964R_receive",1,SWIGTYPE_p_rl3964R);
  }
  
  result = (int)(arg1)->receive();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rl3964R_receiver_set(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *arg1 = (rl3964R *) 0 ;
  rlThread *arg2 = (rlThread *) 0 ;
  
  SWIG_check_num_args("rl3964R::receiver",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rl3964R::receiver",1,"rl3964R *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rl3964R::receiver",2,"rlThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rl3964R,0))){
    SWIG_fail_ptr("rl3964R_receiver_set",1,SWIGTYPE_p_rl3964R);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlThread,0))){
    SWIG_fail_ptr("rl3964R_receiver_set",2,SWIGTYPE_p_rlThread);
  }
  
  if (arg1) (arg1)->receiver = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rl3964R_receiver_get(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *arg1 = (rl3964R *) 0 ;
  rlThread *result = 0 ;
  
  SWIG_check_num_args("rl3964R::receiver",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rl3964R::receiver",1,"rl3964R *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rl3964R,0))){
    SWIG_fail_ptr("rl3964R_receiver_get",1,SWIGTYPE_p_rl3964R);
  }
  
  result = (rlThread *)& ((arg1)->receiver);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlThread,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rl3964R_tty_set(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *arg1 = (rl3964R *) 0 ;
  rlSerial *arg2 = (rlSerial *) 0 ;
  
  SWIG_check_num_args("rl3964R::tty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rl3964R::tty",1,"rl3964R *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rl3964R::tty",2,"rlSerial *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rl3964R,0))){
    SWIG_fail_ptr("rl3964R_tty_set",1,SWIGTYPE_p_rl3964R);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rl3964R_tty_set",2,SWIGTYPE_p_rlSerial);
  }
  
  if (arg1) (arg1)->tty = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rl3964R_tty_get(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *arg1 = (rl3964R *) 0 ;
  rlSerial *result = 0 ;
  
  SWIG_check_num_args("rl3964R::tty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rl3964R::tty",1,"rl3964R *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rl3964R,0))){
    SWIG_fail_ptr("rl3964R_tty_get",1,SWIGTYPE_p_rl3964R);
  }
  
  result = (rlSerial *)& ((arg1)->tty);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSerial,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rl3964R_state_set(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *arg1 = (rl3964R *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rl3964R::state",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rl3964R::state",1,"rl3964R *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rl3964R::state",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rl3964R,0))){
    SWIG_fail_ptr("rl3964R_state_set",1,SWIGTYPE_p_rl3964R);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->state = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rl3964R_state_get(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *arg1 = (rl3964R *) 0 ;
  int result;
  
  SWIG_check_num_args("rl3964R::state",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rl3964R::state",1,"rl3964R *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rl3964R,0))){
    SWIG_fail_ptr("rl3964R_state_get",1,SWIGTYPE_p_rl3964R);
  }
  
  result = (int) ((arg1)->state);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rl3964R_priority_set(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *arg1 = (rl3964R *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rl3964R::priority",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rl3964R::priority",1,"rl3964R *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rl3964R::priority",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rl3964R,0))){
    SWIG_fail_ptr("rl3964R_priority_set",1,SWIGTYPE_p_rl3964R);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->priority = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rl3964R_priority_get(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *arg1 = (rl3964R *) 0 ;
  int result;
  
  SWIG_check_num_args("rl3964R::priority",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rl3964R::priority",1,"rl3964R *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rl3964R,0))){
    SWIG_fail_ptr("rl3964R_priority_get",1,SWIGTYPE_p_rl3964R);
  }
  
  result = (int) ((arg1)->priority);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rl3964R_run_set(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *arg1 = (rl3964R *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rl3964R::run",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rl3964R::run",1,"rl3964R *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rl3964R::run",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rl3964R,0))){
    SWIG_fail_ptr("rl3964R_run_set",1,SWIGTYPE_p_rl3964R);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->run = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rl3964R_run_get(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *arg1 = (rl3964R *) 0 ;
  int result;
  
  SWIG_check_num_args("rl3964R::run",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rl3964R::run",1,"rl3964R *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rl3964R,0))){
    SWIG_fail_ptr("rl3964R_run_get",1,SWIGTYPE_p_rl3964R);
  }
  
  result = (int) ((arg1)->run);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rl3964R_debug_set(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *arg1 = (rl3964R *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rl3964R::debug",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rl3964R::debug",1,"rl3964R *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rl3964R::debug",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rl3964R,0))){
    SWIG_fail_ptr("rl3964R_debug_set",1,SWIGTYPE_p_rl3964R);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->debug = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rl3964R_debug_get(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *arg1 = (rl3964R *) 0 ;
  int result;
  
  SWIG_check_num_args("rl3964R::debug",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rl3964R::debug",1,"rl3964R *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rl3964R,0))){
    SWIG_fail_ptr("rl3964R_debug_get",1,SWIGTYPE_p_rl3964R);
  }
  
  result = (int) ((arg1)->debug);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rl3964R_dprintf(lua_State* L) {
  int SWIG_arg = 0;
  rl3964R *arg1 = (rl3964R *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  int result;
  
  SWIG_check_num_args("rl3964R::dprintf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rl3964R::dprintf",1,"rl3964R *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rl3964R::dprintf",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rl3964R,0))){
    SWIG_fail_ptr("rl3964R_dprintf",1,SWIGTYPE_p_rl3964R);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->dprintf((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rl3964R(void *obj) {
rl3964R *arg1 = (rl3964R *) obj;
delete arg1;
}
static int _proxy__wrap_new_rl3964R(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rl3964R);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rl3964R_attributes[] = {
    { "receiver", _wrap_rl3964R_receiver_get, _wrap_rl3964R_receiver_set },
    { "tty", _wrap_rl3964R_tty_get, _wrap_rl3964R_tty_set },
    { "state", _wrap_rl3964R_state_get, _wrap_rl3964R_state_set },
    { "priority", _wrap_rl3964R_priority_get, _wrap_rl3964R_priority_set },
    { "run", _wrap_rl3964R_run_get, _wrap_rl3964R_run_set },
    { "debug", _wrap_rl3964R_debug_get, _wrap_rl3964R_debug_set },
    {0,0,0}
};
static swig_lua_method swig_rl3964R_methods[]= {
    { "open", _wrap_rl3964R_open},
    { "close", _wrap_rl3964R_close},
    { "setReadCallback", _wrap_rl3964R_setReadCallback},
    { "write", _wrap_rl3964R_write},
    { "send", _wrap_rl3964R_send},
    { "receive", _wrap_rl3964R_receive},
    { "dprintf", _wrap_rl3964R_dprintf},
    {0,0}
};
static swig_lua_method swig_rl3964R_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rl3964R_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rl3964R_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("highPriority", rl3964R::highPriority)},
    {SWIG_LUA_CONSTTAB_INT("lowPriority", rl3964R::lowPriority)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rl3964R_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rl3964R_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rl3964R_Sf_SwigStatic = {
    "rl3964R",
    swig_rl3964R_Sf_SwigStatic_methods,
    swig_rl3964R_Sf_SwigStatic_attributes,
    swig_rl3964R_Sf_SwigStatic_constants,
    swig_rl3964R_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rl3964R_bases[] = {0};
static const char *swig_rl3964R_base_names[] = {0};
static swig_lua_class _wrap_class_rl3964R = { "rl3964R", "rl3964R", &SWIGTYPE_p_rl3964R,_proxy__wrap_new_rl3964R, swig_delete_rl3964R, swig_rl3964R_methods, swig_rl3964R_attributes, &swig_rl3964R_Sf_SwigStatic, swig_rl3964R_meta, swig_rl3964R_bases, swig_rl3964R_base_names };

static int _wrap_new_rlCommandlineInterface(lua_State* L) {
  int SWIG_arg = 0;
  rlCommandlineInterface *result = 0 ;
  
  SWIG_check_num_args("rlCommandlineInterface::rlCommandlineInterface",0,0)
  result = (rlCommandlineInterface *)new rlCommandlineInterface();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlCommandlineInterface,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlCommandlineInterface_start__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlCommandlineInterface *arg1 = (rlCommandlineInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlCommandlineInterface::start",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlCommandlineInterface::start",1,"rlCommandlineInterface *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlCommandlineInterface::start",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlCommandlineInterface::start",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlCommandlineInterface,0))){
    SWIG_fail_ptr("rlCommandlineInterface_start",1,SWIGTYPE_p_rlCommandlineInterface);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->start((char const *)arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlCommandlineInterface_start__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlCommandlineInterface *arg1 = (rlCommandlineInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlCommandlineInterface::start",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlCommandlineInterface::start",1,"rlCommandlineInterface *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlCommandlineInterface::start",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlCommandlineInterface,0))){
    SWIG_fail_ptr("rlCommandlineInterface_start",1,SWIGTYPE_p_rlCommandlineInterface);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->start((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlCommandlineInterface_start__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  rlCommandlineInterface *arg1 = (rlCommandlineInterface *) 0 ;
  rlSerial *arg2 = (rlSerial *) 0 ;
  int result;
  
  SWIG_check_num_args("rlCommandlineInterface::start",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlCommandlineInterface::start",1,"rlCommandlineInterface *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlCommandlineInterface::start",2,"rlSerial *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlCommandlineInterface,0))){
    SWIG_fail_ptr("rlCommandlineInterface_start",1,SWIGTYPE_p_rlCommandlineInterface);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rlCommandlineInterface_start",2,SWIGTYPE_p_rlSerial);
  }
  
  result = (int)(arg1)->start(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlCommandlineInterface_start(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlCommandlineInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_rlSerial, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_rlCommandlineInterface_start__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlCommandlineInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_rlCommandlineInterface_start__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlCommandlineInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_rlCommandlineInterface_start__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlCommandlineInterface_start'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlCommandlineInterface::start(char const *,char const *)\n"
    "    rlCommandlineInterface::start(char const *)\n"
    "    rlCommandlineInterface::start(rlSerial *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlCommandlineInterface_readLine__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlCommandlineInterface *arg1 = (rlCommandlineInterface *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlCommandlineInterface::readLine",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlCommandlineInterface::readLine",1,"rlCommandlineInterface *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlCommandlineInterface::readLine",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlCommandlineInterface,0))){
    SWIG_fail_ptr("rlCommandlineInterface_readLine",1,SWIGTYPE_p_rlCommandlineInterface);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(arg1)->readLine(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlCommandlineInterface_readLine__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlCommandlineInterface *arg1 = (rlCommandlineInterface *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlCommandlineInterface::readLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlCommandlineInterface::readLine",1,"rlCommandlineInterface *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlCommandlineInterface,0))){
    SWIG_fail_ptr("rlCommandlineInterface_readLine",1,SWIGTYPE_p_rlCommandlineInterface);
  }
  
  result = (char *)(arg1)->readLine();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlCommandlineInterface_readLine(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlCommandlineInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rlCommandlineInterface_readLine__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlCommandlineInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_rlCommandlineInterface_readLine__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlCommandlineInterface_readLine'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlCommandlineInterface::readLine(int)\n"
    "    rlCommandlineInterface::readLine()\n");
  lua_error(L);return 0;
}


static int _wrap_rlCommandlineInterface_readBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlCommandlineInterface *arg1 = (rlCommandlineInterface *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlCommandlineInterface::readBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlCommandlineInterface::readBlock",1,"rlCommandlineInterface *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlCommandlineInterface::readBlock",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlCommandlineInterface::readBlock",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlCommandlineInterface::readBlock",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlCommandlineInterface,0))){
    SWIG_fail_ptr("rlCommandlineInterface_readBlock",1,SWIGTYPE_p_rlCommandlineInterface);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlCommandlineInterface_readBlock");
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->readBlock(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlCommandlineInterface_readBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlCommandlineInterface *arg1 = (rlCommandlineInterface *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlCommandlineInterface::readBlock",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlCommandlineInterface::readBlock",1,"rlCommandlineInterface *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlCommandlineInterface::readBlock",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlCommandlineInterface::readBlock",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlCommandlineInterface,0))){
    SWIG_fail_ptr("rlCommandlineInterface_readBlock",1,SWIGTYPE_p_rlCommandlineInterface);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlCommandlineInterface_readBlock");
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->readBlock(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlCommandlineInterface_readBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlCommandlineInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_rlCommandlineInterface_readBlock__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlCommandlineInterface, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_rlCommandlineInterface_readBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlCommandlineInterface_readBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlCommandlineInterface::readBlock(void *,int,int)\n"
    "    rlCommandlineInterface::readBlock(void *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_rlCommandlineInterface_printf(lua_State* L) {
  int SWIG_arg = 0;
  rlCommandlineInterface *arg1 = (rlCommandlineInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  int result;
  
  SWIG_check_num_args("rlCommandlineInterface::printf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlCommandlineInterface::printf",1,"rlCommandlineInterface *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlCommandlineInterface::printf",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlCommandlineInterface,0))){
    SWIG_fail_ptr("rlCommandlineInterface_printf",1,SWIGTYPE_p_rlCommandlineInterface);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->printf((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlCommandlineInterface_writeBlock(lua_State* L) {
  int SWIG_arg = 0;
  rlCommandlineInterface *arg1 = (rlCommandlineInterface *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlCommandlineInterface::writeBlock",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlCommandlineInterface::writeBlock",1,"rlCommandlineInterface *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlCommandlineInterface::writeBlock",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlCommandlineInterface::writeBlock",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlCommandlineInterface,0))){
    SWIG_fail_ptr("rlCommandlineInterface_writeBlock",1,SWIGTYPE_p_rlCommandlineInterface);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlCommandlineInterface_writeBlock");
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->writeBlock(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlCommandlineInterface(void *obj) {
rlCommandlineInterface *arg1 = (rlCommandlineInterface *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlCommandlineInterface(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlCommandlineInterface);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlCommandlineInterface_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rlCommandlineInterface_methods[]= {
    { "start", _wrap_rlCommandlineInterface_start},
    { "readLine", _wrap_rlCommandlineInterface_readLine},
    { "readBlock", _wrap_rlCommandlineInterface_readBlock},
    { "printf", _wrap_rlCommandlineInterface_printf},
    { "writeBlock", _wrap_rlCommandlineInterface_writeBlock},
    {0,0}
};
static swig_lua_method swig_rlCommandlineInterface_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlCommandlineInterface_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlCommandlineInterface_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlCommandlineInterface_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlCommandlineInterface_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlCommandlineInterface_Sf_SwigStatic = {
    "rlCommandlineInterface",
    swig_rlCommandlineInterface_Sf_SwigStatic_methods,
    swig_rlCommandlineInterface_Sf_SwigStatic_attributes,
    swig_rlCommandlineInterface_Sf_SwigStatic_constants,
    swig_rlCommandlineInterface_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlCommandlineInterface_bases[] = {0};
static const char *swig_rlCommandlineInterface_base_names[] = {0};
static swig_lua_class _wrap_class_rlCommandlineInterface = { "rlCommandlineInterface", "rlCommandlineInterface", &SWIGTYPE_p_rlCommandlineInterface,_proxy__wrap_new_rlCommandlineInterface, swig_delete_rlCommandlineInterface, swig_rlCommandlineInterface_methods, swig_rlCommandlineInterface_attributes, &swig_rlCommandlineInterface_Sf_SwigStatic, swig_rlCommandlineInterface_meta, swig_rlCommandlineInterface_bases, swig_rlCommandlineInterface_base_names };

static int _wrap_rlSetDebugPrintf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("rlSetDebugPrintf",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlSetDebugPrintf",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)rlSetDebugPrintf(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDebugPrintf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("rlDebugPrintf",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlDebugPrintf",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (int)rlDebugPrintf((char const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlInputAvailable(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("rlInputAvailable",0,0)
  result = (int)rlInputAvailable();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlLastLinePrintf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("rlLastLinePrintf",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlLastLinePrintf",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (int)rlLastLinePrintf((char const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlpass(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlpass",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlpass",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (char *)rlpass((char const *)arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlstrncpy(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlstrncpy",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlstrncpy",1,"char *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlstrncpy",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlstrncpy",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (char *)rlstrncpy(arg1,(char const *)arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlstrlinecpy(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlstrlinecpy",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlstrlinecpy",1,"char *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlstrlinecpy",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlstrlinecpy",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (char *)rlstrlinecpy(arg1,(char const *)arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlsnprintf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  int result;
  
  SWIG_check_num_args("rlsnprintf",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlsnprintf",1,"char *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlsnprintf",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlsnprintf",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)rlsnprintf(arg1,arg2,(char const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSetSigtermHandler(lua_State* L) {
  int SWIG_arg = 0;
  void (*arg1)(void *) = (void (*)(void *)) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("rlSetSigtermHandler",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSetSigtermHandler",1,"void (*)(void *)");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSetSigtermHandler",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_f_p_void__void,0))){
    SWIG_fail_ptr("rlSetSigtermHandler",1,SWIGTYPE_p_f_p_void__void);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlSetSigtermHandler");
  rlSetSigtermHandler(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlFindFile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlFindFile",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlFindFile",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlFindFile",2,"int *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlFindFile",2,SWIGTYPE_p_int);
  }
  
  result = (char *)rlFindFile((char const *)arg1,arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlGetInifile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlGetInifile",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlGetInifile",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (char *)rlGetInifile((char const *)arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSwapShort(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("rlSwapShort",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlSwapShort",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)rlSwapShort(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlEib1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("rlEib1",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlEib1",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)rlEib1(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlEib2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("rlEib2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlEib2",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)rlEib2(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlLon1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("rlLon1",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlLon1",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)rlLon1(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlLon2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("rlLon2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlLon2",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)rlLon2(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlProfibus1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("rlProfibus1",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlProfibus1",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)rlProfibus1(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlProfibus2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("rlProfibus2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlProfibus2",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)rlProfibus2(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlCan1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("rlCan1",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlCan1",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)rlCan1(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlCan2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("rlCan2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlCan2",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)rlCan2(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlBrowser(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlBrowser",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlBrowser",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (int)rlBrowser((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlsystem(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlsystem",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlsystem",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (int)rlsystem((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSubmitPvserver__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSubmitPvserver",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlSubmitPvserver",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSubmitPvserver",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlSubmitPvserver",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("rlSubmitPvserver",4,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (int)rlSubmitPvserver((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSubmitPvserver__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSubmitPvserver",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlSubmitPvserver",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSubmitPvserver",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlSubmitPvserver",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)rlSubmitPvserver((char const *)arg1,(char const *)arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSubmitPvserver(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_rlSubmitPvserver__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_rlSubmitPvserver__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlSubmitPvserver'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSubmitPvserver(char const *,char const *,char const *,char const *)\n"
    "    rlSubmitPvserver(char const *,char const *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlOption(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlOption",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlOption",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlOption",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)rlOption((char const *)arg1,(char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIntOption(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlIntOption",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlIntOption",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlIntOption",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlIntOption",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)rlIntOption((char const *)arg1,(char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlFloatOption(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("rlFloatOption",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlFloatOption",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlFloatOption",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlFloatOption",3,"float");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)rlFloatOption((char const *)arg1,(char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlTextOption(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlTextOption",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlTextOption",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlTextOption",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlTextOption",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (char *)rlTextOption((char const *)arg1,(char const *)arg2,(char const *)arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlCopyTextfile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlCopyTextfile",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlCopyTextfile",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlCopyTextfile",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)rlCopyTextfile((char const *)arg1,(char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlupper(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlupper",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlupper",1,"char *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (int)rlupper(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rllower(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rllower",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rllower",1,"char *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (int)rllower(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlStartsWith(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlStartsWith",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlStartsWith",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlStartsWith",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)rlStartsWith((char const *)arg1,(char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlEndsWith(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlEndsWith",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlEndsWith",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlEndsWith",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)rlEndsWith((char const *)arg1,(char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlStrMatch(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlStrMatch",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlStrMatch",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlStrMatch",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)rlStrMatch((char const *)arg1,(char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlFRead(lua_State* L) {
  int SWIG_arg = 0;
  FILE *arg1 = (FILE *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlFRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlFRead",1,"FILE *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlFRead",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlFRead",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("rlFRead",1,SWIGTYPE_p_FILE);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlFRead");
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)rlFRead(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlFWrite(lua_State* L) {
  int SWIG_arg = 0;
  FILE *arg1 = (FILE *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlFWrite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlFWrite",1,"FILE *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlFWrite",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlFWrite",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("rlFWrite",1,SWIGTYPE_p_FILE);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlFWrite");
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)rlFWrite(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlWriteFile(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlWriteFile",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlWriteFile",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlWriteFile",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlWriteFile",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlWriteFile");
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)rlWriteFile((char const *)arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlMkdir__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlMkdir",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlMkdir",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlMkdir",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)rlMkdir((char const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlMkdir__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlMkdir",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlMkdir",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (int)rlMkdir((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlMkdir(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_rlMkdir__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_rlMkdir__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlMkdir'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlMkdir(char const *,int)\n"
    "    rlMkdir(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlBitSet(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int result;
  
  SWIG_check_num_args("rlBitSet",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlBitSet",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlBitSet",2,"int *");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlBitSet",2,SWIGTYPE_p_int);
  }
  
  result = (int)rlBitSet(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlBitClear(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int result;
  
  SWIG_check_num_args("rlBitClear",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlBitClear",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlBitClear",2,"int *");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlBitClear",2,SWIGTYPE_p_int);
  }
  
  result = (int)rlBitClear(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlBitChange(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int result;
  
  SWIG_check_num_args("rlBitChange",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlBitChange",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlBitChange",2,"int *");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlBitChange",2,SWIGTYPE_p_int);
  }
  
  result = (int)rlBitChange(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlBitTest(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int result;
  
  SWIG_check_num_args("rlBitTest",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlBitTest",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlBitTest",2,"int *");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlBitTest",2,SWIGTYPE_p_int);
  }
  
  result = (int)rlBitTest(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPushToDoubleBuffer(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("rlPushToDoubleBuffer",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlPushToDoubleBuffer",1,"double");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlPushToDoubleBuffer",2,"double *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlPushToDoubleBuffer",3,"int");
  arg1 = (double)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("rlPushToDoubleBuffer",2,SWIGTYPE_p_double);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  rlPushToDoubleBuffer(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPushToFloatBuffer(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("rlPushToFloatBuffer",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlPushToFloatBuffer",1,"float");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlPushToFloatBuffer",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlPushToFloatBuffer",3,"int");
  arg1 = (float)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("rlPushToFloatBuffer",2,SWIGTYPE_p_float);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  rlPushToFloatBuffer(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlDataAcquisition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  rlDataAcquisition *result = 0 ;
  
  SWIG_check_num_args("rlDataAcquisition::rlDataAcquisition",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlDataAcquisition::rlDataAcquisition",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlDataAcquisition::rlDataAcquisition",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataAcquisition::rlDataAcquisition",3,"long");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (long)lua_tonumber(L, 3);
  result = (rlDataAcquisition *)new rlDataAcquisition((char const *)arg1,(char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlDataAcquisition,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlDataAcquisition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  rlDataAcquisition *result = 0 ;
  
  SWIG_check_num_args("rlDataAcquisition::rlDataAcquisition",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlDataAcquisition::rlDataAcquisition",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlDataAcquisition::rlDataAcquisition",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (rlDataAcquisition *)new rlDataAcquisition((char const *)arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlDataAcquisition,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlDataAcquisition__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  rlDataAcquisition *result = 0 ;
  
  SWIG_check_num_args("rlDataAcquisition::rlDataAcquisition",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlDataAcquisition::rlDataAcquisition",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (rlDataAcquisition *)new rlDataAcquisition((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlDataAcquisition,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlDataAcquisition__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisition *result = 0 ;
  
  SWIG_check_num_args("rlDataAcquisition::rlDataAcquisition",0,0)
  result = (rlDataAcquisition *)new rlDataAcquisition();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlDataAcquisition,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlDataAcquisition(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_rlDataAcquisition__SWIG_3(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_rlDataAcquisition__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_rlDataAcquisition__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_rlDataAcquisition__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlDataAcquisition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlDataAcquisition::rlDataAcquisition(char const *,char const *,long)\n"
    "    rlDataAcquisition::rlDataAcquisition(char const *,char const *)\n"
    "    rlDataAcquisition::rlDataAcquisition(char const *)\n"
    "    rlDataAcquisition::rlDataAcquisition()\n");
  lua_error(L);return 0;
}


static int _wrap_rlDataAcquisition_stringValue(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisition *arg1 = (rlDataAcquisition *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlDataAcquisition::stringValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisition::stringValue",1,"rlDataAcquisition *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlDataAcquisition::stringValue",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisition,0))){
    SWIG_fail_ptr("rlDataAcquisition_stringValue",1,SWIGTYPE_p_rlDataAcquisition);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (char *)(arg1)->stringValue((char const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisition_intValue(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisition *arg1 = (rlDataAcquisition *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisition::intValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisition::intValue",1,"rlDataAcquisition *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlDataAcquisition::intValue",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisition,0))){
    SWIG_fail_ptr("rlDataAcquisition_intValue",1,SWIGTYPE_p_rlDataAcquisition);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->intValue((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisition_floatValue(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisition *arg1 = (rlDataAcquisition *) 0 ;
  char *arg2 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("rlDataAcquisition::floatValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisition::floatValue",1,"rlDataAcquisition *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlDataAcquisition::floatValue",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisition,0))){
    SWIG_fail_ptr("rlDataAcquisition_floatValue",1,SWIGTYPE_p_rlDataAcquisition);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (float)(arg1)->floatValue((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisition_writeStringValue(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisition *arg1 = (rlDataAcquisition *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisition::writeStringValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisition::writeStringValue",1,"rlDataAcquisition *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlDataAcquisition::writeStringValue",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlDataAcquisition::writeStringValue",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisition,0))){
    SWIG_fail_ptr("rlDataAcquisition_writeStringValue",1,SWIGTYPE_p_rlDataAcquisition);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->writeStringValue((char const *)arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisition_writeIntValue(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisition *arg1 = (rlDataAcquisition *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisition::writeIntValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisition::writeIntValue",1,"rlDataAcquisition *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlDataAcquisition::writeIntValue",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataAcquisition::writeIntValue",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisition,0))){
    SWIG_fail_ptr("rlDataAcquisition_writeIntValue",1,SWIGTYPE_p_rlDataAcquisition);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->writeIntValue((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisition_writeFloatValue(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisition *arg1 = (rlDataAcquisition *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisition::writeFloatValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisition::writeFloatValue",1,"rlDataAcquisition *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlDataAcquisition::writeFloatValue",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataAcquisition::writeFloatValue",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisition,0))){
    SWIG_fail_ptr("rlDataAcquisition_writeFloatValue",1,SWIGTYPE_p_rlDataAcquisition);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)(arg1)->writeFloatValue((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisition_readErrorCount(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisition *arg1 = (rlDataAcquisition *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisition::readErrorCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisition::readErrorCount",1,"rlDataAcquisition *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisition,0))){
    SWIG_fail_ptr("rlDataAcquisition_readErrorCount",1,SWIGTYPE_p_rlDataAcquisition);
  }
  
  result = (int)(arg1)->readErrorCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisition_writeErrorCount(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisition *arg1 = (rlDataAcquisition *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisition::writeErrorCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisition::writeErrorCount",1,"rlDataAcquisition *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisition,0))){
    SWIG_fail_ptr("rlDataAcquisition_writeErrorCount",1,SWIGTYPE_p_rlDataAcquisition);
  }
  
  result = (int)(arg1)->writeErrorCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisition_lifeCounter(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisition *arg1 = (rlDataAcquisition *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisition::lifeCounter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisition::lifeCounter",1,"rlDataAcquisition *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisition,0))){
    SWIG_fail_ptr("rlDataAcquisition_lifeCounter",1,SWIGTYPE_p_rlDataAcquisition);
  }
  
  result = (int)(arg1)->lifeCounter();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisition_firstVariable(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisition *arg1 = (rlDataAcquisition *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlDataAcquisition::firstVariable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisition::firstVariable",1,"rlDataAcquisition *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisition,0))){
    SWIG_fail_ptr("rlDataAcquisition_firstVariable",1,SWIGTYPE_p_rlDataAcquisition);
  }
  
  result = (char *)(arg1)->firstVariable();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisition_nextVariable(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisition *arg1 = (rlDataAcquisition *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlDataAcquisition::nextVariable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisition::nextVariable",1,"rlDataAcquisition *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisition,0))){
    SWIG_fail_ptr("rlDataAcquisition_nextVariable",1,SWIGTYPE_p_rlDataAcquisition);
  }
  
  result = (char *)(arg1)->nextVariable();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisition_shmStatus(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisition *arg1 = (rlDataAcquisition *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisition::shmStatus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisition::shmStatus",1,"rlDataAcquisition *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisition,0))){
    SWIG_fail_ptr("rlDataAcquisition_shmStatus",1,SWIGTYPE_p_rlDataAcquisition);
  }
  
  result = (int)(arg1)->shmStatus();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisition_shmKey(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisition *arg1 = (rlDataAcquisition *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisition::shmKey",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisition::shmKey",1,"rlDataAcquisition *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisition,0))){
    SWIG_fail_ptr("rlDataAcquisition_shmKey",1,SWIGTYPE_p_rlDataAcquisition);
  }
  
  result = (int)(arg1)->shmKey();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisition_shmId(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisition *arg1 = (rlDataAcquisition *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisition::shmId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisition::shmId",1,"rlDataAcquisition *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisition,0))){
    SWIG_fail_ptr("rlDataAcquisition_shmId",1,SWIGTYPE_p_rlDataAcquisition);
  }
  
  result = (int)(arg1)->shmId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlDataAcquisition(void *obj) {
rlDataAcquisition *arg1 = (rlDataAcquisition *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlDataAcquisition(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlDataAcquisition);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlDataAcquisition_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rlDataAcquisition_methods[]= {
    { "stringValue", _wrap_rlDataAcquisition_stringValue},
    { "intValue", _wrap_rlDataAcquisition_intValue},
    { "floatValue", _wrap_rlDataAcquisition_floatValue},
    { "writeStringValue", _wrap_rlDataAcquisition_writeStringValue},
    { "writeIntValue", _wrap_rlDataAcquisition_writeIntValue},
    { "writeFloatValue", _wrap_rlDataAcquisition_writeFloatValue},
    { "readErrorCount", _wrap_rlDataAcquisition_readErrorCount},
    { "writeErrorCount", _wrap_rlDataAcquisition_writeErrorCount},
    { "lifeCounter", _wrap_rlDataAcquisition_lifeCounter},
    { "firstVariable", _wrap_rlDataAcquisition_firstVariable},
    { "nextVariable", _wrap_rlDataAcquisition_nextVariable},
    { "shmStatus", _wrap_rlDataAcquisition_shmStatus},
    { "shmKey", _wrap_rlDataAcquisition_shmKey},
    { "shmId", _wrap_rlDataAcquisition_shmId},
    {0,0}
};
static swig_lua_method swig_rlDataAcquisition_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlDataAcquisition_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlDataAcquisition_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("DAQ_ERROR", rlDataAcquisition::DAQ_ERROR)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlDataAcquisition_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlDataAcquisition_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlDataAcquisition_Sf_SwigStatic = {
    "rlDataAcquisition",
    swig_rlDataAcquisition_Sf_SwigStatic_methods,
    swig_rlDataAcquisition_Sf_SwigStatic_attributes,
    swig_rlDataAcquisition_Sf_SwigStatic_constants,
    swig_rlDataAcquisition_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlDataAcquisition_bases[] = {0};
static const char *swig_rlDataAcquisition_base_names[] = {0};
static swig_lua_class _wrap_class_rlDataAcquisition = { "rlDataAcquisition", "rlDataAcquisition", &SWIGTYPE_p_rlDataAcquisition,_proxy__wrap_new_rlDataAcquisition, swig_delete_rlDataAcquisition, swig_rlDataAcquisition_methods, swig_rlDataAcquisition_attributes, &swig_rlDataAcquisition_Sf_SwigStatic, swig_rlDataAcquisition_meta, swig_rlDataAcquisition_bases, swig_rlDataAcquisition_base_names };

static int _wrap_new_rlDataAcquisitionProvider__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  rlDataAcquisitionProvider *result = 0 ;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::rlDataAcquisitionProvider",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlDataAcquisitionProvider::rlDataAcquisitionProvider",1,"int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlDataAcquisitionProvider::rlDataAcquisitionProvider",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataAcquisitionProvider::rlDataAcquisitionProvider",3,"long");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (long)lua_tonumber(L, 3);
  result = (rlDataAcquisitionProvider *)new rlDataAcquisitionProvider(arg1,(char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlDataAcquisitionProvider,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlDataAcquisitionProvider__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  rlDataAcquisitionProvider *result = 0 ;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::rlDataAcquisitionProvider",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlDataAcquisitionProvider::rlDataAcquisitionProvider",1,"int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlDataAcquisitionProvider::rlDataAcquisitionProvider",2,"char const *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (rlDataAcquisitionProvider *)new rlDataAcquisitionProvider(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlDataAcquisitionProvider,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlDataAcquisitionProvider__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  rlDataAcquisitionProvider *result = 0 ;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::rlDataAcquisitionProvider",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlDataAcquisitionProvider::rlDataAcquisitionProvider",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (rlDataAcquisitionProvider *)new rlDataAcquisitionProvider(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlDataAcquisitionProvider,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlDataAcquisitionProvider__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisitionProvider *result = 0 ;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::rlDataAcquisitionProvider",0,0)
  result = (rlDataAcquisitionProvider *)new rlDataAcquisitionProvider();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlDataAcquisitionProvider,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlDataAcquisitionProvider(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_rlDataAcquisitionProvider__SWIG_3(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_rlDataAcquisitionProvider__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_rlDataAcquisitionProvider__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_rlDataAcquisitionProvider__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlDataAcquisitionProvider'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlDataAcquisitionProvider::rlDataAcquisitionProvider(int,char const *,long)\n"
    "    rlDataAcquisitionProvider::rlDataAcquisitionProvider(int,char const *)\n"
    "    rlDataAcquisitionProvider::rlDataAcquisitionProvider(int)\n"
    "    rlDataAcquisitionProvider::rlDataAcquisitionProvider()\n");
  lua_error(L);return 0;
}


static int _wrap_rlDataAcquisitionProvider_readItemList(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisitionProvider *arg1 = (rlDataAcquisitionProvider *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::readItemList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisitionProvider::readItemList",1,"rlDataAcquisitionProvider *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlDataAcquisitionProvider::readItemList",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisitionProvider,0))){
    SWIG_fail_ptr("rlDataAcquisitionProvider_readItemList",1,SWIGTYPE_p_rlDataAcquisitionProvider);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->readItemList((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisitionProvider_firstItem(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisitionProvider *arg1 = (rlDataAcquisitionProvider *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::firstItem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisitionProvider::firstItem",1,"rlDataAcquisitionProvider *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisitionProvider,0))){
    SWIG_fail_ptr("rlDataAcquisitionProvider_firstItem",1,SWIGTYPE_p_rlDataAcquisitionProvider);
  }
  
  result = (char *)(arg1)->firstItem();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisitionProvider_nextItem(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisitionProvider *arg1 = (rlDataAcquisitionProvider *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::nextItem",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisitionProvider::nextItem",1,"rlDataAcquisitionProvider *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisitionProvider,0))){
    SWIG_fail_ptr("rlDataAcquisitionProvider_nextItem",1,SWIGTYPE_p_rlDataAcquisitionProvider);
  }
  
  result = (char *)(arg1)->nextItem();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisitionProvider_stringValue(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisitionProvider *arg1 = (rlDataAcquisitionProvider *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::stringValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisitionProvider::stringValue",1,"rlDataAcquisitionProvider *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlDataAcquisitionProvider::stringValue",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisitionProvider,0))){
    SWIG_fail_ptr("rlDataAcquisitionProvider_stringValue",1,SWIGTYPE_p_rlDataAcquisitionProvider);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (char *)(arg1)->stringValue((char const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisitionProvider_intValue(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisitionProvider *arg1 = (rlDataAcquisitionProvider *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::intValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisitionProvider::intValue",1,"rlDataAcquisitionProvider *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlDataAcquisitionProvider::intValue",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisitionProvider,0))){
    SWIG_fail_ptr("rlDataAcquisitionProvider_intValue",1,SWIGTYPE_p_rlDataAcquisitionProvider);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->intValue((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisitionProvider_floatValue(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisitionProvider *arg1 = (rlDataAcquisitionProvider *) 0 ;
  char *arg2 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::floatValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisitionProvider::floatValue",1,"rlDataAcquisitionProvider *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlDataAcquisitionProvider::floatValue",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisitionProvider,0))){
    SWIG_fail_ptr("rlDataAcquisitionProvider_floatValue",1,SWIGTYPE_p_rlDataAcquisitionProvider);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (float)(arg1)->floatValue((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisitionProvider_setStringValue(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisitionProvider *arg1 = (rlDataAcquisitionProvider *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::setStringValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisitionProvider::setStringValue",1,"rlDataAcquisitionProvider *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlDataAcquisitionProvider::setStringValue",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlDataAcquisitionProvider::setStringValue",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisitionProvider,0))){
    SWIG_fail_ptr("rlDataAcquisitionProvider_setStringValue",1,SWIGTYPE_p_rlDataAcquisitionProvider);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->setStringValue((char const *)arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisitionProvider_setIntValue(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisitionProvider *arg1 = (rlDataAcquisitionProvider *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::setIntValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisitionProvider::setIntValue",1,"rlDataAcquisitionProvider *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlDataAcquisitionProvider::setIntValue",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataAcquisitionProvider::setIntValue",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisitionProvider,0))){
    SWIG_fail_ptr("rlDataAcquisitionProvider_setIntValue",1,SWIGTYPE_p_rlDataAcquisitionProvider);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->setIntValue((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisitionProvider_setFloatValue(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisitionProvider *arg1 = (rlDataAcquisitionProvider *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::setFloatValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisitionProvider::setFloatValue",1,"rlDataAcquisitionProvider *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlDataAcquisitionProvider::setFloatValue",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataAcquisitionProvider::setFloatValue",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisitionProvider,0))){
    SWIG_fail_ptr("rlDataAcquisitionProvider_setFloatValue",1,SWIGTYPE_p_rlDataAcquisitionProvider);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)(arg1)->setFloatValue((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisitionProvider_readErrorCount(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisitionProvider *arg1 = (rlDataAcquisitionProvider *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::readErrorCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisitionProvider::readErrorCount",1,"rlDataAcquisitionProvider *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisitionProvider,0))){
    SWIG_fail_ptr("rlDataAcquisitionProvider_readErrorCount",1,SWIGTYPE_p_rlDataAcquisitionProvider);
  }
  
  result = (int)(arg1)->readErrorCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisitionProvider_writeErrorCount(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisitionProvider *arg1 = (rlDataAcquisitionProvider *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::writeErrorCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisitionProvider::writeErrorCount",1,"rlDataAcquisitionProvider *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisitionProvider,0))){
    SWIG_fail_ptr("rlDataAcquisitionProvider_writeErrorCount",1,SWIGTYPE_p_rlDataAcquisitionProvider);
  }
  
  result = (int)(arg1)->writeErrorCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisitionProvider_lifeCounter(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisitionProvider *arg1 = (rlDataAcquisitionProvider *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::lifeCounter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisitionProvider::lifeCounter",1,"rlDataAcquisitionProvider *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisitionProvider,0))){
    SWIG_fail_ptr("rlDataAcquisitionProvider_lifeCounter",1,SWIGTYPE_p_rlDataAcquisitionProvider);
  }
  
  result = (int)(arg1)->lifeCounter();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisitionProvider_setReadErrorCount(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisitionProvider *arg1 = (rlDataAcquisitionProvider *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::setReadErrorCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisitionProvider::setReadErrorCount",1,"rlDataAcquisitionProvider *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlDataAcquisitionProvider::setReadErrorCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisitionProvider,0))){
    SWIG_fail_ptr("rlDataAcquisitionProvider_setReadErrorCount",1,SWIGTYPE_p_rlDataAcquisitionProvider);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->setReadErrorCount(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisitionProvider_setWriteErrorCount(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisitionProvider *arg1 = (rlDataAcquisitionProvider *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::setWriteErrorCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisitionProvider::setWriteErrorCount",1,"rlDataAcquisitionProvider *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlDataAcquisitionProvider::setWriteErrorCount",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisitionProvider,0))){
    SWIG_fail_ptr("rlDataAcquisitionProvider_setWriteErrorCount",1,SWIGTYPE_p_rlDataAcquisitionProvider);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->setWriteErrorCount(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisitionProvider_setLifeCounter(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisitionProvider *arg1 = (rlDataAcquisitionProvider *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::setLifeCounter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisitionProvider::setLifeCounter",1,"rlDataAcquisitionProvider *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlDataAcquisitionProvider::setLifeCounter",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisitionProvider,0))){
    SWIG_fail_ptr("rlDataAcquisitionProvider_setLifeCounter",1,SWIGTYPE_p_rlDataAcquisitionProvider);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->setLifeCounter(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisitionProvider_shmStatus(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisitionProvider *arg1 = (rlDataAcquisitionProvider *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::shmStatus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisitionProvider::shmStatus",1,"rlDataAcquisitionProvider *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisitionProvider,0))){
    SWIG_fail_ptr("rlDataAcquisitionProvider_shmStatus",1,SWIGTYPE_p_rlDataAcquisitionProvider);
  }
  
  result = (int)(arg1)->shmStatus();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataAcquisitionProvider_setAllowAddValues(lua_State* L) {
  int SWIG_arg = 0;
  rlDataAcquisitionProvider *arg1 = (rlDataAcquisitionProvider *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlDataAcquisitionProvider::setAllowAddValues",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataAcquisitionProvider::setAllowAddValues",1,"rlDataAcquisitionProvider *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlDataAcquisitionProvider::setAllowAddValues",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataAcquisitionProvider::setAllowAddValues",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataAcquisitionProvider,0))){
    SWIG_fail_ptr("rlDataAcquisitionProvider_setAllowAddValues",1,SWIGTYPE_p_rlDataAcquisitionProvider);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->setAllowAddValues(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlDataAcquisitionProvider(void *obj) {
rlDataAcquisitionProvider *arg1 = (rlDataAcquisitionProvider *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlDataAcquisitionProvider(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlDataAcquisitionProvider);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlDataAcquisitionProvider_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rlDataAcquisitionProvider_methods[]= {
    { "readItemList", _wrap_rlDataAcquisitionProvider_readItemList},
    { "firstItem", _wrap_rlDataAcquisitionProvider_firstItem},
    { "nextItem", _wrap_rlDataAcquisitionProvider_nextItem},
    { "stringValue", _wrap_rlDataAcquisitionProvider_stringValue},
    { "intValue", _wrap_rlDataAcquisitionProvider_intValue},
    { "floatValue", _wrap_rlDataAcquisitionProvider_floatValue},
    { "setStringValue", _wrap_rlDataAcquisitionProvider_setStringValue},
    { "setIntValue", _wrap_rlDataAcquisitionProvider_setIntValue},
    { "setFloatValue", _wrap_rlDataAcquisitionProvider_setFloatValue},
    { "readErrorCount", _wrap_rlDataAcquisitionProvider_readErrorCount},
    { "writeErrorCount", _wrap_rlDataAcquisitionProvider_writeErrorCount},
    { "lifeCounter", _wrap_rlDataAcquisitionProvider_lifeCounter},
    { "setReadErrorCount", _wrap_rlDataAcquisitionProvider_setReadErrorCount},
    { "setWriteErrorCount", _wrap_rlDataAcquisitionProvider_setWriteErrorCount},
    { "setLifeCounter", _wrap_rlDataAcquisitionProvider_setLifeCounter},
    { "shmStatus", _wrap_rlDataAcquisitionProvider_shmStatus},
    { "setAllowAddValues", _wrap_rlDataAcquisitionProvider_setAllowAddValues},
    {0,0}
};
static swig_lua_method swig_rlDataAcquisitionProvider_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlDataAcquisitionProvider_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlDataAcquisitionProvider_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("DAQ_PROVIDER_ERROR", rlDataAcquisitionProvider::DAQ_PROVIDER_ERROR)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlDataAcquisitionProvider_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlDataAcquisitionProvider_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlDataAcquisitionProvider_Sf_SwigStatic = {
    "rlDataAcquisitionProvider",
    swig_rlDataAcquisitionProvider_Sf_SwigStatic_methods,
    swig_rlDataAcquisitionProvider_Sf_SwigStatic_attributes,
    swig_rlDataAcquisitionProvider_Sf_SwigStatic_constants,
    swig_rlDataAcquisitionProvider_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlDataAcquisitionProvider_bases[] = {0};
static const char *swig_rlDataAcquisitionProvider_base_names[] = {0};
static swig_lua_class _wrap_class_rlDataAcquisitionProvider = { "rlDataAcquisitionProvider", "rlDataAcquisitionProvider", &SWIGTYPE_p_rlDataAcquisitionProvider,_proxy__wrap_new_rlDataAcquisitionProvider, swig_delete_rlDataAcquisitionProvider, swig_rlDataAcquisitionProvider_methods, swig_rlDataAcquisitionProvider_attributes, &swig_rlDataAcquisitionProvider_Sf_SwigStatic, swig_rlDataAcquisitionProvider_meta, swig_rlDataAcquisitionProvider_bases, swig_rlDataAcquisitionProvider_base_names };

static int _wrap_new_rlDataProvider__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  rlDataProvider *result = 0 ;
  
  SWIG_check_num_args("rlDataProvider::rlDataProvider",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlDataProvider::rlDataProvider",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlDataProvider::rlDataProvider",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataProvider::rlDataProvider",3,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (rlDataProvider *)new rlDataProvider(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlDataProvider,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlDataProvider__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  rlDataProvider *result = 0 ;
  
  SWIG_check_num_args("rlDataProvider::rlDataProvider",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlDataProvider::rlDataProvider",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlDataProvider::rlDataProvider",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (rlDataProvider *)new rlDataProvider(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlDataProvider,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlDataProvider__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  rlDataProvider *result = 0 ;
  
  SWIG_check_num_args("rlDataProvider::rlDataProvider",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlDataProvider::rlDataProvider",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (rlDataProvider *)new rlDataProvider(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlDataProvider,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlDataProvider(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_rlDataProvider__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_rlDataProvider__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_rlDataProvider__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlDataProvider'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlDataProvider::rlDataProvider(int,int,int)\n"
    "    rlDataProvider::rlDataProvider(int,int)\n"
    "    rlDataProvider::rlDataProvider(int)\n");
  lua_error(L);return 0;
}


static int _wrap_rlDataProvider_getInt(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProvider *arg1 = (rlDataProvider *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlDataProvider::getInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProvider::getInt",1,"rlDataProvider *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlDataProvider::getInt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProvider,0))){
    SWIG_fail_ptr("rlDataProvider_getInt",1,SWIGTYPE_p_rlDataProvider);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->getInt(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProvider_getFloat(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProvider *arg1 = (rlDataProvider *) 0 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("rlDataProvider::getFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProvider::getFloat",1,"rlDataProvider *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlDataProvider::getFloat",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProvider,0))){
    SWIG_fail_ptr("rlDataProvider_getFloat",1,SWIGTYPE_p_rlDataProvider);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)(arg1)->getFloat(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProvider_getIntArray(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProvider *arg1 = (rlDataProvider *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlDataProvider::getIntArray",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProvider::getIntArray",1,"rlDataProvider *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlDataProvider::getIntArray",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("rlDataProvider::getIntArray",3,"int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlDataProvider::getIntArray",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProvider,0))){
    SWIG_fail_ptr("rlDataProvider_getIntArray",1,SWIGTYPE_p_rlDataProvider);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlDataProvider_getIntArray",3,SWIGTYPE_p_int);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->getIntArray(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProvider_getFloatArray(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProvider *arg1 = (rlDataProvider *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlDataProvider::getFloatArray",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProvider::getFloatArray",1,"rlDataProvider *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlDataProvider::getFloatArray",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("rlDataProvider::getFloatArray",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlDataProvider::getFloatArray",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProvider,0))){
    SWIG_fail_ptr("rlDataProvider_getFloatArray",1,SWIGTYPE_p_rlDataProvider);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("rlDataProvider_getFloatArray",3,SWIGTYPE_p_float);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->getFloatArray(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProvider_getString(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProvider *arg1 = (rlDataProvider *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlDataProvider::getString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProvider::getString",1,"rlDataProvider *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlDataProvider::getString",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProvider,0))){
    SWIG_fail_ptr("rlDataProvider_getString",1,SWIGTYPE_p_rlDataProvider);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(arg1)->getString(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProvider_setInt(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProvider *arg1 = (rlDataProvider *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlDataProvider::setInt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProvider::setInt",1,"rlDataProvider *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlDataProvider::setInt",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataProvider::setInt",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProvider,0))){
    SWIG_fail_ptr("rlDataProvider_setInt",1,SWIGTYPE_p_rlDataProvider);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->setInt(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProvider_setFloat(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProvider *arg1 = (rlDataProvider *) 0 ;
  int arg2 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("rlDataProvider::setFloat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProvider::setFloat",1,"rlDataProvider *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlDataProvider::setFloat",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataProvider::setFloat",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProvider,0))){
    SWIG_fail_ptr("rlDataProvider_setFloat",1,SWIGTYPE_p_rlDataProvider);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)(arg1)->setFloat(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProvider_setIntArray(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProvider *arg1 = (rlDataProvider *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlDataProvider::setIntArray",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProvider::setIntArray",1,"rlDataProvider *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlDataProvider::setIntArray",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("rlDataProvider::setIntArray",3,"int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlDataProvider::setIntArray",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProvider,0))){
    SWIG_fail_ptr("rlDataProvider_setIntArray",1,SWIGTYPE_p_rlDataProvider);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlDataProvider_setIntArray",3,SWIGTYPE_p_int);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->setIntArray(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProvider_setFloatArray(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProvider *arg1 = (rlDataProvider *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlDataProvider::setFloatArray",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProvider::setFloatArray",1,"rlDataProvider *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlDataProvider::setFloatArray",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("rlDataProvider::setFloatArray",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlDataProvider::setFloatArray",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProvider,0))){
    SWIG_fail_ptr("rlDataProvider_setFloatArray",1,SWIGTYPE_p_rlDataProvider);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("rlDataProvider_setFloatArray",3,SWIGTYPE_p_float);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->setFloatArray(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProvider_setString(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProvider *arg1 = (rlDataProvider *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataProvider::setString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProvider::setString",1,"rlDataProvider *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlDataProvider::setString",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlDataProvider::setString",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProvider,0))){
    SWIG_fail_ptr("rlDataProvider_setString",1,SWIGTYPE_p_rlDataProvider);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->setString(arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProvider_getIntAndReset(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProvider *arg1 = (rlDataProvider *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlDataProvider::getIntAndReset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProvider::getIntAndReset",1,"rlDataProvider *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlDataProvider::getIntAndReset",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProvider,0))){
    SWIG_fail_ptr("rlDataProvider_getIntAndReset",1,SWIGTYPE_p_rlDataProvider);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->getIntAndReset(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProvider_setIntAndWaitForReset(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProvider *arg1 = (rlDataProvider *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlDataProvider::setIntAndWaitForReset",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProvider::setIntAndWaitForReset",1,"rlDataProvider *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlDataProvider::setIntAndWaitForReset",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataProvider::setIntAndWaitForReset",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProvider,0))){
    SWIG_fail_ptr("rlDataProvider_setIntAndWaitForReset",1,SWIGTYPE_p_rlDataProvider);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->setIntAndWaitForReset(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProvider_setInt0Semaphore(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProvider *arg1 = (rlDataProvider *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlDataProvider::setInt0Semaphore",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProvider::setInt0Semaphore",1,"rlDataProvider *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlDataProvider::setInt0Semaphore",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProvider,0))){
    SWIG_fail_ptr("rlDataProvider_setInt0Semaphore",1,SWIGTYPE_p_rlDataProvider);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->setInt0Semaphore(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProvider_getInt0Semaphore(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProvider *arg1 = (rlDataProvider *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataProvider::getInt0Semaphore",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProvider::getInt0Semaphore",1,"rlDataProvider *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProvider,0))){
    SWIG_fail_ptr("rlDataProvider_getInt0Semaphore",1,SWIGTYPE_p_rlDataProvider);
  }
  
  result = (int)(arg1)->getInt0Semaphore();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProvider_run(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProvider *arg1 = (rlDataProvider *) 0 ;
  rlSocket *arg2 = (rlSocket *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataProvider::run",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProvider::run",1,"rlDataProvider *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlDataProvider::run",2,"rlSocket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProvider,0))){
    SWIG_fail_ptr("rlDataProvider_run",1,SWIGTYPE_p_rlDataProvider);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlDataProvider_run",2,SWIGTYPE_p_rlSocket);
  }
  
  result = (int)(arg1)->run(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlDataProvider(void *obj) {
rlDataProvider *arg1 = (rlDataProvider *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlDataProvider(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlDataProvider);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlDataProvider_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rlDataProvider_methods[]= {
    { "getInt", _wrap_rlDataProvider_getInt},
    { "getFloat", _wrap_rlDataProvider_getFloat},
    { "getIntArray", _wrap_rlDataProvider_getIntArray},
    { "getFloatArray", _wrap_rlDataProvider_getFloatArray},
    { "getString", _wrap_rlDataProvider_getString},
    { "setInt", _wrap_rlDataProvider_setInt},
    { "setFloat", _wrap_rlDataProvider_setFloat},
    { "setIntArray", _wrap_rlDataProvider_setIntArray},
    { "setFloatArray", _wrap_rlDataProvider_setFloatArray},
    { "setString", _wrap_rlDataProvider_setString},
    { "getIntAndReset", _wrap_rlDataProvider_getIntAndReset},
    { "setIntAndWaitForReset", _wrap_rlDataProvider_setIntAndWaitForReset},
    { "setInt0Semaphore", _wrap_rlDataProvider_setInt0Semaphore},
    { "getInt0Semaphore", _wrap_rlDataProvider_getInt0Semaphore},
    { "run", _wrap_rlDataProvider_run},
    {0,0}
};
static swig_lua_method swig_rlDataProvider_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlDataProvider_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlDataProvider_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlDataProvider_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlDataProvider_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlDataProvider_Sf_SwigStatic = {
    "rlDataProvider",
    swig_rlDataProvider_Sf_SwigStatic_methods,
    swig_rlDataProvider_Sf_SwigStatic_attributes,
    swig_rlDataProvider_Sf_SwigStatic_constants,
    swig_rlDataProvider_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlDataProvider_bases[] = {0};
static const char *swig_rlDataProvider_base_names[] = {0};
static swig_lua_class _wrap_class_rlDataProvider = { "rlDataProvider", "rlDataProvider", &SWIGTYPE_p_rlDataProvider,_proxy__wrap_new_rlDataProvider, swig_delete_rlDataProvider, swig_rlDataProvider_methods, swig_rlDataProvider_attributes, &swig_rlDataProvider_Sf_SwigStatic, swig_rlDataProvider_meta, swig_rlDataProvider_bases, swig_rlDataProvider_base_names };

static int _wrap_new_rlDataProviderClient(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderClient *result = 0 ;
  
  SWIG_check_num_args("rlDataProviderClient::rlDataProviderClient",0,0)
  result = (rlDataProviderClient *)new rlDataProviderClient();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlDataProviderClient,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProviderClient_getInt(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderClient *arg1 = (rlDataProviderClient *) 0 ;
  rlSocket *arg2 = (rlSocket *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataProviderClient::getInt",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProviderClient::getInt",1,"rlDataProviderClient *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlDataProviderClient::getInt",2,"rlSocket *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataProviderClient::getInt",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlDataProviderClient::getInt",4,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProviderClient,0))){
    SWIG_fail_ptr("rlDataProviderClient_getInt",1,SWIGTYPE_p_rlDataProviderClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlDataProviderClient_getInt",2,SWIGTYPE_p_rlSocket);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlDataProviderClient_getInt",4,SWIGTYPE_p_int);
  }
  
  result = (int)(arg1)->getInt(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProviderClient_getFloat(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderClient *arg1 = (rlDataProviderClient *) 0 ;
  rlSocket *arg2 = (rlSocket *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  float result;
  
  SWIG_check_num_args("rlDataProviderClient::getFloat",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProviderClient::getFloat",1,"rlDataProviderClient *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlDataProviderClient::getFloat",2,"rlSocket *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataProviderClient::getFloat",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlDataProviderClient::getFloat",4,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProviderClient,0))){
    SWIG_fail_ptr("rlDataProviderClient_getFloat",1,SWIGTYPE_p_rlDataProviderClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlDataProviderClient_getFloat",2,SWIGTYPE_p_rlSocket);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlDataProviderClient_getFloat",4,SWIGTYPE_p_int);
  }
  
  result = (float)(arg1)->getFloat(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProviderClient_getIntArray(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderClient *arg1 = (rlDataProviderClient *) 0 ;
  rlSocket *arg2 = (rlSocket *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  int result;
  
  SWIG_check_num_args("rlDataProviderClient::getIntArray",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProviderClient::getIntArray",1,"rlDataProviderClient *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlDataProviderClient::getIntArray",2,"rlSocket *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataProviderClient::getIntArray",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlDataProviderClient::getIntArray",4,"int *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlDataProviderClient::getIntArray",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProviderClient,0))){
    SWIG_fail_ptr("rlDataProviderClient_getIntArray",1,SWIGTYPE_p_rlDataProviderClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlDataProviderClient_getIntArray",2,SWIGTYPE_p_rlSocket);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlDataProviderClient_getIntArray",4,SWIGTYPE_p_int);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (int)(arg1)->getIntArray(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProviderClient_getFloatArray(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderClient *arg1 = (rlDataProviderClient *) 0 ;
  rlSocket *arg2 = (rlSocket *) 0 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  int result;
  
  SWIG_check_num_args("rlDataProviderClient::getFloatArray",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProviderClient::getFloatArray",1,"rlDataProviderClient *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlDataProviderClient::getFloatArray",2,"rlSocket *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataProviderClient::getFloatArray",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlDataProviderClient::getFloatArray",4,"float *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlDataProviderClient::getFloatArray",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProviderClient,0))){
    SWIG_fail_ptr("rlDataProviderClient_getFloatArray",1,SWIGTYPE_p_rlDataProviderClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlDataProviderClient_getFloatArray",2,SWIGTYPE_p_rlSocket);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("rlDataProviderClient_getFloatArray",4,SWIGTYPE_p_float);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (int)(arg1)->getFloatArray(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProviderClient_getString(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderClient *arg1 = (rlDataProviderClient *) 0 ;
  rlSocket *arg2 = (rlSocket *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlDataProviderClient::getString",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProviderClient::getString",1,"rlDataProviderClient *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlDataProviderClient::getString",2,"rlSocket *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataProviderClient::getString",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlDataProviderClient::getString",4,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProviderClient,0))){
    SWIG_fail_ptr("rlDataProviderClient_getString",1,SWIGTYPE_p_rlDataProviderClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlDataProviderClient_getString",2,SWIGTYPE_p_rlSocket);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlDataProviderClient_getString",4,SWIGTYPE_p_int);
  }
  
  result = (char *)(arg1)->getString(arg2,arg3,arg4);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProviderClient_setInt(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderClient *arg1 = (rlDataProviderClient *) 0 ;
  rlSocket *arg2 = (rlSocket *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlDataProviderClient::setInt",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProviderClient::setInt",1,"rlDataProviderClient *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlDataProviderClient::setInt",2,"rlSocket *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataProviderClient::setInt",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlDataProviderClient::setInt",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProviderClient,0))){
    SWIG_fail_ptr("rlDataProviderClient_setInt",1,SWIGTYPE_p_rlDataProviderClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlDataProviderClient_setInt",2,SWIGTYPE_p_rlSocket);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->setInt(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProviderClient_setFloat(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderClient *arg1 = (rlDataProviderClient *) 0 ;
  rlSocket *arg2 = (rlSocket *) 0 ;
  int arg3 ;
  float arg4 ;
  int result;
  
  SWIG_check_num_args("rlDataProviderClient::setFloat",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProviderClient::setFloat",1,"rlDataProviderClient *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlDataProviderClient::setFloat",2,"rlSocket *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataProviderClient::setFloat",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlDataProviderClient::setFloat",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProviderClient,0))){
    SWIG_fail_ptr("rlDataProviderClient_setFloat",1,SWIGTYPE_p_rlDataProviderClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlDataProviderClient_setFloat",2,SWIGTYPE_p_rlSocket);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (int)(arg1)->setFloat(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProviderClient_setIntArray(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderClient *arg1 = (rlDataProviderClient *) 0 ;
  rlSocket *arg2 = (rlSocket *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  int result;
  
  SWIG_check_num_args("rlDataProviderClient::setIntArray",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProviderClient::setIntArray",1,"rlDataProviderClient *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlDataProviderClient::setIntArray",2,"rlSocket *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataProviderClient::setIntArray",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlDataProviderClient::setIntArray",4,"int *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlDataProviderClient::setIntArray",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProviderClient,0))){
    SWIG_fail_ptr("rlDataProviderClient_setIntArray",1,SWIGTYPE_p_rlDataProviderClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlDataProviderClient_setIntArray",2,SWIGTYPE_p_rlSocket);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlDataProviderClient_setIntArray",4,SWIGTYPE_p_int);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (int)(arg1)->setIntArray(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProviderClient_setFloatArray(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderClient *arg1 = (rlDataProviderClient *) 0 ;
  rlSocket *arg2 = (rlSocket *) 0 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  int arg5 ;
  int result;
  
  SWIG_check_num_args("rlDataProviderClient::setFloatArray",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProviderClient::setFloatArray",1,"rlDataProviderClient *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlDataProviderClient::setFloatArray",2,"rlSocket *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataProviderClient::setFloatArray",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlDataProviderClient::setFloatArray",4,"float *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlDataProviderClient::setFloatArray",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProviderClient,0))){
    SWIG_fail_ptr("rlDataProviderClient_setFloatArray",1,SWIGTYPE_p_rlDataProviderClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlDataProviderClient_setFloatArray",2,SWIGTYPE_p_rlSocket);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("rlDataProviderClient_setFloatArray",4,SWIGTYPE_p_float);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (int)(arg1)->setFloatArray(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProviderClient_setString(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderClient *arg1 = (rlDataProviderClient *) 0 ;
  rlSocket *arg2 = (rlSocket *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataProviderClient::setString",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProviderClient::setString",1,"rlDataProviderClient *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlDataProviderClient::setString",2,"rlSocket *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataProviderClient::setString",3,"int");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("rlDataProviderClient::setString",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProviderClient,0))){
    SWIG_fail_ptr("rlDataProviderClient_setString",1,SWIGTYPE_p_rlDataProviderClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlDataProviderClient_setString",2,SWIGTYPE_p_rlSocket);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (int)(arg1)->setString(arg2,arg3,(char const *)arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProviderClient_getIntAndReset(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderClient *arg1 = (rlDataProviderClient *) 0 ;
  rlSocket *arg2 = (rlSocket *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataProviderClient::getIntAndReset",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProviderClient::getIntAndReset",1,"rlDataProviderClient *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlDataProviderClient::getIntAndReset",2,"rlSocket *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataProviderClient::getIntAndReset",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlDataProviderClient::getIntAndReset",4,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProviderClient,0))){
    SWIG_fail_ptr("rlDataProviderClient_getIntAndReset",1,SWIGTYPE_p_rlDataProviderClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlDataProviderClient_getIntAndReset",2,SWIGTYPE_p_rlSocket);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlDataProviderClient_getIntAndReset",4,SWIGTYPE_p_int);
  }
  
  result = (int)(arg1)->getIntAndReset(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProviderClient_setIntAndWaitForReset(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderClient *arg1 = (rlDataProviderClient *) 0 ;
  rlSocket *arg2 = (rlSocket *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlDataProviderClient::setIntAndWaitForReset",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProviderClient::setIntAndWaitForReset",1,"rlDataProviderClient *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlDataProviderClient::setIntAndWaitForReset",2,"rlSocket *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlDataProviderClient::setIntAndWaitForReset",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlDataProviderClient::setIntAndWaitForReset",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProviderClient,0))){
    SWIG_fail_ptr("rlDataProviderClient_setIntAndWaitForReset",1,SWIGTYPE_p_rlDataProviderClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlDataProviderClient_setIntAndWaitForReset",2,SWIGTYPE_p_rlSocket);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->setIntAndWaitForReset(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProviderClient_getInt0Semaphore(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderClient *arg1 = (rlDataProviderClient *) 0 ;
  rlSocket *arg2 = (rlSocket *) 0 ;
  int *arg3 = (int *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataProviderClient::getInt0Semaphore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProviderClient::getInt0Semaphore",1,"rlDataProviderClient *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlDataProviderClient::getInt0Semaphore",2,"rlSocket *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("rlDataProviderClient::getInt0Semaphore",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProviderClient,0))){
    SWIG_fail_ptr("rlDataProviderClient_getInt0Semaphore",1,SWIGTYPE_p_rlDataProviderClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlDataProviderClient_getInt0Semaphore",2,SWIGTYPE_p_rlSocket);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlDataProviderClient_getInt0Semaphore",3,SWIGTYPE_p_int);
  }
  
  result = (int)(arg1)->getInt0Semaphore(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlDataProviderClient(void *obj) {
rlDataProviderClient *arg1 = (rlDataProviderClient *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlDataProviderClient(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlDataProviderClient);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlDataProviderClient_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rlDataProviderClient_methods[]= {
    { "getInt", _wrap_rlDataProviderClient_getInt},
    { "getFloat", _wrap_rlDataProviderClient_getFloat},
    { "getIntArray", _wrap_rlDataProviderClient_getIntArray},
    { "getFloatArray", _wrap_rlDataProviderClient_getFloatArray},
    { "getString", _wrap_rlDataProviderClient_getString},
    { "setInt", _wrap_rlDataProviderClient_setInt},
    { "setFloat", _wrap_rlDataProviderClient_setFloat},
    { "setIntArray", _wrap_rlDataProviderClient_setIntArray},
    { "setFloatArray", _wrap_rlDataProviderClient_setFloatArray},
    { "setString", _wrap_rlDataProviderClient_setString},
    { "getIntAndReset", _wrap_rlDataProviderClient_getIntAndReset},
    { "setIntAndWaitForReset", _wrap_rlDataProviderClient_setIntAndWaitForReset},
    { "getInt0Semaphore", _wrap_rlDataProviderClient_getInt0Semaphore},
    {0,0}
};
static swig_lua_method swig_rlDataProviderClient_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlDataProviderClient_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlDataProviderClient_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlDataProviderClient_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlDataProviderClient_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlDataProviderClient_Sf_SwigStatic = {
    "rlDataProviderClient",
    swig_rlDataProviderClient_Sf_SwigStatic_methods,
    swig_rlDataProviderClient_Sf_SwigStatic_attributes,
    swig_rlDataProviderClient_Sf_SwigStatic_constants,
    swig_rlDataProviderClient_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlDataProviderClient_bases[] = {0};
static const char *swig_rlDataProviderClient_base_names[] = {0};
static swig_lua_class _wrap_class_rlDataProviderClient = { "rlDataProviderClient", "rlDataProviderClient", &SWIGTYPE_p_rlDataProviderClient,_proxy__wrap_new_rlDataProviderClient, swig_delete_rlDataProviderClient, swig_rlDataProviderClient_methods, swig_rlDataProviderClient_attributes, &swig_rlDataProviderClient_Sf_SwigStatic, swig_rlDataProviderClient_meta, swig_rlDataProviderClient_bases, swig_rlDataProviderClient_base_names };

static int _wrap_new_rlDataProviderThreads(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  rlDataProvider *arg2 = (rlDataProvider *) 0 ;
  rlDataProviderThreads *result = 0 ;
  
  SWIG_check_num_args("rlDataProviderThreads::rlDataProviderThreads",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlDataProviderThreads::rlDataProviderThreads",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlDataProviderThreads::rlDataProviderThreads",2,"rlDataProvider *");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlDataProvider,0))){
    SWIG_fail_ptr("new_rlDataProviderThreads",2,SWIGTYPE_p_rlDataProvider);
  }
  
  result = (rlDataProviderThreads *)new rlDataProviderThreads(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlDataProviderThreads,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProviderThreads_start(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderThreads *arg1 = (rlDataProviderThreads *) 0 ;
  
  SWIG_check_num_args("rlDataProviderThreads::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProviderThreads::start",1,"rlDataProviderThreads *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProviderThreads,0))){
    SWIG_fail_ptr("rlDataProviderThreads_start",1,SWIGTYPE_p_rlDataProviderThreads);
  }
  
  (arg1)->start();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProviderThreads_provider_set(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderThreads *arg1 = (rlDataProviderThreads *) 0 ;
  rlDataProvider *arg2 = (rlDataProvider *) 0 ;
  
  SWIG_check_num_args("rlDataProviderThreads::provider",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProviderThreads::provider",1,"rlDataProviderThreads *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlDataProviderThreads::provider",2,"rlDataProvider *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProviderThreads,0))){
    SWIG_fail_ptr("rlDataProviderThreads_provider_set",1,SWIGTYPE_p_rlDataProviderThreads);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlDataProvider,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("rlDataProviderThreads_provider_set",2,SWIGTYPE_p_rlDataProvider);
  }
  
  if (arg1) (arg1)->provider = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProviderThreads_provider_get(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderThreads *arg1 = (rlDataProviderThreads *) 0 ;
  rlDataProvider *result = 0 ;
  
  SWIG_check_num_args("rlDataProviderThreads::provider",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProviderThreads::provider",1,"rlDataProviderThreads *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProviderThreads,0))){
    SWIG_fail_ptr("rlDataProviderThreads_provider_get",1,SWIGTYPE_p_rlDataProviderThreads);
  }
  
  result = (rlDataProvider *) ((arg1)->provider);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlDataProvider,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProviderThreads_thread_set(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderThreads *arg1 = (rlDataProviderThreads *) 0 ;
  rlThread *arg2 = (rlThread *) 0 ;
  
  SWIG_check_num_args("rlDataProviderThreads::thread",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProviderThreads::thread",1,"rlDataProviderThreads *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlDataProviderThreads::thread",2,"rlThread *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProviderThreads,0))){
    SWIG_fail_ptr("rlDataProviderThreads_thread_set",1,SWIGTYPE_p_rlDataProviderThreads);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlThread,0))){
    SWIG_fail_ptr("rlDataProviderThreads_thread_set",2,SWIGTYPE_p_rlThread);
  }
  
  if (arg1) (arg1)->thread = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProviderThreads_thread_get(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderThreads *arg1 = (rlDataProviderThreads *) 0 ;
  rlThread *result = 0 ;
  
  SWIG_check_num_args("rlDataProviderThreads::thread",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProviderThreads::thread",1,"rlDataProviderThreads *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProviderThreads,0))){
    SWIG_fail_ptr("rlDataProviderThreads_thread_get",1,SWIGTYPE_p_rlDataProviderThreads);
  }
  
  result = (rlThread *)& ((arg1)->thread);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlThread,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProviderThreads_port_set(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderThreads *arg1 = (rlDataProviderThreads *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlDataProviderThreads::port",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProviderThreads::port",1,"rlDataProviderThreads *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlDataProviderThreads::port",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProviderThreads,0))){
    SWIG_fail_ptr("rlDataProviderThreads_port_set",1,SWIGTYPE_p_rlDataProviderThreads);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->port = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlDataProviderThreads_port_get(lua_State* L) {
  int SWIG_arg = 0;
  rlDataProviderThreads *arg1 = (rlDataProviderThreads *) 0 ;
  int result;
  
  SWIG_check_num_args("rlDataProviderThreads::port",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlDataProviderThreads::port",1,"rlDataProviderThreads *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlDataProviderThreads,0))){
    SWIG_fail_ptr("rlDataProviderThreads_port_get",1,SWIGTYPE_p_rlDataProviderThreads);
  }
  
  result = (int) ((arg1)->port);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlDataProviderThreads(void *obj) {
rlDataProviderThreads *arg1 = (rlDataProviderThreads *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlDataProviderThreads(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlDataProviderThreads);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlDataProviderThreads_attributes[] = {
    { "provider", _wrap_rlDataProviderThreads_provider_get, _wrap_rlDataProviderThreads_provider_set },
    { "thread", _wrap_rlDataProviderThreads_thread_get, _wrap_rlDataProviderThreads_thread_set },
    { "port", _wrap_rlDataProviderThreads_port_get, _wrap_rlDataProviderThreads_port_set },
    {0,0,0}
};
static swig_lua_method swig_rlDataProviderThreads_methods[]= {
    { "start", _wrap_rlDataProviderThreads_start},
    {0,0}
};
static swig_lua_method swig_rlDataProviderThreads_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlDataProviderThreads_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlDataProviderThreads_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlDataProviderThreads_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlDataProviderThreads_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlDataProviderThreads_Sf_SwigStatic = {
    "rlDataProviderThreads",
    swig_rlDataProviderThreads_Sf_SwigStatic_methods,
    swig_rlDataProviderThreads_Sf_SwigStatic_attributes,
    swig_rlDataProviderThreads_Sf_SwigStatic_constants,
    swig_rlDataProviderThreads_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlDataProviderThreads_bases[] = {0};
static const char *swig_rlDataProviderThreads_base_names[] = {0};
static swig_lua_class _wrap_class_rlDataProviderThreads = { "rlDataProviderThreads", "rlDataProviderThreads", &SWIGTYPE_p_rlDataProviderThreads,_proxy__wrap_new_rlDataProviderThreads, swig_delete_rlDataProviderThreads, swig_rlDataProviderThreads_methods, swig_rlDataProviderThreads_attributes, &swig_rlDataProviderThreads_Sf_SwigStatic, swig_rlDataProviderThreads_meta, swig_rlDataProviderThreads_bases, swig_rlDataProviderThreads_base_names };

static int _wrap_rlevent_name_get(lua_State* L) {
  int SWIG_arg = 0;
  char (*result)[4] = 0 ;
  
  SWIG_check_num_args("rlevent_name",0,0)
  result = (char (*)[4])(char (*)[4])rlevent_name;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_a_4__char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlEventInit(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("rlEventInit",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlEventInit",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlEventInit",2,"char **");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlEventInit",3,"char const *");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("rlEventInit",2,SWIGTYPE_p_p_char);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  rlEventInit(arg1,arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSetEventLocation(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlSetEventLocation",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlSetEventLocation",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSetEventLocation",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  rlSetEventLocation((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlEventPrintf(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  SWIG_check_num_args("rlEventPrintf",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlEventPrintf",1,"int");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlEventPrintf",2,"char const *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  rlEventPrintf(arg1,(char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlEventLogServer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  rlEventLogServer *result = 0 ;
  
  SWIG_check_num_args("rlEventLogServer::rlEventLogServer",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlEventLogServer::rlEventLogServer",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlEventLogServer::rlEventLogServer",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (rlEventLogServer *)new rlEventLogServer((char const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlEventLogServer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlEventLogServer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  rlEventLogServer *result = 0 ;
  
  SWIG_check_num_args("rlEventLogServer::rlEventLogServer",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlEventLogServer::rlEventLogServer",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (rlEventLogServer *)new rlEventLogServer((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlEventLogServer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlEventLogServer__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  rlEventLogServer *result = 0 ;
  
  SWIG_check_num_args("rlEventLogServer::rlEventLogServer",0,0)
  result = (rlEventLogServer *)new rlEventLogServer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlEventLogServer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlEventLogServer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_rlEventLogServer__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_rlEventLogServer__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_rlEventLogServer__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlEventLogServer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlEventLogServer::rlEventLogServer(char const *,int)\n"
    "    rlEventLogServer::rlEventLogServer(char const *)\n"
    "    rlEventLogServer::rlEventLogServer()\n");
  lua_error(L);return 0;
}


static int _wrap_rlEventLogServer_getEvent(lua_State* L) {
  int SWIG_arg = 0;
  rlEventLogServer *arg1 = (rlEventLogServer *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlEventLogServer::getEvent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlEventLogServer::getEvent",1,"rlEventLogServer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlEventLogServer::getEvent",2,"char *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("rlEventLogServer::getEvent",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlEventLogServer,0))){
    SWIG_fail_ptr("rlEventLogServer_getEvent",1,SWIGTYPE_p_rlEventLogServer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlEventLogServer_getEvent",3,SWIGTYPE_p_int);
  }
  
  result = (char *)(arg1)->getEvent(arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlEventLogServer_putEvent(lua_State* L) {
  int SWIG_arg = 0;
  rlEventLogServer *arg1 = (rlEventLogServer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("rlEventLogServer::putEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlEventLogServer::putEvent",1,"rlEventLogServer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlEventLogServer::putEvent",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlEventLogServer,0))){
    SWIG_fail_ptr("rlEventLogServer_putEvent",1,SWIGTYPE_p_rlEventLogServer);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->putEvent((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlEventLogServer(void *obj) {
rlEventLogServer *arg1 = (rlEventLogServer *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlEventLogServer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlEventLogServer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlEventLogServer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rlEventLogServer_methods[]= {
    { "getEvent", _wrap_rlEventLogServer_getEvent},
    { "putEvent", _wrap_rlEventLogServer_putEvent},
    {0,0}
};
static swig_lua_method swig_rlEventLogServer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlEventLogServer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlEventLogServer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlEventLogServer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlEventLogServer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlEventLogServer_Sf_SwigStatic = {
    "rlEventLogServer",
    swig_rlEventLogServer_Sf_SwigStatic_methods,
    swig_rlEventLogServer_Sf_SwigStatic_attributes,
    swig_rlEventLogServer_Sf_SwigStatic_constants,
    swig_rlEventLogServer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlEventLogServer_bases[] = {0};
static const char *swig_rlEventLogServer_base_names[] = {0};
static swig_lua_class _wrap_class_rlEventLogServer = { "rlEventLogServer", "rlEventLogServer", &SWIGTYPE_p_rlEventLogServer,_proxy__wrap_new_rlEventLogServer, swig_delete_rlEventLogServer, swig_rlEventLogServer_methods, swig_rlEventLogServer_attributes, &swig_rlEventLogServer_Sf_SwigStatic, swig_rlEventLogServer_meta, swig_rlEventLogServer_bases, swig_rlEventLogServer_base_names };

static int _wrap_new_rlEventLogServerThreads(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  rlEventLogServer *arg2 = (rlEventLogServer *) 0 ;
  rlEventLogServerThreads *result = 0 ;
  
  SWIG_check_num_args("rlEventLogServerThreads::rlEventLogServerThreads",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlEventLogServerThreads::rlEventLogServerThreads",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlEventLogServerThreads::rlEventLogServerThreads",2,"rlEventLogServer *");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlEventLogServer,0))){
    SWIG_fail_ptr("new_rlEventLogServerThreads",2,SWIGTYPE_p_rlEventLogServer);
  }
  
  result = (rlEventLogServerThreads *)new rlEventLogServerThreads(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlEventLogServerThreads,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlEventLogServerThreads_start(lua_State* L) {
  int SWIG_arg = 0;
  rlEventLogServerThreads *arg1 = (rlEventLogServerThreads *) 0 ;
  
  SWIG_check_num_args("rlEventLogServerThreads::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlEventLogServerThreads::start",1,"rlEventLogServerThreads *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlEventLogServerThreads,0))){
    SWIG_fail_ptr("rlEventLogServerThreads_start",1,SWIGTYPE_p_rlEventLogServerThreads);
  }
  
  (arg1)->start();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlEventLogServerThreads_getPort(lua_State* L) {
  int SWIG_arg = 0;
  rlEventLogServerThreads *arg1 = (rlEventLogServerThreads *) 0 ;
  int result;
  
  SWIG_check_num_args("rlEventLogServerThreads::getPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlEventLogServerThreads::getPort",1,"rlEventLogServerThreads *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlEventLogServerThreads,0))){
    SWIG_fail_ptr("rlEventLogServerThreads_getPort",1,SWIGTYPE_p_rlEventLogServerThreads);
  }
  
  result = (int)(arg1)->getPort();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlEventLogServerThreads_event_log_server_set(lua_State* L) {
  int SWIG_arg = 0;
  rlEventLogServerThreads *arg1 = (rlEventLogServerThreads *) 0 ;
  rlEventLogServer *arg2 = (rlEventLogServer *) 0 ;
  
  SWIG_check_num_args("rlEventLogServerThreads::event_log_server",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlEventLogServerThreads::event_log_server",1,"rlEventLogServerThreads *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlEventLogServerThreads::event_log_server",2,"rlEventLogServer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlEventLogServerThreads,0))){
    SWIG_fail_ptr("rlEventLogServerThreads_event_log_server_set",1,SWIGTYPE_p_rlEventLogServerThreads);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlEventLogServer,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("rlEventLogServerThreads_event_log_server_set",2,SWIGTYPE_p_rlEventLogServer);
  }
  
  if (arg1) (arg1)->event_log_server = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlEventLogServerThreads_event_log_server_get(lua_State* L) {
  int SWIG_arg = 0;
  rlEventLogServerThreads *arg1 = (rlEventLogServerThreads *) 0 ;
  rlEventLogServer *result = 0 ;
  
  SWIG_check_num_args("rlEventLogServerThreads::event_log_server",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlEventLogServerThreads::event_log_server",1,"rlEventLogServerThreads *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlEventLogServerThreads,0))){
    SWIG_fail_ptr("rlEventLogServerThreads_event_log_server_get",1,SWIGTYPE_p_rlEventLogServerThreads);
  }
  
  result = (rlEventLogServer *) ((arg1)->event_log_server);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlEventLogServer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlEventLogServerThreads(void *obj) {
rlEventLogServerThreads *arg1 = (rlEventLogServerThreads *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlEventLogServerThreads(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlEventLogServerThreads);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlEventLogServerThreads_attributes[] = {
    { "event_log_server", _wrap_rlEventLogServerThreads_event_log_server_get, _wrap_rlEventLogServerThreads_event_log_server_set },
    {0,0,0}
};
static swig_lua_method swig_rlEventLogServerThreads_methods[]= {
    { "start", _wrap_rlEventLogServerThreads_start},
    { "getPort", _wrap_rlEventLogServerThreads_getPort},
    {0,0}
};
static swig_lua_method swig_rlEventLogServerThreads_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlEventLogServerThreads_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlEventLogServerThreads_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlEventLogServerThreads_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlEventLogServerThreads_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlEventLogServerThreads_Sf_SwigStatic = {
    "rlEventLogServerThreads",
    swig_rlEventLogServerThreads_Sf_SwigStatic_methods,
    swig_rlEventLogServerThreads_Sf_SwigStatic_attributes,
    swig_rlEventLogServerThreads_Sf_SwigStatic_constants,
    swig_rlEventLogServerThreads_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlEventLogServerThreads_bases[] = {0};
static const char *swig_rlEventLogServerThreads_base_names[] = {0};
static swig_lua_class _wrap_class_rlEventLogServerThreads = { "rlEventLogServerThreads", "rlEventLogServerThreads", &SWIGTYPE_p_rlEventLogServerThreads,_proxy__wrap_new_rlEventLogServerThreads, swig_delete_rlEventLogServerThreads, swig_rlEventLogServerThreads_methods, swig_rlEventLogServerThreads_attributes, &swig_rlEventLogServerThreads_Sf_SwigStatic, swig_rlEventLogServerThreads_meta, swig_rlEventLogServerThreads_bases, swig_rlEventLogServerThreads_base_names };

static int _wrap_new_rlFifo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  rlFifo *result = 0 ;
  
  SWIG_check_num_args("rlFifo::rlFifo",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlFifo::rlFifo",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (rlFifo *)new rlFifo(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlFifo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlFifo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlFifo *result = 0 ;
  
  SWIG_check_num_args("rlFifo::rlFifo",0,0)
  result = (rlFifo *)new rlFifo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlFifo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlFifo(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_rlFifo__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_rlFifo__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlFifo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlFifo::rlFifo(int)\n"
    "    rlFifo::rlFifo()\n");
  lua_error(L);return 0;
}


static int _wrap_rlFifo_read(lua_State* L) {
  int SWIG_arg = 0;
  rlFifo *arg1 = (rlFifo *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlFifo::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlFifo::read",1,"rlFifo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlFifo::read",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlFifo::read",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlFifo,0))){
    SWIG_fail_ptr("rlFifo_read",1,SWIGTYPE_p_rlFifo);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlFifo_read");
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->read(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlFifo_poll(lua_State* L) {
  int SWIG_arg = 0;
  rlFifo *arg1 = (rlFifo *) 0 ;
  int result;
  
  SWIG_check_num_args("rlFifo::poll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlFifo::poll",1,"rlFifo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlFifo,0))){
    SWIG_fail_ptr("rlFifo_poll",1,SWIGTYPE_p_rlFifo);
  }
  
  result = (int)(arg1)->poll();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlFifo_nmesAvailable(lua_State* L) {
  int SWIG_arg = 0;
  rlFifo *arg1 = (rlFifo *) 0 ;
  int result;
  
  SWIG_check_num_args("rlFifo::nmesAvailable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlFifo::nmesAvailable",1,"rlFifo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlFifo,0))){
    SWIG_fail_ptr("rlFifo_nmesAvailable",1,SWIGTYPE_p_rlFifo);
  }
  
  result = (int)(arg1)->nmesAvailable();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlFifo_write(lua_State* L) {
  int SWIG_arg = 0;
  rlFifo *arg1 = (rlFifo *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlFifo::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlFifo::write",1,"rlFifo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlFifo::write",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlFifo::write",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlFifo,0))){
    SWIG_fail_ptr("rlFifo_write",1,SWIGTYPE_p_rlFifo);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlFifo_write");
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->write((void const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlFifo_printf(lua_State* L) {
  int SWIG_arg = 0;
  rlFifo *arg1 = (rlFifo *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  int result;
  
  SWIG_check_num_args("rlFifo::printf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlFifo::printf",1,"rlFifo *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlFifo::printf",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlFifo,0))){
    SWIG_fail_ptr("rlFifo_printf",1,SWIGTYPE_p_rlFifo);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->printf((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlFifo(void *obj) {
rlFifo *arg1 = (rlFifo *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlFifo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlFifo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlFifo_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rlFifo_methods[]= {
    { "read", _wrap_rlFifo_read},
    { "poll", _wrap_rlFifo_poll},
    { "nmesAvailable", _wrap_rlFifo_nmesAvailable},
    { "write", _wrap_rlFifo_write},
    { "printf", _wrap_rlFifo_printf},
    {0,0}
};
static swig_lua_method swig_rlFifo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlFifo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlFifo_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("DATA_AVAILABLE", rlFifo::DATA_AVAILABLE)},
    {SWIG_LUA_CONSTTAB_INT("NO_DATA_AVAILABLE", rlFifo::NO_DATA_AVAILABLE)},
    {SWIG_LUA_CONSTTAB_INT("MESSAGE_TO_BIG", rlFifo::MESSAGE_TO_BIG)},
    {SWIG_LUA_CONSTTAB_INT("FIFO_FULL", rlFifo::FIFO_FULL)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlFifo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlFifo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlFifo_Sf_SwigStatic = {
    "rlFifo",
    swig_rlFifo_Sf_SwigStatic_methods,
    swig_rlFifo_Sf_SwigStatic_attributes,
    swig_rlFifo_Sf_SwigStatic_constants,
    swig_rlFifo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlFifo_bases[] = {0};
static const char *swig_rlFifo_base_names[] = {0};
static swig_lua_class _wrap_class_rlFifo = { "rlFifo", "rlFifo", &SWIGTYPE_p_rlFifo,_proxy__wrap_new_rlFifo, swig_delete_rlFifo, swig_rlFifo_methods, swig_rlFifo_attributes, &swig_rlFifo_Sf_SwigStatic, swig_rlFifo_meta, swig_rlFifo_bases, swig_rlFifo_base_names };

static int _wrap_rlFileLines_line_set(lua_State* L) {
  int SWIG_arg = 0;
  _rlFileLines_ *arg1 = (_rlFileLines_ *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("_rlFileLines_::line",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_rlFileLines_::line",1,"_rlFileLines_ *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("_rlFileLines_::line",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__rlFileLines_,0))){
    SWIG_fail_ptr("rlFileLines_line_set",1,SWIGTYPE_p__rlFileLines_);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    delete [] arg1->line;
    if (arg2) {
      arg1->line = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->line, (const char *)arg2);
    } else {
      arg1->line = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlFileLines_line_get(lua_State* L) {
  int SWIG_arg = 0;
  _rlFileLines_ *arg1 = (_rlFileLines_ *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("_rlFileLines_::line",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_rlFileLines_::line",1,"_rlFileLines_ *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__rlFileLines_,0))){
    SWIG_fail_ptr("rlFileLines_line_get",1,SWIGTYPE_p__rlFileLines_);
  }
  
  result = (char *) ((arg1)->line);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlFileLines_next_set(lua_State* L) {
  int SWIG_arg = 0;
  _rlFileLines_ *arg1 = (_rlFileLines_ *) 0 ;
  _rlFileLines_ *arg2 = (_rlFileLines_ *) 0 ;
  
  SWIG_check_num_args("_rlFileLines_::next",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_rlFileLines_::next",1,"_rlFileLines_ *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("_rlFileLines_::next",2,"_rlFileLines_ *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__rlFileLines_,0))){
    SWIG_fail_ptr("rlFileLines_next_set",1,SWIGTYPE_p__rlFileLines_);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p__rlFileLines_,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("rlFileLines_next_set",2,SWIGTYPE_p__rlFileLines_);
  }
  
  if (arg1) (arg1)->next = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlFileLines_next_get(lua_State* L) {
  int SWIG_arg = 0;
  _rlFileLines_ *arg1 = (_rlFileLines_ *) 0 ;
  _rlFileLines_ *result = 0 ;
  
  SWIG_check_num_args("_rlFileLines_::next",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_rlFileLines_::next",1,"_rlFileLines_ *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__rlFileLines_,0))){
    SWIG_fail_ptr("rlFileLines_next_get",1,SWIGTYPE_p__rlFileLines_);
  }
  
  result = (_rlFileLines_ *) ((arg1)->next);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p__rlFileLines_,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlFileLines(lua_State* L) {
  int SWIG_arg = 0;
  _rlFileLines_ *result = 0 ;
  
  SWIG_check_num_args("_rlFileLines_::_rlFileLines_",0,0)
  result = (_rlFileLines_ *)new _rlFileLines_();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p__rlFileLines_,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlFileLines(void *obj) {
_rlFileLines_ *arg1 = (_rlFileLines_ *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlFileLines(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlFileLines);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlFileLines_attributes[] = {
    { "line", _wrap_rlFileLines_line_get, _wrap_rlFileLines_line_set },
    { "next", _wrap_rlFileLines_next_get, _wrap_rlFileLines_next_set },
    {0,0,0}
};
static swig_lua_method swig_rlFileLines_methods[]= {
    {0,0}
};
static swig_lua_method swig_rlFileLines_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlFileLines_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlFileLines_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlFileLines_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlFileLines_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlFileLines_Sf_SwigStatic = {
    "rlFileLines",
    swig_rlFileLines_Sf_SwigStatic_methods,
    swig_rlFileLines_Sf_SwigStatic_attributes,
    swig_rlFileLines_Sf_SwigStatic_constants,
    swig_rlFileLines_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlFileLines_bases[] = {0};
static const char *swig_rlFileLines_base_names[] = {0};
static swig_lua_class _wrap_class_rlFileLines = { "rlFileLines", "rlFileLines", &SWIGTYPE_p__rlFileLines_,_proxy__wrap_new_rlFileLines, swig_delete_rlFileLines, swig_rlFileLines_methods, swig_rlFileLines_attributes, &swig_rlFileLines_Sf_SwigStatic, swig_rlFileLines_meta, swig_rlFileLines_bases, swig_rlFileLines_base_names };

static int _wrap_new_rlFileLoad(lua_State* L) {
  int SWIG_arg = 0;
  rlFileLoad *result = 0 ;
  
  SWIG_check_num_args("rlFileLoad::rlFileLoad",0,0)
  result = (rlFileLoad *)new rlFileLoad();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlFileLoad,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlFileLoad_load(lua_State* L) {
  int SWIG_arg = 0;
  rlFileLoad *arg1 = (rlFileLoad *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlFileLoad::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlFileLoad::load",1,"rlFileLoad *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlFileLoad::load",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlFileLoad,0))){
    SWIG_fail_ptr("rlFileLoad_load",1,SWIGTYPE_p_rlFileLoad);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->load((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlFileLoad_unload(lua_State* L) {
  int SWIG_arg = 0;
  rlFileLoad *arg1 = (rlFileLoad *) 0 ;
  
  SWIG_check_num_args("rlFileLoad::unload",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlFileLoad::unload",1,"rlFileLoad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlFileLoad,0))){
    SWIG_fail_ptr("rlFileLoad_unload",1,SWIGTYPE_p_rlFileLoad);
  }
  
  (arg1)->unload();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlFileLoad_firstLine(lua_State* L) {
  int SWIG_arg = 0;
  rlFileLoad *arg1 = (rlFileLoad *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlFileLoad::firstLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlFileLoad::firstLine",1,"rlFileLoad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlFileLoad,0))){
    SWIG_fail_ptr("rlFileLoad_firstLine",1,SWIGTYPE_p_rlFileLoad);
  }
  
  result = (char *)(arg1)->firstLine();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlFileLoad_nextLine(lua_State* L) {
  int SWIG_arg = 0;
  rlFileLoad *arg1 = (rlFileLoad *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlFileLoad::nextLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlFileLoad::nextLine",1,"rlFileLoad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlFileLoad,0))){
    SWIG_fail_ptr("rlFileLoad_nextLine",1,SWIGTYPE_p_rlFileLoad);
  }
  
  result = (char *)(arg1)->nextLine();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlFileLoad_setDebug(lua_State* L) {
  int SWIG_arg = 0;
  rlFileLoad *arg1 = (rlFileLoad *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlFileLoad::setDebug",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlFileLoad::setDebug",1,"rlFileLoad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlFileLoad::setDebug",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlFileLoad,0))){
    SWIG_fail_ptr("rlFileLoad_setDebug",1,SWIGTYPE_p_rlFileLoad);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setDebug(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlFileLoad_text2rlstring(lua_State* L) {
  int SWIG_arg = 0;
  rlFileLoad *arg1 = (rlFileLoad *) 0 ;
  rlString *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("rlFileLoad::text2rlstring",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlFileLoad::text2rlstring",1,"rlFileLoad *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("rlFileLoad::text2rlstring",2,"rlString &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlFileLoad,0))){
    SWIG_fail_ptr("rlFileLoad_text2rlstring",1,SWIGTYPE_p_rlFileLoad);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlFileLoad_text2rlstring",2,SWIGTYPE_p_rlString);
  }
  
  result = (int)(arg1)->text2rlstring(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlFileLoad(void *obj) {
rlFileLoad *arg1 = (rlFileLoad *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlFileLoad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlFileLoad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlFileLoad_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rlFileLoad_methods[]= {
    { "load", _wrap_rlFileLoad_load},
    { "unload", _wrap_rlFileLoad_unload},
    { "firstLine", _wrap_rlFileLoad_firstLine},
    { "nextLine", _wrap_rlFileLoad_nextLine},
    { "setDebug", _wrap_rlFileLoad_setDebug},
    { "text2rlstring", _wrap_rlFileLoad_text2rlstring},
    {0,0}
};
static swig_lua_method swig_rlFileLoad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlFileLoad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlFileLoad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlFileLoad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlFileLoad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlFileLoad_Sf_SwigStatic = {
    "rlFileLoad",
    swig_rlFileLoad_Sf_SwigStatic_methods,
    swig_rlFileLoad_Sf_SwigStatic_attributes,
    swig_rlFileLoad_Sf_SwigStatic_constants,
    swig_rlFileLoad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlFileLoad_bases[] = {0};
static const char *swig_rlFileLoad_base_names[] = {0};
static swig_lua_class _wrap_class_rlFileLoad = { "rlFileLoad", "rlFileLoad", &SWIGTYPE_p_rlFileLoad,_proxy__wrap_new_rlFileLoad, swig_delete_rlFileLoad, swig_rlFileLoad_methods, swig_rlFileLoad_attributes, &swig_rlFileLoad_Sf_SwigStatic, swig_rlFileLoad_meta, swig_rlFileLoad_bases, swig_rlFileLoad_base_names };

static int _wrap_rlHistoryLogLine_next_set(lua_State* L) {
  int SWIG_arg = 0;
  _rlHistoryLogLine_ *arg1 = (_rlHistoryLogLine_ *) 0 ;
  _rlHistoryLogLine_ *arg2 = (_rlHistoryLogLine_ *) 0 ;
  
  SWIG_check_num_args("_rlHistoryLogLine_::next",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_rlHistoryLogLine_::next",1,"_rlHistoryLogLine_ *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("_rlHistoryLogLine_::next",2,"_rlHistoryLogLine_ *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__rlHistoryLogLine_,0))){
    SWIG_fail_ptr("rlHistoryLogLine_next_set",1,SWIGTYPE_p__rlHistoryLogLine_);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p__rlHistoryLogLine_,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("rlHistoryLogLine_next_set",2,SWIGTYPE_p__rlHistoryLogLine_);
  }
  
  if (arg1) (arg1)->next = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlHistoryLogLine_next_get(lua_State* L) {
  int SWIG_arg = 0;
  _rlHistoryLogLine_ *arg1 = (_rlHistoryLogLine_ *) 0 ;
  _rlHistoryLogLine_ *result = 0 ;
  
  SWIG_check_num_args("_rlHistoryLogLine_::next",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_rlHistoryLogLine_::next",1,"_rlHistoryLogLine_ *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__rlHistoryLogLine_,0))){
    SWIG_fail_ptr("rlHistoryLogLine_next_get",1,SWIGTYPE_p__rlHistoryLogLine_);
  }
  
  result = (_rlHistoryLogLine_ *) ((arg1)->next);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p__rlHistoryLogLine_,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlHistoryLogLine_line_set(lua_State* L) {
  int SWIG_arg = 0;
  _rlHistoryLogLine_ *arg1 = (_rlHistoryLogLine_ *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("_rlHistoryLogLine_::line",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_rlHistoryLogLine_::line",1,"_rlHistoryLogLine_ *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("_rlHistoryLogLine_::line",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__rlHistoryLogLine_,0))){
    SWIG_fail_ptr("rlHistoryLogLine_line_set",1,SWIGTYPE_p__rlHistoryLogLine_);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    delete [] arg1->line;
    if (arg2) {
      arg1->line = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->line, (const char *)arg2);
    } else {
      arg1->line = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlHistoryLogLine_line_get(lua_State* L) {
  int SWIG_arg = 0;
  _rlHistoryLogLine_ *arg1 = (_rlHistoryLogLine_ *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("_rlHistoryLogLine_::line",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_rlHistoryLogLine_::line",1,"_rlHistoryLogLine_ *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__rlHistoryLogLine_,0))){
    SWIG_fail_ptr("rlHistoryLogLine_line_get",1,SWIGTYPE_p__rlHistoryLogLine_);
  }
  
  result = (char *) ((arg1)->line);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlHistoryLogLine(lua_State* L) {
  int SWIG_arg = 0;
  _rlHistoryLogLine_ *result = 0 ;
  
  SWIG_check_num_args("_rlHistoryLogLine_::_rlHistoryLogLine_",0,0)
  result = (_rlHistoryLogLine_ *)new _rlHistoryLogLine_();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p__rlHistoryLogLine_,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlHistoryLogLine(void *obj) {
_rlHistoryLogLine_ *arg1 = (_rlHistoryLogLine_ *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlHistoryLogLine(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlHistoryLogLine);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlHistoryLogLine_attributes[] = {
    { "next", _wrap_rlHistoryLogLine_next_get, _wrap_rlHistoryLogLine_next_set },
    { "line", _wrap_rlHistoryLogLine_line_get, _wrap_rlHistoryLogLine_line_set },
    {0,0,0}
};
static swig_lua_method swig_rlHistoryLogLine_methods[]= {
    {0,0}
};
static swig_lua_method swig_rlHistoryLogLine_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlHistoryLogLine_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlHistoryLogLine_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlHistoryLogLine_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlHistoryLogLine_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlHistoryLogLine_Sf_SwigStatic = {
    "rlHistoryLogLine",
    swig_rlHistoryLogLine_Sf_SwigStatic_methods,
    swig_rlHistoryLogLine_Sf_SwigStatic_attributes,
    swig_rlHistoryLogLine_Sf_SwigStatic_constants,
    swig_rlHistoryLogLine_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlHistoryLogLine_bases[] = {0};
static const char *swig_rlHistoryLogLine_base_names[] = {0};
static swig_lua_class _wrap_class_rlHistoryLogLine = { "rlHistoryLogLine", "rlHistoryLogLine", &SWIGTYPE_p__rlHistoryLogLine_,_proxy__wrap_new_rlHistoryLogLine, swig_delete_rlHistoryLogLine, swig_rlHistoryLogLine_methods, swig_rlHistoryLogLine_attributes, &swig_rlHistoryLogLine_Sf_SwigStatic, swig_rlHistoryLogLine_meta, swig_rlHistoryLogLine_bases, swig_rlHistoryLogLine_base_names };

static int _wrap_new_rlHistoryLogger__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  rlHistoryLogger *result = 0 ;
  
  SWIG_check_num_args("rlHistoryLogger::rlHistoryLogger",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlHistoryLogger::rlHistoryLogger",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlHistoryLogger::rlHistoryLogger",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlHistoryLogger::rlHistoryLogger",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (rlHistoryLogger *)new rlHistoryLogger((char const *)arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlHistoryLogger,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlHistoryLogger__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  rlHistoryLogger *result = 0 ;
  
  SWIG_check_num_args("rlHistoryLogger::rlHistoryLogger",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlHistoryLogger::rlHistoryLogger",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlHistoryLogger::rlHistoryLogger",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (rlHistoryLogger *)new rlHistoryLogger((char const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlHistoryLogger,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlHistoryLogger(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_rlHistoryLogger__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_rlHistoryLogger__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlHistoryLogger'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlHistoryLogger::rlHistoryLogger(char const *,int,int)\n"
    "    rlHistoryLogger::rlHistoryLogger(char const *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_rlHistoryLogger_pushLine(lua_State* L) {
  int SWIG_arg = 0;
  rlHistoryLogger *arg1 = (rlHistoryLogger *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlHistoryLogger::pushLine",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlHistoryLogger::pushLine",1,"rlHistoryLogger *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlHistoryLogger::pushLine",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlHistoryLogger,0))){
    SWIG_fail_ptr("rlHistoryLogger_pushLine",1,SWIGTYPE_p_rlHistoryLogger);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->pushLine((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlHistoryLogger_firstLine(lua_State* L) {
  int SWIG_arg = 0;
  rlHistoryLogger *arg1 = (rlHistoryLogger *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlHistoryLogger::firstLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlHistoryLogger::firstLine",1,"rlHistoryLogger *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlHistoryLogger,0))){
    SWIG_fail_ptr("rlHistoryLogger_firstLine",1,SWIGTYPE_p_rlHistoryLogger);
  }
  
  result = (char *)(arg1)->firstLine();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlHistoryLogger_nextLine(lua_State* L) {
  int SWIG_arg = 0;
  rlHistoryLogger *arg1 = (rlHistoryLogger *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlHistoryLogger::nextLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlHistoryLogger::nextLine",1,"rlHistoryLogger *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlHistoryLogger,0))){
    SWIG_fail_ptr("rlHistoryLogger_nextLine",1,SWIGTYPE_p_rlHistoryLogger);
  }
  
  result = (char *)(arg1)->nextLine();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlHistoryLogger_mutex_set(lua_State* L) {
  int SWIG_arg = 0;
  rlHistoryLogger *arg1 = (rlHistoryLogger *) 0 ;
  rlMutex *arg2 = (rlMutex *) 0 ;
  
  SWIG_check_num_args("rlHistoryLogger::mutex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlHistoryLogger::mutex",1,"rlHistoryLogger *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlHistoryLogger::mutex",2,"rlMutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlHistoryLogger,0))){
    SWIG_fail_ptr("rlHistoryLogger_mutex_set",1,SWIGTYPE_p_rlHistoryLogger);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlMutex,0))){
    SWIG_fail_ptr("rlHistoryLogger_mutex_set",2,SWIGTYPE_p_rlMutex);
  }
  
  if (arg1) (arg1)->mutex = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlHistoryLogger_mutex_get(lua_State* L) {
  int SWIG_arg = 0;
  rlHistoryLogger *arg1 = (rlHistoryLogger *) 0 ;
  rlMutex *result = 0 ;
  
  SWIG_check_num_args("rlHistoryLogger::mutex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlHistoryLogger::mutex",1,"rlHistoryLogger *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlHistoryLogger,0))){
    SWIG_fail_ptr("rlHistoryLogger_mutex_get",1,SWIGTYPE_p_rlHistoryLogger);
  }
  
  result = (rlMutex *)& ((arg1)->mutex);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlMutex,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlHistoryLogger_debug_set(lua_State* L) {
  int SWIG_arg = 0;
  rlHistoryLogger *arg1 = (rlHistoryLogger *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlHistoryLogger::debug",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlHistoryLogger::debug",1,"rlHistoryLogger *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlHistoryLogger::debug",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlHistoryLogger,0))){
    SWIG_fail_ptr("rlHistoryLogger_debug_set",1,SWIGTYPE_p_rlHistoryLogger);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->debug = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlHistoryLogger_debug_get(lua_State* L) {
  int SWIG_arg = 0;
  rlHistoryLogger *arg1 = (rlHistoryLogger *) 0 ;
  int result;
  
  SWIG_check_num_args("rlHistoryLogger::debug",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlHistoryLogger::debug",1,"rlHistoryLogger *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlHistoryLogger,0))){
    SWIG_fail_ptr("rlHistoryLogger_debug_get",1,SWIGTYPE_p_rlHistoryLogger);
  }
  
  result = (int) ((arg1)->debug);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlHistoryLogger(void *obj) {
rlHistoryLogger *arg1 = (rlHistoryLogger *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlHistoryLogger(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlHistoryLogger);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlHistoryLogger_attributes[] = {
    { "mutex", _wrap_rlHistoryLogger_mutex_get, _wrap_rlHistoryLogger_mutex_set },
    { "debug", _wrap_rlHistoryLogger_debug_get, _wrap_rlHistoryLogger_debug_set },
    {0,0,0}
};
static swig_lua_method swig_rlHistoryLogger_methods[]= {
    { "pushLine", _wrap_rlHistoryLogger_pushLine},
    { "firstLine", _wrap_rlHistoryLogger_firstLine},
    { "nextLine", _wrap_rlHistoryLogger_nextLine},
    {0,0}
};
static swig_lua_method swig_rlHistoryLogger_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlHistoryLogger_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlHistoryLogger_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlHistoryLogger_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlHistoryLogger_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlHistoryLogger_Sf_SwigStatic = {
    "rlHistoryLogger",
    swig_rlHistoryLogger_Sf_SwigStatic_methods,
    swig_rlHistoryLogger_Sf_SwigStatic_attributes,
    swig_rlHistoryLogger_Sf_SwigStatic_constants,
    swig_rlHistoryLogger_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlHistoryLogger_bases[] = {0};
static const char *swig_rlHistoryLogger_base_names[] = {0};
static swig_lua_class _wrap_class_rlHistoryLogger = { "rlHistoryLogger", "rlHistoryLogger", &SWIGTYPE_p_rlHistoryLogger,_proxy__wrap_new_rlHistoryLogger, swig_delete_rlHistoryLogger, swig_rlHistoryLogger_methods, swig_rlHistoryLogger_attributes, &swig_rlHistoryLogger_Sf_SwigStatic, swig_rlHistoryLogger_meta, swig_rlHistoryLogger_bases, swig_rlHistoryLogger_base_names };

static int _wrap_rlHistoryReaderLine_next_set(lua_State* L) {
  int SWIG_arg = 0;
  _rlHistoryReaderLine_ *arg1 = (_rlHistoryReaderLine_ *) 0 ;
  _rlHistoryReaderLine_ *arg2 = (_rlHistoryReaderLine_ *) 0 ;
  
  SWIG_check_num_args("_rlHistoryReaderLine_::next",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_rlHistoryReaderLine_::next",1,"_rlHistoryReaderLine_ *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("_rlHistoryReaderLine_::next",2,"_rlHistoryReaderLine_ *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__rlHistoryReaderLine_,0))){
    SWIG_fail_ptr("rlHistoryReaderLine_next_set",1,SWIGTYPE_p__rlHistoryReaderLine_);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p__rlHistoryReaderLine_,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("rlHistoryReaderLine_next_set",2,SWIGTYPE_p__rlHistoryReaderLine_);
  }
  
  if (arg1) (arg1)->next = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlHistoryReaderLine_next_get(lua_State* L) {
  int SWIG_arg = 0;
  _rlHistoryReaderLine_ *arg1 = (_rlHistoryReaderLine_ *) 0 ;
  _rlHistoryReaderLine_ *result = 0 ;
  
  SWIG_check_num_args("_rlHistoryReaderLine_::next",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_rlHistoryReaderLine_::next",1,"_rlHistoryReaderLine_ *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__rlHistoryReaderLine_,0))){
    SWIG_fail_ptr("rlHistoryReaderLine_next_get",1,SWIGTYPE_p__rlHistoryReaderLine_);
  }
  
  result = (_rlHistoryReaderLine_ *) ((arg1)->next);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p__rlHistoryReaderLine_,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlHistoryReaderLine_line_set(lua_State* L) {
  int SWIG_arg = 0;
  _rlHistoryReaderLine_ *arg1 = (_rlHistoryReaderLine_ *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("_rlHistoryReaderLine_::line",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_rlHistoryReaderLine_::line",1,"_rlHistoryReaderLine_ *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("_rlHistoryReaderLine_::line",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__rlHistoryReaderLine_,0))){
    SWIG_fail_ptr("rlHistoryReaderLine_line_set",1,SWIGTYPE_p__rlHistoryReaderLine_);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    delete [] arg1->line;
    if (arg2) {
      arg1->line = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->line, (const char *)arg2);
    } else {
      arg1->line = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlHistoryReaderLine_line_get(lua_State* L) {
  int SWIG_arg = 0;
  _rlHistoryReaderLine_ *arg1 = (_rlHistoryReaderLine_ *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("_rlHistoryReaderLine_::line",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_rlHistoryReaderLine_::line",1,"_rlHistoryReaderLine_ *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p__rlHistoryReaderLine_,0))){
    SWIG_fail_ptr("rlHistoryReaderLine_line_get",1,SWIGTYPE_p__rlHistoryReaderLine_);
  }
  
  result = (char *) ((arg1)->line);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlHistoryReaderLine(lua_State* L) {
  int SWIG_arg = 0;
  _rlHistoryReaderLine_ *result = 0 ;
  
  SWIG_check_num_args("_rlHistoryReaderLine_::_rlHistoryReaderLine_",0,0)
  result = (_rlHistoryReaderLine_ *)new _rlHistoryReaderLine_();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p__rlHistoryReaderLine_,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlHistoryReaderLine(void *obj) {
_rlHistoryReaderLine_ *arg1 = (_rlHistoryReaderLine_ *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlHistoryReaderLine(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlHistoryReaderLine);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlHistoryReaderLine_attributes[] = {
    { "next", _wrap_rlHistoryReaderLine_next_get, _wrap_rlHistoryReaderLine_next_set },
    { "line", _wrap_rlHistoryReaderLine_line_get, _wrap_rlHistoryReaderLine_line_set },
    {0,0,0}
};
static swig_lua_method swig_rlHistoryReaderLine_methods[]= {
    {0,0}
};
static swig_lua_method swig_rlHistoryReaderLine_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlHistoryReaderLine_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlHistoryReaderLine_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlHistoryReaderLine_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlHistoryReaderLine_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlHistoryReaderLine_Sf_SwigStatic = {
    "rlHistoryReaderLine",
    swig_rlHistoryReaderLine_Sf_SwigStatic_methods,
    swig_rlHistoryReaderLine_Sf_SwigStatic_attributes,
    swig_rlHistoryReaderLine_Sf_SwigStatic_constants,
    swig_rlHistoryReaderLine_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlHistoryReaderLine_bases[] = {0};
static const char *swig_rlHistoryReaderLine_base_names[] = {0};
static swig_lua_class _wrap_class_rlHistoryReaderLine = { "rlHistoryReaderLine", "rlHistoryReaderLine", &SWIGTYPE_p__rlHistoryReaderLine_,_proxy__wrap_new_rlHistoryReaderLine, swig_delete_rlHistoryReaderLine, swig_rlHistoryReaderLine_methods, swig_rlHistoryReaderLine_attributes, &swig_rlHistoryReaderLine_Sf_SwigStatic, swig_rlHistoryReaderLine_meta, swig_rlHistoryReaderLine_bases, swig_rlHistoryReaderLine_base_names };

static int _wrap_new_rlHistoryReader__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  rlHistoryReader *result = 0 ;
  
  SWIG_check_num_args("rlHistoryReader::rlHistoryReader",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlHistoryReader::rlHistoryReader",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (rlHistoryReader *)new rlHistoryReader(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlHistoryReader,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlHistoryReader__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlHistoryReader *result = 0 ;
  
  SWIG_check_num_args("rlHistoryReader::rlHistoryReader",0,0)
  result = (rlHistoryReader *)new rlHistoryReader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlHistoryReader,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlHistoryReader(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_rlHistoryReader__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_rlHistoryReader__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlHistoryReader'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlHistoryReader::rlHistoryReader(unsigned int)\n"
    "    rlHistoryReader::rlHistoryReader()\n");
  lua_error(L);return 0;
}


static int _wrap_rlHistoryReader_read(lua_State* L) {
  int SWIG_arg = 0;
  rlHistoryReader *arg1 = (rlHistoryReader *) 0 ;
  char *arg2 = (char *) 0 ;
  rlTime *arg3 = (rlTime *) 0 ;
  rlTime *arg4 = (rlTime *) 0 ;
  int result;
  
  SWIG_check_num_args("rlHistoryReader::read",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlHistoryReader::read",1,"rlHistoryReader *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlHistoryReader::read",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("rlHistoryReader::read",3,"rlTime *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlHistoryReader::read",4,"rlTime *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlHistoryReader,0))){
    SWIG_fail_ptr("rlHistoryReader_read",1,SWIGTYPE_p_rlHistoryReader);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_rlTime,0))){
    SWIG_fail_ptr("rlHistoryReader_read",3,SWIGTYPE_p_rlTime);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_rlTime,0))){
    SWIG_fail_ptr("rlHistoryReader_read",4,SWIGTYPE_p_rlTime);
  }
  
  result = (int)(arg1)->read((char const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlHistoryReader_firstLine(lua_State* L) {
  int SWIG_arg = 0;
  rlHistoryReader *arg1 = (rlHistoryReader *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlHistoryReader::firstLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlHistoryReader::firstLine",1,"rlHistoryReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlHistoryReader,0))){
    SWIG_fail_ptr("rlHistoryReader_firstLine",1,SWIGTYPE_p_rlHistoryReader);
  }
  
  result = (char *)(arg1)->firstLine();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlHistoryReader_nextLine(lua_State* L) {
  int SWIG_arg = 0;
  rlHistoryReader *arg1 = (rlHistoryReader *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlHistoryReader::nextLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlHistoryReader::nextLine",1,"rlHistoryReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlHistoryReader,0))){
    SWIG_fail_ptr("rlHistoryReader_nextLine",1,SWIGTYPE_p_rlHistoryReader);
  }
  
  result = (char *)(arg1)->nextLine();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlHistoryReader_clean(lua_State* L) {
  int SWIG_arg = 0;
  rlHistoryReader *arg1 = (rlHistoryReader *) 0 ;
  int result;
  
  SWIG_check_num_args("rlHistoryReader::clean",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlHistoryReader::clean",1,"rlHistoryReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlHistoryReader,0))){
    SWIG_fail_ptr("rlHistoryReader_clean",1,SWIGTYPE_p_rlHistoryReader);
  }
  
  result = (int)(arg1)->clean();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlHistoryReader_cat(lua_State* L) {
  int SWIG_arg = 0;
  rlHistoryReader *arg1 = (rlHistoryReader *) 0 ;
  char *arg2 = (char *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  int result;
  
  SWIG_check_num_args("rlHistoryReader::cat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlHistoryReader::cat",1,"rlHistoryReader *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlHistoryReader::cat",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("rlHistoryReader::cat",3,"FILE *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlHistoryReader,0))){
    SWIG_fail_ptr("rlHistoryReader_cat",1,SWIGTYPE_p_rlHistoryReader);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FILE,0))){
    SWIG_fail_ptr("rlHistoryReader_cat",3,SWIGTYPE_p_FILE);
  }
  
  result = (int)(arg1)->cat((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlHistoryReader_debug_set(lua_State* L) {
  int SWIG_arg = 0;
  rlHistoryReader *arg1 = (rlHistoryReader *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlHistoryReader::debug",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlHistoryReader::debug",1,"rlHistoryReader *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlHistoryReader::debug",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlHistoryReader,0))){
    SWIG_fail_ptr("rlHistoryReader_debug_set",1,SWIGTYPE_p_rlHistoryReader);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->debug = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlHistoryReader_debug_get(lua_State* L) {
  int SWIG_arg = 0;
  rlHistoryReader *arg1 = (rlHistoryReader *) 0 ;
  int result;
  
  SWIG_check_num_args("rlHistoryReader::debug",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlHistoryReader::debug",1,"rlHistoryReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlHistoryReader,0))){
    SWIG_fail_ptr("rlHistoryReader_debug_get",1,SWIGTYPE_p_rlHistoryReader);
  }
  
  result = (int) ((arg1)->debug);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlHistoryReader(void *obj) {
rlHistoryReader *arg1 = (rlHistoryReader *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlHistoryReader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlHistoryReader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlHistoryReader_attributes[] = {
    { "debug", _wrap_rlHistoryReader_debug_get, _wrap_rlHistoryReader_debug_set },
    {0,0,0}
};
static swig_lua_method swig_rlHistoryReader_methods[]= {
    { "read", _wrap_rlHistoryReader_read},
    { "firstLine", _wrap_rlHistoryReader_firstLine},
    { "nextLine", _wrap_rlHistoryReader_nextLine},
    { "clean", _wrap_rlHistoryReader_clean},
    { "cat", _wrap_rlHistoryReader_cat},
    {0,0}
};
static swig_lua_method swig_rlHistoryReader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlHistoryReader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlHistoryReader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlHistoryReader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlHistoryReader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlHistoryReader_Sf_SwigStatic = {
    "rlHistoryReader",
    swig_rlHistoryReader_Sf_SwigStatic_methods,
    swig_rlHistoryReader_Sf_SwigStatic_attributes,
    swig_rlHistoryReader_Sf_SwigStatic_constants,
    swig_rlHistoryReader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlHistoryReader_bases[] = {0};
static const char *swig_rlHistoryReader_base_names[] = {0};
static swig_lua_class _wrap_class_rlHistoryReader = { "rlHistoryReader", "rlHistoryReader", &SWIGTYPE_p_rlHistoryReader,_proxy__wrap_new_rlHistoryReader, swig_delete_rlHistoryReader, swig_rlHistoryReader_methods, swig_rlHistoryReader_attributes, &swig_rlHistoryReader_Sf_SwigStatic, swig_rlHistoryReader_meta, swig_rlHistoryReader_bases, swig_rlHistoryReader_base_names };

static int _wrap_new_rlIniFile(lua_State* L) {
  int SWIG_arg = 0;
  rlIniFile *result = 0 ;
  
  SWIG_check_num_args("rlIniFile::rlIniFile",0,0)
  result = (rlIniFile *)new rlIniFile();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlIniFile,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIniFile_read(lua_State* L) {
  int SWIG_arg = 0;
  rlIniFile *arg1 = (rlIniFile *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlIniFile::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIniFile::read",1,"rlIniFile *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlIniFile::read",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIniFile,0))){
    SWIG_fail_ptr("rlIniFile_read",1,SWIGTYPE_p_rlIniFile);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->read((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIniFile_write(lua_State* L) {
  int SWIG_arg = 0;
  rlIniFile *arg1 = (rlIniFile *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlIniFile::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIniFile::write",1,"rlIniFile *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlIniFile::write",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIniFile,0))){
    SWIG_fail_ptr("rlIniFile_write",1,SWIGTYPE_p_rlIniFile);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->write((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIniFile_filename(lua_State* L) {
  int SWIG_arg = 0;
  rlIniFile *arg1 = (rlIniFile *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlIniFile::filename",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIniFile::filename",1,"rlIniFile *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIniFile,0))){
    SWIG_fail_ptr("rlIniFile_filename",1,SWIGTYPE_p_rlIniFile);
  }
  
  result = (char *)(arg1)->filename();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIniFile_text(lua_State* L) {
  int SWIG_arg = 0;
  rlIniFile *arg1 = (rlIniFile *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlIniFile::text",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIniFile::text",1,"rlIniFile *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlIniFile::text",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlIniFile::text",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIniFile,0))){
    SWIG_fail_ptr("rlIniFile_text",1,SWIGTYPE_p_rlIniFile);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (char *)(arg1)->text((char const *)arg2,(char const *)arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIniFile_setText(lua_State* L) {
  int SWIG_arg = 0;
  rlIniFile *arg1 = (rlIniFile *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  SWIG_check_num_args("rlIniFile::setText",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIniFile::setText",1,"rlIniFile *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlIniFile::setText",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlIniFile::setText",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("rlIniFile::setText",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIniFile,0))){
    SWIG_fail_ptr("rlIniFile_setText",1,SWIGTYPE_p_rlIniFile);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  (arg1)->setText((char const *)arg2,(char const *)arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIniFile_printf(lua_State* L) {
  int SWIG_arg = 0;
  rlIniFile *arg1 = (rlIniFile *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  int result;
  
  SWIG_check_num_args("rlIniFile::printf",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIniFile::printf",1,"rlIniFile *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlIniFile::printf",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlIniFile::printf",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("rlIniFile::printf",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIniFile,0))){
    SWIG_fail_ptr("rlIniFile_printf",1,SWIGTYPE_p_rlIniFile);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (int)(arg1)->printf((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIniFile_remove__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlIniFile *arg1 = (rlIniFile *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("rlIniFile::remove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIniFile::remove",1,"rlIniFile *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlIniFile::remove",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIniFile,0))){
    SWIG_fail_ptr("rlIniFile_remove",1,SWIGTYPE_p_rlIniFile);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->remove((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIniFile_remove__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlIniFile *arg1 = (rlIniFile *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("rlIniFile::remove",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIniFile::remove",1,"rlIniFile *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlIniFile::remove",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlIniFile::remove",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIniFile,0))){
    SWIG_fail_ptr("rlIniFile_remove",1,SWIGTYPE_p_rlIniFile);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->remove((char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIniFile_remove(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlIniFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_rlIniFile_remove__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlIniFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_rlIniFile_remove__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlIniFile_remove'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlIniFile::remove(char const *)\n"
    "    rlIniFile::remove(char const *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlIniFile_firstSection(lua_State* L) {
  int SWIG_arg = 0;
  rlIniFile *arg1 = (rlIniFile *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlIniFile::firstSection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIniFile::firstSection",1,"rlIniFile *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIniFile,0))){
    SWIG_fail_ptr("rlIniFile_firstSection",1,SWIGTYPE_p_rlIniFile);
  }
  
  result = (char *)(arg1)->firstSection();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIniFile_nextSection(lua_State* L) {
  int SWIG_arg = 0;
  rlIniFile *arg1 = (rlIniFile *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlIniFile::nextSection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIniFile::nextSection",1,"rlIniFile *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIniFile,0))){
    SWIG_fail_ptr("rlIniFile_nextSection",1,SWIGTYPE_p_rlIniFile);
  }
  
  result = (char *)(arg1)->nextSection();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIniFile_firstName(lua_State* L) {
  int SWIG_arg = 0;
  rlIniFile *arg1 = (rlIniFile *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlIniFile::firstName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIniFile::firstName",1,"rlIniFile *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlIniFile::firstName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIniFile,0))){
    SWIG_fail_ptr("rlIniFile_firstName",1,SWIGTYPE_p_rlIniFile);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (char *)(arg1)->firstName((char const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIniFile_nextName(lua_State* L) {
  int SWIG_arg = 0;
  rlIniFile *arg1 = (rlIniFile *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlIniFile::nextName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIniFile::nextName",1,"rlIniFile *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlIniFile::nextName",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIniFile,0))){
    SWIG_fail_ptr("rlIniFile_nextName",1,SWIGTYPE_p_rlIniFile);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (char *)(arg1)->nextName((char const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIniFile_setDefaultSection(lua_State* L) {
  int SWIG_arg = 0;
  rlIniFile *arg1 = (rlIniFile *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("rlIniFile::setDefaultSection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIniFile::setDefaultSection",1,"rlIniFile *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlIniFile::setDefaultSection",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIniFile,0))){
    SWIG_fail_ptr("rlIniFile_setDefaultSection",1,SWIGTYPE_p_rlIniFile);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setDefaultSection((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIniFile_defaultSection(lua_State* L) {
  int SWIG_arg = 0;
  rlIniFile *arg1 = (rlIniFile *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlIniFile::defaultSection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIniFile::defaultSection",1,"rlIniFile *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIniFile,0))){
    SWIG_fail_ptr("rlIniFile_defaultSection",1,SWIGTYPE_p_rlIniFile);
  }
  
  result = (char *)(arg1)->defaultSection();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIniFile_i18n__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlIniFile *arg1 = (rlIniFile *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlIniFile::i18n",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIniFile::i18n",1,"rlIniFile *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlIniFile::i18n",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlIniFile::i18n",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIniFile,0))){
    SWIG_fail_ptr("rlIniFile_i18n",1,SWIGTYPE_p_rlIniFile);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (char *)(arg1)->i18n((char const *)arg2,(char const *)arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIniFile_i18n__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlIniFile *arg1 = (rlIniFile *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlIniFile::i18n",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIniFile::i18n",1,"rlIniFile *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlIniFile::i18n",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIniFile,0))){
    SWIG_fail_ptr("rlIniFile_i18n",1,SWIGTYPE_p_rlIniFile);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (char *)(arg1)->i18n((char const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlIniFile_i18n(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlIniFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_rlIniFile_i18n__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlIniFile, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_rlIniFile_i18n__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlIniFile_i18n'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlIniFile::i18n(char const *,char const *)\n"
    "    rlIniFile::i18n(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlIniFile_tr(lua_State* L) {
  int SWIG_arg = 0;
  rlIniFile *arg1 = (rlIniFile *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlIniFile::tr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlIniFile::tr",1,"rlIniFile *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlIniFile::tr",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlIniFile,0))){
    SWIG_fail_ptr("rlIniFile_tr",1,SWIGTYPE_p_rlIniFile);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (char *)(arg1)->tr((char const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlIniFile(void *obj) {
rlIniFile *arg1 = (rlIniFile *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlIniFile(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlIniFile);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlIniFile_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rlIniFile_methods[]= {
    { "read", _wrap_rlIniFile_read},
    { "write", _wrap_rlIniFile_write},
    { "filename", _wrap_rlIniFile_filename},
    { "text", _wrap_rlIniFile_text},
    { "setText", _wrap_rlIniFile_setText},
    { "printf", _wrap_rlIniFile_printf},
    { "remove", _wrap_rlIniFile_remove},
    { "firstSection", _wrap_rlIniFile_firstSection},
    { "nextSection", _wrap_rlIniFile_nextSection},
    { "firstName", _wrap_rlIniFile_firstName},
    { "nextName", _wrap_rlIniFile_nextName},
    { "setDefaultSection", _wrap_rlIniFile_setDefaultSection},
    { "defaultSection", _wrap_rlIniFile_defaultSection},
    { "i18n", _wrap_rlIniFile_i18n},
    { "tr", _wrap_rlIniFile_tr},
    {0,0}
};
static swig_lua_method swig_rlIniFile_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlIniFile_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlIniFile_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlIniFile_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlIniFile_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlIniFile_Sf_SwigStatic = {
    "rlIniFile",
    swig_rlIniFile_Sf_SwigStatic_methods,
    swig_rlIniFile_Sf_SwigStatic_attributes,
    swig_rlIniFile_Sf_SwigStatic_constants,
    swig_rlIniFile_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlIniFile_bases[] = {0};
static const char *swig_rlIniFile_base_names[] = {0};
static swig_lua_class _wrap_class_rlIniFile = { "rlIniFile", "rlIniFile", &SWIGTYPE_p_rlIniFile,_proxy__wrap_new_rlIniFile, swig_delete_rlIniFile, swig_rlIniFile_methods, swig_rlIniFile_attributes, &swig_rlIniFile_Sf_SwigStatic, swig_rlIniFile_meta, swig_rlIniFile_bases, swig_rlIniFile_base_names };

static int _wrap_rlSetTranslator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSetTranslator",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlSetTranslator",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSetTranslator",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)rlSetTranslator((char const *)arg1,(char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSetTranslator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSetTranslator",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlSetTranslator",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (int)rlSetTranslator((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSetTranslator(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_rlSetTranslator__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_rlSetTranslator__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlSetTranslator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSetTranslator(char const *,char const *)\n"
    "    rlSetTranslator(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_rltranslate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rltranslate",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rltranslate",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rltranslate",2,"char **");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("rltranslate",2,SWIGTYPE_p_p_char);
  }
  
  result = (char *)rltranslate((char const *)arg1,arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rltranslate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rltranslate",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rltranslate",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (char *)rltranslate((char const *)arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rltranslate(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_rltranslate__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_p_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_rltranslate__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rltranslate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rltranslate(char const *,char **)\n"
    "    rltranslate(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_rltranslate2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rltranslate2",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rltranslate2",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rltranslate2",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("rltranslate2",3,"char **");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_char,0))){
    SWIG_fail_ptr("rltranslate2",3,SWIGTYPE_p_p_char);
  }
  
  result = (char *)rltranslate2((char const *)arg1,(char const *)arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rltranslate2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rltranslate2",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rltranslate2",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rltranslate2",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (char *)rltranslate2((char const *)arg1,(char const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rltranslate2(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_rltranslate2__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_p_char, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_rltranslate2__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rltranslate2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rltranslate2(char const *,char const *,char **)\n"
    "    rltranslate2(char const *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_new_rlInterpreter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  rlInterpreter *result = 0 ;
  
  SWIG_check_num_args("rlInterpreter::rlInterpreter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlInterpreter::rlInterpreter",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (rlInterpreter *)new rlInterpreter(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlInterpreter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlInterpreter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlInterpreter *result = 0 ;
  
  SWIG_check_num_args("rlInterpreter::rlInterpreter",0,0)
  result = (rlInterpreter *)new rlInterpreter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlInterpreter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlInterpreter(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_rlInterpreter__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_rlInterpreter__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlInterpreter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlInterpreter::rlInterpreter(int)\n"
    "    rlInterpreter::rlInterpreter()\n");
  lua_error(L);return 0;
}


static int _wrap_rlInterpreter_line_set(lua_State* L) {
  int SWIG_arg = 0;
  rlInterpreter *arg1 = (rlInterpreter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("rlInterpreter::line",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlInterpreter::line",1,"rlInterpreter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlInterpreter::line",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlInterpreter,0))){
    SWIG_fail_ptr("rlInterpreter_line_set",1,SWIGTYPE_p_rlInterpreter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    delete [] arg1->line;
    if (arg2) {
      arg1->line = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->line, (const char *)arg2);
    } else {
      arg1->line = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlInterpreter_line_get(lua_State* L) {
  int SWIG_arg = 0;
  rlInterpreter *arg1 = (rlInterpreter *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlInterpreter::line",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlInterpreter::line",1,"rlInterpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlInterpreter,0))){
    SWIG_fail_ptr("rlInterpreter_line_get",1,SWIGTYPE_p_rlInterpreter);
  }
  
  result = (char *) ((arg1)->line);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlInterpreter_isCommand(lua_State* L) {
  int SWIG_arg = 0;
  rlInterpreter *arg1 = (rlInterpreter *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlInterpreter::isCommand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlInterpreter::isCommand",1,"rlInterpreter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlInterpreter::isCommand",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlInterpreter,0))){
    SWIG_fail_ptr("rlInterpreter_isCommand",1,SWIGTYPE_p_rlInterpreter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->isCommand((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlInterpreter_copyStringParam(lua_State* L) {
  int SWIG_arg = 0;
  rlInterpreter *arg1 = (rlInterpreter *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("rlInterpreter::copyStringParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlInterpreter::copyStringParam",1,"rlInterpreter *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlInterpreter::copyStringParam",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlInterpreter::copyStringParam",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlInterpreter,0))){
    SWIG_fail_ptr("rlInterpreter_copyStringParam",1,SWIGTYPE_p_rlInterpreter);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->copyStringParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlInterpreter_maxchar(lua_State* L) {
  int SWIG_arg = 0;
  rlInterpreter *arg1 = (rlInterpreter *) 0 ;
  int result;
  
  SWIG_check_num_args("rlInterpreter::maxchar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlInterpreter::maxchar",1,"rlInterpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlInterpreter,0))){
    SWIG_fail_ptr("rlInterpreter_maxchar",1,SWIGTYPE_p_rlInterpreter);
  }
  
  result = (int)(arg1)->maxchar();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlInterpreter(void *obj) {
rlInterpreter *arg1 = (rlInterpreter *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlInterpreter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlInterpreter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlInterpreter_attributes[] = {
    { "line", _wrap_rlInterpreter_line_get, _wrap_rlInterpreter_line_set },
    {0,0,0}
};
static swig_lua_method swig_rlInterpreter_methods[]= {
    { "isCommand", _wrap_rlInterpreter_isCommand},
    { "copyStringParam", _wrap_rlInterpreter_copyStringParam},
    { "maxchar", _wrap_rlInterpreter_maxchar},
    {0,0}
};
static swig_lua_method swig_rlInterpreter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlInterpreter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlInterpreter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlInterpreter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlInterpreter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlInterpreter_Sf_SwigStatic = {
    "rlInterpreter",
    swig_rlInterpreter_Sf_SwigStatic_methods,
    swig_rlInterpreter_Sf_SwigStatic_attributes,
    swig_rlInterpreter_Sf_SwigStatic_constants,
    swig_rlInterpreter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlInterpreter_bases[] = {0};
static const char *swig_rlInterpreter_base_names[] = {0};
static swig_lua_class _wrap_class_rlInterpreter = { "rlInterpreter", "rlInterpreter", &SWIGTYPE_p_rlInterpreter,_proxy__wrap_new_rlInterpreter, swig_delete_rlInterpreter, swig_rlInterpreter_methods, swig_rlInterpreter_attributes, &swig_rlInterpreter_Sf_SwigStatic, swig_rlInterpreter_meta, swig_rlInterpreter_bases, swig_rlInterpreter_base_names };

static int _wrap_new_rlMailbox(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  rlMailbox *result = 0 ;
  
  SWIG_check_num_args("rlMailbox::rlMailbox",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlMailbox::rlMailbox",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (rlMailbox *)new rlMailbox((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlMailbox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlMailbox_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlMailbox *arg1 = (rlMailbox *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlMailbox::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlMailbox::write",1,"rlMailbox *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlMailbox::write",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlMailbox::write",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlMailbox,0))){
    SWIG_fail_ptr("rlMailbox_write",1,SWIGTYPE_p_rlMailbox);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlMailbox_write");
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->write((void const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlMailbox_printf(lua_State* L) {
  int SWIG_arg = 0;
  rlMailbox *arg1 = (rlMailbox *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  int result;
  
  SWIG_check_num_args("rlMailbox::printf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlMailbox::printf",1,"rlMailbox *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlMailbox::printf",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlMailbox,0))){
    SWIG_fail_ptr("rlMailbox_printf",1,SWIGTYPE_p_rlMailbox);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->printf((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlMailbox_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlMailbox *arg1 = (rlMailbox *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlMailbox::read",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlMailbox::read",1,"rlMailbox *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlMailbox::read",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlMailbox::read",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlMailbox::read",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlMailbox,0))){
    SWIG_fail_ptr("rlMailbox_read",1,SWIGTYPE_p_rlMailbox);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlMailbox_read");
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->read(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlMailbox_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlMailbox *arg1 = (rlMailbox *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlMailbox::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlMailbox::read",1,"rlMailbox *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlMailbox::read",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlMailbox::read",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlMailbox,0))){
    SWIG_fail_ptr("rlMailbox_read",1,SWIGTYPE_p_rlMailbox);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlMailbox_read");
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->read(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlMailbox_setReadBufferSize(lua_State* L) {
  int SWIG_arg = 0;
  rlMailbox *arg1 = (rlMailbox *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlMailbox::setReadBufferSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlMailbox::setReadBufferSize",1,"rlMailbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlMailbox::setReadBufferSize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlMailbox,0))){
    SWIG_fail_ptr("rlMailbox_setReadBufferSize",1,SWIGTYPE_p_rlMailbox);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->setReadBufferSize(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlMailbox_read__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  rlMailbox *arg1 = (rlMailbox *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlMailbox::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlMailbox::read",1,"rlMailbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlMailbox::read",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlMailbox,0))){
    SWIG_fail_ptr("rlMailbox_read",1,SWIGTYPE_p_rlMailbox);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(arg1)->read(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlMailbox_read__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  rlMailbox *arg1 = (rlMailbox *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlMailbox::read",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlMailbox::read",1,"rlMailbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlMailbox,0))){
    SWIG_fail_ptr("rlMailbox_read",1,SWIGTYPE_p_rlMailbox);
  }
  
  result = (char *)(arg1)->read();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlMailbox_read(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlMailbox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rlMailbox_read__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlMailbox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_rlMailbox_read__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlMailbox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_rlMailbox_read__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlMailbox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_rlMailbox_read__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlMailbox_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlMailbox::read(void *,int,int)\n"
    "    rlMailbox::read(void *,int)\n"
    "    rlMailbox::read(int)\n"
    "    rlMailbox::read()\n");
  lua_error(L);return 0;
}


static int _wrap_rlMailbox_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlMailbox *arg1 = (rlMailbox *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlMailbox::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlMailbox::write",1,"rlMailbox *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlMailbox::write",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlMailbox,0))){
    SWIG_fail_ptr("rlMailbox_write",1,SWIGTYPE_p_rlMailbox);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->write((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlMailbox_write(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlMailbox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_rlMailbox_write__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlMailbox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_rlMailbox_write__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlMailbox_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlMailbox::write(void const *,int)\n"
    "    rlMailbox::write(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlMailbox_clear(lua_State* L) {
  int SWIG_arg = 0;
  rlMailbox *arg1 = (rlMailbox *) 0 ;
  
  SWIG_check_num_args("rlMailbox::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlMailbox::clear",1,"rlMailbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlMailbox,0))){
    SWIG_fail_ptr("rlMailbox_clear",1,SWIGTYPE_p_rlMailbox);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlMailbox_status_set(lua_State* L) {
  int SWIG_arg = 0;
  rlMailbox *arg1 = (rlMailbox *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlMailbox::status",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlMailbox::status",1,"rlMailbox *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlMailbox::status",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlMailbox,0))){
    SWIG_fail_ptr("rlMailbox_status_set",1,SWIGTYPE_p_rlMailbox);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->status = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlMailbox_status_get(lua_State* L) {
  int SWIG_arg = 0;
  rlMailbox *arg1 = (rlMailbox *) 0 ;
  int result;
  
  SWIG_check_num_args("rlMailbox::status",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlMailbox::status",1,"rlMailbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlMailbox,0))){
    SWIG_fail_ptr("rlMailbox_status_get",1,SWIGTYPE_p_rlMailbox);
  }
  
  result = (int) ((arg1)->status);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlMailbox_name_set(lua_State* L) {
  int SWIG_arg = 0;
  rlMailbox *arg1 = (rlMailbox *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("rlMailbox::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlMailbox::name",1,"rlMailbox *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlMailbox::name",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlMailbox,0))){
    SWIG_fail_ptr("rlMailbox_name_set",1,SWIGTYPE_p_rlMailbox);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlMailbox_name_get(lua_State* L) {
  int SWIG_arg = 0;
  rlMailbox *arg1 = (rlMailbox *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlMailbox::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlMailbox::name",1,"rlMailbox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlMailbox,0))){
    SWIG_fail_ptr("rlMailbox_name_get",1,SWIGTYPE_p_rlMailbox);
  }
  
  result = (char *) ((arg1)->name);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlMailbox(void *obj) {
rlMailbox *arg1 = (rlMailbox *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlMailbox(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlMailbox);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlMailbox_attributes[] = {
    { "status", _wrap_rlMailbox_status_get, _wrap_rlMailbox_status_set },
    { "name", _wrap_rlMailbox_name_get, _wrap_rlMailbox_name_set },
    {0,0,0}
};
static swig_lua_method swig_rlMailbox_methods[]= {
    { "printf", _wrap_rlMailbox_printf},
    { "setReadBufferSize", _wrap_rlMailbox_setReadBufferSize},
    { "read", _wrap_rlMailbox_read},
    { "write", _wrap_rlMailbox_write},
    { "clear", _wrap_rlMailbox_clear},
    {0,0}
};
static swig_lua_method swig_rlMailbox_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlMailbox_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlMailbox_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("MAILBOX_ERROR", rlMailbox::MAILBOX_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("MAILBOX_FULL", rlMailbox::MAILBOX_FULL)},
    {SWIG_LUA_CONSTTAB_INT("WAIT", rlMailbox::WAIT)},
    {SWIG_LUA_CONSTTAB_INT("NOWAIT", rlMailbox::NOWAIT)},
    {SWIG_LUA_CONSTTAB_INT("MAX_MAILBOX", rlMailbox::MAX_MAILBOX)},
    {SWIG_LUA_CONSTTAB_INT("OK", rlMailbox::OK)},
    {SWIG_LUA_CONSTTAB_INT("COULD_NOT_CREATE_MAILBOX", rlMailbox::COULD_NOT_CREATE_MAILBOX)},
    {SWIG_LUA_CONSTTAB_INT("COULD_NOT_GET_KEY", rlMailbox::COULD_NOT_GET_KEY)},
    {SWIG_LUA_CONSTTAB_INT("COULD_NOT_GET_CHAN_ID", rlMailbox::COULD_NOT_GET_CHAN_ID)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlMailbox_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlMailbox_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlMailbox_Sf_SwigStatic = {
    "rlMailbox",
    swig_rlMailbox_Sf_SwigStatic_methods,
    swig_rlMailbox_Sf_SwigStatic_attributes,
    swig_rlMailbox_Sf_SwigStatic_constants,
    swig_rlMailbox_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlMailbox_bases[] = {0};
static const char *swig_rlMailbox_base_names[] = {0};
static swig_lua_class _wrap_class_rlMailbox = { "rlMailbox", "rlMailbox", &SWIGTYPE_p_rlMailbox,_proxy__wrap_new_rlMailbox, swig_delete_rlMailbox, swig_rlMailbox_methods, swig_rlMailbox_attributes, &swig_rlMailbox_Sf_SwigStatic, swig_rlMailbox_meta, swig_rlMailbox_bases, swig_rlMailbox_base_names };

static int _wrap_new_rlModbusClient(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  rlModbusClient *result = 0 ;
  
  SWIG_check_num_args("rlModbusClient::rlModbusClient",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlModbusClient::rlModbusClient",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlModbusClient::rlModbusClient",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbusClient::rlModbusClient",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (rlModbusClient *)new rlModbusClient((char const *)arg1,(char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlModbusClient,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbusClient_write(lua_State* L) {
  int SWIG_arg = 0;
  rlModbusClient *arg1 = (rlModbusClient *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  int arg5 ;
  int result;
  
  SWIG_check_num_args("rlModbusClient::write",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbusClient::write",1,"rlModbusClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbusClient::write",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbusClient::write",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlModbusClient::write",4,"unsigned char const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlModbusClient::write",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbusClient,0))){
    SWIG_fail_ptr("rlModbusClient_write",1,SWIGTYPE_p_rlModbusClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlModbusClient_write",4,SWIGTYPE_p_unsigned_char);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (int)(arg1)->write(arg2,arg3,(unsigned char const *)arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbusClient_writeSingleCoil(lua_State* L) {
  int SWIG_arg = 0;
  rlModbusClient *arg1 = (rlModbusClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlModbusClient::writeSingleCoil",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbusClient::writeSingleCoil",1,"rlModbusClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbusClient::writeSingleCoil",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbusClient::writeSingleCoil",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlModbusClient::writeSingleCoil",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbusClient,0))){
    SWIG_fail_ptr("rlModbusClient_writeSingleCoil",1,SWIGTYPE_p_rlModbusClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->writeSingleCoil(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbusClient_writeMultipleCoils(lua_State* L) {
  int SWIG_arg = 0;
  rlModbusClient *arg1 = (rlModbusClient *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  int arg5 ;
  int result;
  
  SWIG_check_num_args("rlModbusClient::writeMultipleCoils",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbusClient::writeMultipleCoils",1,"rlModbusClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbusClient::writeMultipleCoils",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbusClient::writeMultipleCoils",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlModbusClient::writeMultipleCoils",4,"unsigned char const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlModbusClient::writeMultipleCoils",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbusClient,0))){
    SWIG_fail_ptr("rlModbusClient_writeMultipleCoils",1,SWIGTYPE_p_rlModbusClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlModbusClient_writeMultipleCoils",4,SWIGTYPE_p_unsigned_char);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (int)(arg1)->writeMultipleCoils(arg2,arg3,(unsigned char const *)arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbusClient_writePresetSingleRegister(lua_State* L) {
  int SWIG_arg = 0;
  rlModbusClient *arg1 = (rlModbusClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlModbusClient::writePresetSingleRegister",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbusClient::writePresetSingleRegister",1,"rlModbusClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbusClient::writePresetSingleRegister",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbusClient::writePresetSingleRegister",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlModbusClient::writePresetSingleRegister",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbusClient,0))){
    SWIG_fail_ptr("rlModbusClient_writePresetSingleRegister",1,SWIGTYPE_p_rlModbusClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->writePresetSingleRegister(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbusClient_writePresetMultipleRegisters(lua_State* L) {
  int SWIG_arg = 0;
  rlModbusClient *arg1 = (rlModbusClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  int result;
  
  SWIG_check_num_args("rlModbusClient::writePresetMultipleRegisters",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbusClient::writePresetMultipleRegisters",1,"rlModbusClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbusClient::writePresetMultipleRegisters",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbusClient::writePresetMultipleRegisters",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlModbusClient::writePresetMultipleRegisters",4,"int const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlModbusClient::writePresetMultipleRegisters",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbusClient,0))){
    SWIG_fail_ptr("rlModbusClient_writePresetMultipleRegisters",1,SWIGTYPE_p_rlModbusClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlModbusClient_writePresetMultipleRegisters",4,SWIGTYPE_p_int);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (int)(arg1)->writePresetMultipleRegisters(arg2,arg3,(int const *)arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbusClient_readBit(lua_State* L) {
  int SWIG_arg = 0;
  rlModbusClient *arg1 = (rlModbusClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlModbusClient::readBit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbusClient::readBit",1,"rlModbusClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbusClient::readBit",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbusClient::readBit",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbusClient,0))){
    SWIG_fail_ptr("rlModbusClient_readBit",1,SWIGTYPE_p_rlModbusClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->readBit(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbusClient_readByte(lua_State* L) {
  int SWIG_arg = 0;
  rlModbusClient *arg1 = (rlModbusClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlModbusClient::readByte",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbusClient::readByte",1,"rlModbusClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbusClient::readByte",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbusClient::readByte",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbusClient,0))){
    SWIG_fail_ptr("rlModbusClient_readByte",1,SWIGTYPE_p_rlModbusClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->readByte(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbusClient_readShort(lua_State* L) {
  int SWIG_arg = 0;
  rlModbusClient *arg1 = (rlModbusClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlModbusClient::readShort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbusClient::readShort",1,"rlModbusClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbusClient::readShort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbusClient::readShort",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbusClient,0))){
    SWIG_fail_ptr("rlModbusClient_readShort",1,SWIGTYPE_p_rlModbusClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->readShort(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlModbusClient(void *obj) {
rlModbusClient *arg1 = (rlModbusClient *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlModbusClient(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlModbusClient);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlModbusClient_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rlModbusClient_methods[]= {
    { "write", _wrap_rlModbusClient_write},
    { "writeSingleCoil", _wrap_rlModbusClient_writeSingleCoil},
    { "writeMultipleCoils", _wrap_rlModbusClient_writeMultipleCoils},
    { "writePresetSingleRegister", _wrap_rlModbusClient_writePresetSingleRegister},
    { "writePresetMultipleRegisters", _wrap_rlModbusClient_writePresetMultipleRegisters},
    { "readBit", _wrap_rlModbusClient_readBit},
    { "readByte", _wrap_rlModbusClient_readByte},
    { "readShort", _wrap_rlModbusClient_readShort},
    {0,0}
};
static swig_lua_method swig_rlModbusClient_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlModbusClient_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlModbusClient_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlModbusClient_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlModbusClient_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlModbusClient_Sf_SwigStatic = {
    "rlModbusClient",
    swig_rlModbusClient_Sf_SwigStatic_methods,
    swig_rlModbusClient_Sf_SwigStatic_attributes,
    swig_rlModbusClient_Sf_SwigStatic_constants,
    swig_rlModbusClient_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlModbusClient_bases[] = {0,0,0};
static const char *swig_rlModbusClient_base_names[] = {"rlMailbox *","rlSharedMemory *",0};
static swig_lua_class _wrap_class_rlModbusClient = { "rlModbusClient", "rlModbusClient", &SWIGTYPE_p_rlModbusClient,_proxy__wrap_new_rlModbusClient, swig_delete_rlModbusClient, swig_rlModbusClient_methods, swig_rlModbusClient_attributes, &swig_rlModbusClient_Sf_SwigStatic, swig_rlModbusClient_meta, swig_rlModbusClient_bases, swig_rlModbusClient_base_names };

static int _wrap_new_rlModbus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  long arg1 ;
  int arg2 ;
  char arg3 ;
  rlModbus *result = 0 ;
  
  SWIG_check_num_args("rlModbus::rlModbus",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlModbus::rlModbus",1,"long");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::rlModbus",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlModbus::rlModbus",3,"char");
  arg1 = (long)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  result = (rlModbus *)new rlModbus(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlModbus,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlModbus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  long arg1 ;
  int arg2 ;
  rlModbus *result = 0 ;
  
  SWIG_check_num_args("rlModbus::rlModbus",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlModbus::rlModbus",1,"long");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::rlModbus",2,"int");
  arg1 = (long)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (rlModbus *)new rlModbus(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlModbus,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlModbus__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  long arg1 ;
  rlModbus *result = 0 ;
  
  SWIG_check_num_args("rlModbus::rlModbus",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlModbus::rlModbus",1,"long");
  arg1 = (long)lua_tonumber(L, 1);
  result = (rlModbus *)new rlModbus(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlModbus,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlModbus__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *result = 0 ;
  
  SWIG_check_num_args("rlModbus::rlModbus",0,0)
  result = (rlModbus *)new rlModbus();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlModbus,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlModbus(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_rlModbus__SWIG_3(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_rlModbus__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_rlModbus__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_new_rlModbus__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlModbus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlModbus::rlModbus(long,int,char)\n"
    "    rlModbus::rlModbus(long,int)\n"
    "    rlModbus::rlModbus(long)\n"
    "    rlModbus::rlModbus()\n");
  lua_error(L);return 0;
}


static int _wrap_rlModbus_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int result;
  
  SWIG_check_num_args("rlModbus::write",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::write",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::write",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbus::write",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlModbus::write",4,"unsigned char const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlModbus::write",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("rlModbus::write",6,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_write",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlModbus_write",4,SWIGTYPE_p_unsigned_char);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlModbus_write",6,SWIGTYPE_p_int);
  }
  
  result = (int)(arg1)->write(arg2,arg3,(unsigned char const *)arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  int arg5 ;
  int result;
  
  SWIG_check_num_args("rlModbus::write",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::write",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::write",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbus::write",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlModbus::write",4,"unsigned char const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlModbus::write",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_write",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlModbus_write",4,SWIGTYPE_p_unsigned_char);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (int)(arg1)->write(arg2,arg3,(unsigned char const *)arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_write(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_rlModbus_write__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_rlModbus_write__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlModbus_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlModbus::write(int,int,unsigned char const *,int,int *)\n"
    "    rlModbus::write(int,int,unsigned char const *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_rlModbus_request(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  SWIG_check_num_args("rlModbus::request",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::request",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::request",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbus::request",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlModbus::request",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlModbus::request",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_request",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (int)(arg1)->request(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_response__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  int arg5 ;
  int result;
  
  SWIG_check_num_args("rlModbus::response",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::response",1,"rlModbus *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlModbus::response",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("rlModbus::response",3,"int *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlModbus::response",4,"unsigned char *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlModbus::response",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_response",1,SWIGTYPE_p_rlModbus);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlModbus_response",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlModbus_response",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlModbus_response",4,SWIGTYPE_p_unsigned_char);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (int)(arg1)->response(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_response__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlModbus::response",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::response",1,"rlModbus *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlModbus::response",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("rlModbus::response",3,"int *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlModbus::response",4,"unsigned char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_response",1,SWIGTYPE_p_rlModbus);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlModbus_response",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlModbus_response",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlModbus_response",4,SWIGTYPE_p_unsigned_char);
  }
  
  result = (int)(arg1)->response(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_response(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_rlModbus_response__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_rlModbus_response__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlModbus_response'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlModbus::response(int *,int *,unsigned char *,int)\n"
    "    rlModbus::response(int *,int *,unsigned char *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlModbus_readRequest__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int result;
  
  SWIG_check_num_args("rlModbus::readRequest",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::readRequest",1,"rlModbus *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlModbus::readRequest",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("rlModbus::readRequest",3,"int *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlModbus::readRequest",4,"unsigned char *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlModbus::readRequest",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("rlModbus::readRequest",6,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_readRequest",1,SWIGTYPE_p_rlModbus);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlModbus_readRequest",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlModbus_readRequest",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlModbus_readRequest",4,SWIGTYPE_p_unsigned_char);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlModbus_readRequest",6,SWIGTYPE_p_int);
  }
  
  result = (int)(arg1)->readRequest(arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_readRequest__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  int arg5 ;
  int result;
  
  SWIG_check_num_args("rlModbus::readRequest",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::readRequest",1,"rlModbus *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlModbus::readRequest",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("rlModbus::readRequest",3,"int *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlModbus::readRequest",4,"unsigned char *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlModbus::readRequest",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_readRequest",1,SWIGTYPE_p_rlModbus);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlModbus_readRequest",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlModbus_readRequest",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlModbus_readRequest",4,SWIGTYPE_p_unsigned_char);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (int)(arg1)->readRequest(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_readRequest__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlModbus::readRequest",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::readRequest",1,"rlModbus *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlModbus::readRequest",2,"int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("rlModbus::readRequest",3,"int *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("rlModbus::readRequest",4,"unsigned char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_readRequest",1,SWIGTYPE_p_rlModbus);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlModbus_readRequest",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlModbus_readRequest",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlModbus_readRequest",4,SWIGTYPE_p_unsigned_char);
  }
  
  result = (int)(arg1)->readRequest(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_readRequest(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_rlModbus_readRequest__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_rlModbus_readRequest__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_int, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_rlModbus_readRequest__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlModbus_readRequest'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlModbus::readRequest(int *,int *,unsigned char *,int,int *)\n"
    "    rlModbus::readRequest(int *,int *,unsigned char *,int)\n"
    "    rlModbus::readRequest(int *,int *,unsigned char *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlModbus_registerSocket(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  rlSocket *arg2 = (rlSocket *) 0 ;
  
  SWIG_check_num_args("rlModbus::registerSocket",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::registerSocket",1,"rlModbus *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlModbus::registerSocket",2,"rlSocket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_registerSocket",1,SWIGTYPE_p_rlModbus);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSocket,0))){
    SWIG_fail_ptr("rlModbus_registerSocket",2,SWIGTYPE_p_rlSocket);
  }
  
  (arg1)->registerSocket(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_registerSerial(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  rlSerial *arg2 = (rlSerial *) 0 ;
  
  SWIG_check_num_args("rlModbus::registerSerial",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::registerSerial",1,"rlModbus *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlModbus::registerSerial",2,"rlSerial *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_registerSerial",1,SWIGTYPE_p_rlModbus);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rlModbus_registerSerial",2,SWIGTYPE_p_rlSerial);
  }
  
  (arg1)->registerSerial(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_data2int(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlModbus::data2int",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::data2int",1,"rlModbus *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlModbus::data2int",2,"unsigned char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_data2int",1,SWIGTYPE_p_rlModbus);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlModbus_data2int",2,SWIGTYPE_p_unsigned_char);
  }
  
  result = (int)(arg1)->data2int((unsigned char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_int2data(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlModbus::int2data",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::int2data",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::int2data",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("rlModbus::int2data",3,"unsigned char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_int2data",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlModbus_int2data",3,SWIGTYPE_p_unsigned_char);
  }
  
  result = (int)(arg1)->int2data(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_intsize(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int result;
  
  SWIG_check_num_args("rlModbus::intsize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::intsize",1,"rlModbus *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_intsize",1,SWIGTYPE_p_rlModbus);
  }
  
  result = (int)(arg1)->intsize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_autoreconnectSocket_set(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlModbus::autoreconnectSocket",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::autoreconnectSocket",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::autoreconnectSocket",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_autoreconnectSocket_set",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->autoreconnectSocket = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_autoreconnectSocket_get(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int result;
  
  SWIG_check_num_args("rlModbus::autoreconnectSocket",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::autoreconnectSocket",1,"rlModbus *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_autoreconnectSocket_get",1,SWIGTYPE_p_rlModbus);
  }
  
  result = (int) ((arg1)->autoreconnectSocket);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_readCoilStatus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  int arg6 ;
  int result;
  
  SWIG_check_num_args("rlModbus::readCoilStatus",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::readCoilStatus",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::readCoilStatus",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbus::readCoilStatus",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlModbus::readCoilStatus",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("rlModbus::readCoilStatus",5,"unsigned char *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlModbus::readCoilStatus",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_readCoilStatus",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlModbus_readCoilStatus",5,SWIGTYPE_p_unsigned_char);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  result = (int)(arg1)->readCoilStatus(arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_readCoilStatus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlModbus::readCoilStatus",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::readCoilStatus",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::readCoilStatus",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbus::readCoilStatus",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlModbus::readCoilStatus",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("rlModbus::readCoilStatus",5,"unsigned char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_readCoilStatus",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlModbus_readCoilStatus",5,SWIGTYPE_p_unsigned_char);
  }
  
  result = (int)(arg1)->readCoilStatus(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_readCoilStatus(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_rlModbus_readCoilStatus__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_rlModbus_readCoilStatus__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlModbus_readCoilStatus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlModbus::readCoilStatus(int,int,int,unsigned char *,int)\n"
    "    rlModbus::readCoilStatus(int,int,int,unsigned char *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlModbus_readInputStatus__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  int arg6 ;
  int result;
  
  SWIG_check_num_args("rlModbus::readInputStatus",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::readInputStatus",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::readInputStatus",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbus::readInputStatus",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlModbus::readInputStatus",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("rlModbus::readInputStatus",5,"unsigned char *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlModbus::readInputStatus",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_readInputStatus",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlModbus_readInputStatus",5,SWIGTYPE_p_unsigned_char);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  result = (int)(arg1)->readInputStatus(arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_readInputStatus__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlModbus::readInputStatus",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::readInputStatus",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::readInputStatus",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbus::readInputStatus",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlModbus::readInputStatus",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("rlModbus::readInputStatus",5,"unsigned char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_readInputStatus",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlModbus_readInputStatus",5,SWIGTYPE_p_unsigned_char);
  }
  
  result = (int)(arg1)->readInputStatus(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_readInputStatus(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_rlModbus_readInputStatus__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_rlModbus_readInputStatus__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlModbus_readInputStatus'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlModbus::readInputStatus(int,int,int,unsigned char *,int)\n"
    "    rlModbus::readInputStatus(int,int,int,unsigned char *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlModbus_readHoldingRegisters__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  int result;
  
  SWIG_check_num_args("rlModbus::readHoldingRegisters",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::readHoldingRegisters",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::readHoldingRegisters",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbus::readHoldingRegisters",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlModbus::readHoldingRegisters",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("rlModbus::readHoldingRegisters",5,"int *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlModbus::readHoldingRegisters",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_readHoldingRegisters",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlModbus_readHoldingRegisters",5,SWIGTYPE_p_int);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  result = (int)(arg1)->readHoldingRegisters(arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_readHoldingRegisters__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int result;
  
  SWIG_check_num_args("rlModbus::readHoldingRegisters",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::readHoldingRegisters",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::readHoldingRegisters",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbus::readHoldingRegisters",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlModbus::readHoldingRegisters",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("rlModbus::readHoldingRegisters",5,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_readHoldingRegisters",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlModbus_readHoldingRegisters",5,SWIGTYPE_p_int);
  }
  
  result = (int)(arg1)->readHoldingRegisters(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_readHoldingRegisters(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_rlModbus_readHoldingRegisters__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_rlModbus_readHoldingRegisters__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlModbus_readHoldingRegisters'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlModbus::readHoldingRegisters(int,int,int,int *,int)\n"
    "    rlModbus::readHoldingRegisters(int,int,int,int *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlModbus_readInputRegisters__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  int result;
  
  SWIG_check_num_args("rlModbus::readInputRegisters",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::readInputRegisters",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::readInputRegisters",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbus::readInputRegisters",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlModbus::readInputRegisters",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("rlModbus::readInputRegisters",5,"int *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlModbus::readInputRegisters",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_readInputRegisters",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlModbus_readInputRegisters",5,SWIGTYPE_p_int);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  result = (int)(arg1)->readInputRegisters(arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_readInputRegisters__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int result;
  
  SWIG_check_num_args("rlModbus::readInputRegisters",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::readInputRegisters",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::readInputRegisters",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbus::readInputRegisters",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlModbus::readInputRegisters",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("rlModbus::readInputRegisters",5,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_readInputRegisters",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlModbus_readInputRegisters",5,SWIGTYPE_p_int);
  }
  
  result = (int)(arg1)->readInputRegisters(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_readInputRegisters(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_rlModbus_readInputRegisters__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_rlModbus_readInputRegisters__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlModbus_readInputRegisters'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlModbus::readInputRegisters(int,int,int,int *,int)\n"
    "    rlModbus::readInputRegisters(int,int,int,int *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlModbus_forceSingleCoil__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  SWIG_check_num_args("rlModbus::forceSingleCoil",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::forceSingleCoil",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::forceSingleCoil",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbus::forceSingleCoil",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlModbus::forceSingleCoil",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlModbus::forceSingleCoil",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_forceSingleCoil",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (int)(arg1)->forceSingleCoil(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_forceSingleCoil__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlModbus::forceSingleCoil",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::forceSingleCoil",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::forceSingleCoil",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbus::forceSingleCoil",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlModbus::forceSingleCoil",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_forceSingleCoil",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->forceSingleCoil(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_forceSingleCoil(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_rlModbus_forceSingleCoil__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_rlModbus_forceSingleCoil__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlModbus_forceSingleCoil'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlModbus::forceSingleCoil(int,int,int,int)\n"
    "    rlModbus::forceSingleCoil(int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_rlModbus_presetSingleRegister__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  SWIG_check_num_args("rlModbus::presetSingleRegister",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::presetSingleRegister",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::presetSingleRegister",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbus::presetSingleRegister",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlModbus::presetSingleRegister",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlModbus::presetSingleRegister",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_presetSingleRegister",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (int)(arg1)->presetSingleRegister(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_presetSingleRegister__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlModbus::presetSingleRegister",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::presetSingleRegister",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::presetSingleRegister",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbus::presetSingleRegister",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlModbus::presetSingleRegister",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_presetSingleRegister",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->presetSingleRegister(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_presetSingleRegister(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_rlModbus_presetSingleRegister__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_rlModbus_presetSingleRegister__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlModbus_presetSingleRegister'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlModbus::presetSingleRegister(int,int,int,int)\n"
    "    rlModbus::presetSingleRegister(int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_rlModbus_forceMultipleCoils__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  int arg6 ;
  int result;
  
  SWIG_check_num_args("rlModbus::forceMultipleCoils",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::forceMultipleCoils",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::forceMultipleCoils",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbus::forceMultipleCoils",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlModbus::forceMultipleCoils",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("rlModbus::forceMultipleCoils",5,"unsigned char *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlModbus::forceMultipleCoils",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_forceMultipleCoils",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlModbus_forceMultipleCoils",5,SWIGTYPE_p_unsigned_char);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  result = (int)(arg1)->forceMultipleCoils(arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_forceMultipleCoils__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlModbus::forceMultipleCoils",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::forceMultipleCoils",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::forceMultipleCoils",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbus::forceMultipleCoils",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlModbus::forceMultipleCoils",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("rlModbus::forceMultipleCoils",5,"unsigned char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_forceMultipleCoils",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlModbus_forceMultipleCoils",5,SWIGTYPE_p_unsigned_char);
  }
  
  result = (int)(arg1)->forceMultipleCoils(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_forceMultipleCoils(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_rlModbus_forceMultipleCoils__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_rlModbus_forceMultipleCoils__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlModbus_forceMultipleCoils'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlModbus::forceMultipleCoils(int,int,int,unsigned char *,int)\n"
    "    rlModbus::forceMultipleCoils(int,int,int,unsigned char *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlModbus_presetMultipleRegisters__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  int result;
  
  SWIG_check_num_args("rlModbus::presetMultipleRegisters",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::presetMultipleRegisters",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::presetMultipleRegisters",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbus::presetMultipleRegisters",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlModbus::presetMultipleRegisters",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("rlModbus::presetMultipleRegisters",5,"int *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlModbus::presetMultipleRegisters",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_presetMultipleRegisters",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlModbus_presetMultipleRegisters",5,SWIGTYPE_p_int);
  }
  
  arg6 = (int)lua_tonumber(L, 6);
  result = (int)(arg1)->presetMultipleRegisters(arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_presetMultipleRegisters__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlModbus *arg1 = (rlModbus *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int result;
  
  SWIG_check_num_args("rlModbus::presetMultipleRegisters",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlModbus::presetMultipleRegisters",1,"rlModbus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlModbus::presetMultipleRegisters",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlModbus::presetMultipleRegisters",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlModbus::presetMultipleRegisters",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("rlModbus::presetMultipleRegisters",5,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlModbus,0))){
    SWIG_fail_ptr("rlModbus_presetMultipleRegisters",1,SWIGTYPE_p_rlModbus);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlModbus_presetMultipleRegisters",5,SWIGTYPE_p_int);
  }
  
  result = (int)(arg1)->presetMultipleRegisters(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlModbus_presetMultipleRegisters(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_rlModbus_presetMultipleRegisters__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlModbus, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_int, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_rlModbus_presetMultipleRegisters__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlModbus_presetMultipleRegisters'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlModbus::presetMultipleRegisters(int,int,int,int *,int)\n"
    "    rlModbus::presetMultipleRegisters(int,int,int,int *)\n");
  lua_error(L);return 0;
}


static void swig_delete_rlModbus(void *obj) {
rlModbus *arg1 = (rlModbus *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlModbus(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlModbus);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlModbus_attributes[] = {
    { "autoreconnectSocket", _wrap_rlModbus_autoreconnectSocket_get, _wrap_rlModbus_autoreconnectSocket_set },
    {0,0,0}
};
static swig_lua_method swig_rlModbus_methods[]= {
    { "write", _wrap_rlModbus_write},
    { "request", _wrap_rlModbus_request},
    { "response", _wrap_rlModbus_response},
    { "readRequest", _wrap_rlModbus_readRequest},
    { "registerSocket", _wrap_rlModbus_registerSocket},
    { "registerSerial", _wrap_rlModbus_registerSerial},
    { "data2int", _wrap_rlModbus_data2int},
    { "int2data", _wrap_rlModbus_int2data},
    { "intsize", _wrap_rlModbus_intsize},
    { "readCoilStatus", _wrap_rlModbus_readCoilStatus},
    { "readInputStatus", _wrap_rlModbus_readInputStatus},
    { "readHoldingRegisters", _wrap_rlModbus_readHoldingRegisters},
    { "readInputRegisters", _wrap_rlModbus_readInputRegisters},
    { "forceSingleCoil", _wrap_rlModbus_forceSingleCoil},
    { "presetSingleRegister", _wrap_rlModbus_presetSingleRegister},
    { "forceMultipleCoils", _wrap_rlModbus_forceMultipleCoils},
    { "presetMultipleRegisters", _wrap_rlModbus_presetMultipleRegisters},
    {0,0}
};
static swig_lua_method swig_rlModbus_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlModbus_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlModbus_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("MODBUS_CHECKSUM_ERROR", rlModbus::MODBUS_CHECKSUM_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("MODBUS_ERROR", rlModbus::MODBUS_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("MODBUS_SUCCESS", rlModbus::MODBUS_SUCCESS)},
    {SWIG_LUA_CONSTTAB_INT("MODBUS_RTU", rlModbus::MODBUS_RTU)},
    {SWIG_LUA_CONSTTAB_INT("MODBUS_ASCII", rlModbus::MODBUS_ASCII)},
    {SWIG_LUA_CONSTTAB_INT("ReadCoilStatus", rlModbus::ReadCoilStatus)},
    {SWIG_LUA_CONSTTAB_INT("ReadInputStatus", rlModbus::ReadInputStatus)},
    {SWIG_LUA_CONSTTAB_INT("ReadHoldingRegisters", rlModbus::ReadHoldingRegisters)},
    {SWIG_LUA_CONSTTAB_INT("ReadInputRegisters", rlModbus::ReadInputRegisters)},
    {SWIG_LUA_CONSTTAB_INT("ForceSingleCoil", rlModbus::ForceSingleCoil)},
    {SWIG_LUA_CONSTTAB_INT("PresetSingleRegister", rlModbus::PresetSingleRegister)},
    {SWIG_LUA_CONSTTAB_INT("ReadExceptionStatus", rlModbus::ReadExceptionStatus)},
    {SWIG_LUA_CONSTTAB_INT("FetchCommEventCtr", rlModbus::FetchCommEventCtr)},
    {SWIG_LUA_CONSTTAB_INT("FetchCommEventLog", rlModbus::FetchCommEventLog)},
    {SWIG_LUA_CONSTTAB_INT("ForceMultipleCoils", rlModbus::ForceMultipleCoils)},
    {SWIG_LUA_CONSTTAB_INT("PresetMultipleRegs", rlModbus::PresetMultipleRegs)},
    {SWIG_LUA_CONSTTAB_INT("ReportSlaveID", rlModbus::ReportSlaveID)},
    {SWIG_LUA_CONSTTAB_INT("ReadGeneralReference", rlModbus::ReadGeneralReference)},
    {SWIG_LUA_CONSTTAB_INT("WriteGeneralReference", rlModbus::WriteGeneralReference)},
    {SWIG_LUA_CONSTTAB_INT("MaskWrite4XRegisters", rlModbus::MaskWrite4XRegisters)},
    {SWIG_LUA_CONSTTAB_INT("ReadWrite4XRegisters", rlModbus::ReadWrite4XRegisters)},
    {SWIG_LUA_CONSTTAB_INT("ReadFifoQueue", rlModbus::ReadFifoQueue)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlModbus_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlModbus_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlModbus_Sf_SwigStatic = {
    "rlModbus",
    swig_rlModbus_Sf_SwigStatic_methods,
    swig_rlModbus_Sf_SwigStatic_attributes,
    swig_rlModbus_Sf_SwigStatic_constants,
    swig_rlModbus_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlModbus_bases[] = {0};
static const char *swig_rlModbus_base_names[] = {0};
static swig_lua_class _wrap_class_rlModbus = { "rlModbus", "rlModbus", &SWIGTYPE_p_rlModbus,_proxy__wrap_new_rlModbus, swig_delete_rlModbus, swig_rlModbus_methods, swig_rlModbus_attributes, &swig_rlModbus_Sf_SwigStatic, swig_rlModbus_meta, swig_rlModbus_bases, swig_rlModbus_base_names };

static int _wrap_new_rlOpcXmlDa__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  rlOpcXmlDa *result = 0 ;
  
  SWIG_check_num_args("rlOpcXmlDa::rlOpcXmlDa",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlOpcXmlDa::rlOpcXmlDa",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlOpcXmlDa::rlOpcXmlDa",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlOpcXmlDa::rlOpcXmlDa",3,"long");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (long)lua_tonumber(L, 3);
  result = (rlOpcXmlDa *)new rlOpcXmlDa((char const *)arg1,(char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlOpcXmlDa,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlOpcXmlDa__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  rlOpcXmlDa *result = 0 ;
  
  SWIG_check_num_args("rlOpcXmlDa::rlOpcXmlDa",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlOpcXmlDa::rlOpcXmlDa",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlOpcXmlDa::rlOpcXmlDa",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (rlOpcXmlDa *)new rlOpcXmlDa((char const *)arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlOpcXmlDa,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlOpcXmlDa__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  rlOpcXmlDa *result = 0 ;
  
  SWIG_check_num_args("rlOpcXmlDa::rlOpcXmlDa",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlOpcXmlDa::rlOpcXmlDa",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (rlOpcXmlDa *)new rlOpcXmlDa((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlOpcXmlDa,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlOpcXmlDa__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  rlOpcXmlDa *result = 0 ;
  
  SWIG_check_num_args("rlOpcXmlDa::rlOpcXmlDa",0,0)
  result = (rlOpcXmlDa *)new rlOpcXmlDa();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlOpcXmlDa,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlOpcXmlDa(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_rlOpcXmlDa__SWIG_3(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_rlOpcXmlDa__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_rlOpcXmlDa__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_rlOpcXmlDa__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlOpcXmlDa'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlOpcXmlDa::rlOpcXmlDa(char const *,char const *,long)\n"
    "    rlOpcXmlDa::rlOpcXmlDa(char const *,char const *)\n"
    "    rlOpcXmlDa::rlOpcXmlDa(char const *)\n"
    "    rlOpcXmlDa::rlOpcXmlDa()\n");
  lua_error(L);return 0;
}


static int _wrap_rlOpcXmlDa_stringValue(lua_State* L) {
  int SWIG_arg = 0;
  rlOpcXmlDa *arg1 = (rlOpcXmlDa *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlOpcXmlDa::stringValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlOpcXmlDa::stringValue",1,"rlOpcXmlDa *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlOpcXmlDa::stringValue",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlOpcXmlDa,0))){
    SWIG_fail_ptr("rlOpcXmlDa_stringValue",1,SWIGTYPE_p_rlOpcXmlDa);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (char *)(arg1)->stringValue((char const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlOpcXmlDa_intValue(lua_State* L) {
  int SWIG_arg = 0;
  rlOpcXmlDa *arg1 = (rlOpcXmlDa *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlOpcXmlDa::intValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlOpcXmlDa::intValue",1,"rlOpcXmlDa *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlOpcXmlDa::intValue",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlOpcXmlDa,0))){
    SWIG_fail_ptr("rlOpcXmlDa_intValue",1,SWIGTYPE_p_rlOpcXmlDa);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->intValue((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlOpcXmlDa_floatValue(lua_State* L) {
  int SWIG_arg = 0;
  rlOpcXmlDa *arg1 = (rlOpcXmlDa *) 0 ;
  char *arg2 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("rlOpcXmlDa::floatValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlOpcXmlDa::floatValue",1,"rlOpcXmlDa *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlOpcXmlDa::floatValue",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlOpcXmlDa,0))){
    SWIG_fail_ptr("rlOpcXmlDa_floatValue",1,SWIGTYPE_p_rlOpcXmlDa);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (float)(arg1)->floatValue((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlOpcXmlDa_writeStringValue(lua_State* L) {
  int SWIG_arg = 0;
  rlOpcXmlDa *arg1 = (rlOpcXmlDa *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlOpcXmlDa::writeStringValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlOpcXmlDa::writeStringValue",1,"rlOpcXmlDa *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlOpcXmlDa::writeStringValue",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlOpcXmlDa::writeStringValue",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlOpcXmlDa,0))){
    SWIG_fail_ptr("rlOpcXmlDa_writeStringValue",1,SWIGTYPE_p_rlOpcXmlDa);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->writeStringValue((char const *)arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlOpcXmlDa_writeIntValue(lua_State* L) {
  int SWIG_arg = 0;
  rlOpcXmlDa *arg1 = (rlOpcXmlDa *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlOpcXmlDa::writeIntValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlOpcXmlDa::writeIntValue",1,"rlOpcXmlDa *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlOpcXmlDa::writeIntValue",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlOpcXmlDa::writeIntValue",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlOpcXmlDa,0))){
    SWIG_fail_ptr("rlOpcXmlDa_writeIntValue",1,SWIGTYPE_p_rlOpcXmlDa);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->writeIntValue((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlOpcXmlDa_writeFloatValue(lua_State* L) {
  int SWIG_arg = 0;
  rlOpcXmlDa *arg1 = (rlOpcXmlDa *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("rlOpcXmlDa::writeFloatValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlOpcXmlDa::writeFloatValue",1,"rlOpcXmlDa *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlOpcXmlDa::writeFloatValue",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlOpcXmlDa::writeFloatValue",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlOpcXmlDa,0))){
    SWIG_fail_ptr("rlOpcXmlDa_writeFloatValue",1,SWIGTYPE_p_rlOpcXmlDa);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)(arg1)->writeFloatValue((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlOpcXmlDa_readErrorCount(lua_State* L) {
  int SWIG_arg = 0;
  rlOpcXmlDa *arg1 = (rlOpcXmlDa *) 0 ;
  int result;
  
  SWIG_check_num_args("rlOpcXmlDa::readErrorCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlOpcXmlDa::readErrorCount",1,"rlOpcXmlDa *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlOpcXmlDa,0))){
    SWIG_fail_ptr("rlOpcXmlDa_readErrorCount",1,SWIGTYPE_p_rlOpcXmlDa);
  }
  
  result = (int)(arg1)->readErrorCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlOpcXmlDa_writeErrorCount(lua_State* L) {
  int SWIG_arg = 0;
  rlOpcXmlDa *arg1 = (rlOpcXmlDa *) 0 ;
  int result;
  
  SWIG_check_num_args("rlOpcXmlDa::writeErrorCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlOpcXmlDa::writeErrorCount",1,"rlOpcXmlDa *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlOpcXmlDa,0))){
    SWIG_fail_ptr("rlOpcXmlDa_writeErrorCount",1,SWIGTYPE_p_rlOpcXmlDa);
  }
  
  result = (int)(arg1)->writeErrorCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlOpcXmlDa_shmStatus(lua_State* L) {
  int SWIG_arg = 0;
  rlOpcXmlDa *arg1 = (rlOpcXmlDa *) 0 ;
  int result;
  
  SWIG_check_num_args("rlOpcXmlDa::shmStatus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlOpcXmlDa::shmStatus",1,"rlOpcXmlDa *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlOpcXmlDa,0))){
    SWIG_fail_ptr("rlOpcXmlDa_shmStatus",1,SWIGTYPE_p_rlOpcXmlDa);
  }
  
  result = (int)(arg1)->shmStatus();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlOpcXmlDa(void *obj) {
rlOpcXmlDa *arg1 = (rlOpcXmlDa *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlOpcXmlDa(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlOpcXmlDa);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlOpcXmlDa_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rlOpcXmlDa_methods[]= {
    { "stringValue", _wrap_rlOpcXmlDa_stringValue},
    { "intValue", _wrap_rlOpcXmlDa_intValue},
    { "floatValue", _wrap_rlOpcXmlDa_floatValue},
    { "writeStringValue", _wrap_rlOpcXmlDa_writeStringValue},
    { "writeIntValue", _wrap_rlOpcXmlDa_writeIntValue},
    { "writeFloatValue", _wrap_rlOpcXmlDa_writeFloatValue},
    { "readErrorCount", _wrap_rlOpcXmlDa_readErrorCount},
    { "writeErrorCount", _wrap_rlOpcXmlDa_writeErrorCount},
    { "shmStatus", _wrap_rlOpcXmlDa_shmStatus},
    {0,0}
};
static swig_lua_method swig_rlOpcXmlDa_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlOpcXmlDa_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlOpcXmlDa_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("OPCXMLDA_ERROR", rlOpcXmlDa::OPCXMLDA_ERROR)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlOpcXmlDa_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlOpcXmlDa_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlOpcXmlDa_Sf_SwigStatic = {
    "rlOpcXmlDa",
    swig_rlOpcXmlDa_Sf_SwigStatic_methods,
    swig_rlOpcXmlDa_Sf_SwigStatic_attributes,
    swig_rlOpcXmlDa_Sf_SwigStatic_constants,
    swig_rlOpcXmlDa_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlOpcXmlDa_bases[] = {0};
static const char *swig_rlOpcXmlDa_base_names[] = {0};
static swig_lua_class _wrap_class_rlOpcXmlDa = { "rlOpcXmlDa", "rlOpcXmlDa", &SWIGTYPE_p_rlOpcXmlDa,_proxy__wrap_new_rlOpcXmlDa, swig_delete_rlOpcXmlDa, swig_rlOpcXmlDa_methods, swig_rlOpcXmlDa_attributes, &swig_rlOpcXmlDa_Sf_SwigStatic, swig_rlOpcXmlDa_meta, swig_rlOpcXmlDa_bases, swig_rlOpcXmlDa_base_names };

static int _wrap_new_rlPcontrol(lua_State* L) {
  int SWIG_arg = 0;
  rlPcontrol *result = 0 ;
  
  SWIG_check_num_args("rlPcontrol::rlPcontrol",0,0)
  result = (rlPcontrol *)new rlPcontrol();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlPcontrol,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPcontrol_setStartupCommand(lua_State* L) {
  int SWIG_arg = 0;
  rlPcontrol *arg1 = (rlPcontrol *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("rlPcontrol::setStartupCommand",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPcontrol::setStartupCommand",1,"rlPcontrol *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlPcontrol::setStartupCommand",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlPcontrol::setStartupCommand",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPcontrol,0))){
    SWIG_fail_ptr("rlPcontrol_setStartupCommand",1,SWIGTYPE_p_rlPcontrol);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->setStartupCommand((char const *)arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPcontrol_start(lua_State* L) {
  int SWIG_arg = 0;
  rlPcontrol *arg1 = (rlPcontrol *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPcontrol::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPcontrol::start",1,"rlPcontrol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPcontrol,0))){
    SWIG_fail_ptr("rlPcontrol_start",1,SWIGTYPE_p_rlPcontrol);
  }
  
  result = (int)(arg1)->start();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPcontrol_sigterm(lua_State* L) {
  int SWIG_arg = 0;
  rlPcontrol *arg1 = (rlPcontrol *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPcontrol::sigterm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPcontrol::sigterm",1,"rlPcontrol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPcontrol,0))){
    SWIG_fail_ptr("rlPcontrol_sigterm",1,SWIGTYPE_p_rlPcontrol);
  }
  
  result = (int)(arg1)->sigterm();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPcontrol_sigkill(lua_State* L) {
  int SWIG_arg = 0;
  rlPcontrol *arg1 = (rlPcontrol *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPcontrol::sigkill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPcontrol::sigkill",1,"rlPcontrol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPcontrol,0))){
    SWIG_fail_ptr("rlPcontrol_sigkill",1,SWIGTYPE_p_rlPcontrol);
  }
  
  result = (int)(arg1)->sigkill();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPcontrol_isAlive(lua_State* L) {
  int SWIG_arg = 0;
  rlPcontrol *arg1 = (rlPcontrol *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPcontrol::isAlive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPcontrol::isAlive",1,"rlPcontrol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPcontrol,0))){
    SWIG_fail_ptr("rlPcontrol_isAlive",1,SWIGTYPE_p_rlPcontrol);
  }
  
  result = (int)(arg1)->isAlive();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPcontrol_startupCommand(lua_State* L) {
  int SWIG_arg = 0;
  rlPcontrol *arg1 = (rlPcontrol *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlPcontrol::startupCommand",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPcontrol::startupCommand",1,"rlPcontrol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPcontrol,0))){
    SWIG_fail_ptr("rlPcontrol_startupCommand",1,SWIGTYPE_p_rlPcontrol);
  }
  
  result = (char *)(arg1)->startupCommand();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPcontrol_processName(lua_State* L) {
  int SWIG_arg = 0;
  rlPcontrol *arg1 = (rlPcontrol *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlPcontrol::processName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPcontrol::processName",1,"rlPcontrol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPcontrol,0))){
    SWIG_fail_ptr("rlPcontrol_processName",1,SWIGTYPE_p_rlPcontrol);
  }
  
  result = (char *)(arg1)->processName();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPcontrol_processTime(lua_State* L) {
  int SWIG_arg = 0;
  rlPcontrol *arg1 = (rlPcontrol *) 0 ;
  rlTime *result = 0 ;
  
  SWIG_check_num_args("rlPcontrol::processTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPcontrol::processTime",1,"rlPcontrol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPcontrol,0))){
    SWIG_fail_ptr("rlPcontrol_processTime",1,SWIGTYPE_p_rlPcontrol);
  }
  
  result = (rlTime *)(arg1)->processTime();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlTime,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPcontrol_setPID(lua_State* L) {
  int SWIG_arg = 0;
  rlPcontrol *arg1 = (rlPcontrol *) 0 ;
  long arg2 ;
  
  SWIG_check_num_args("rlPcontrol::setPID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPcontrol::setPID",1,"rlPcontrol *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPcontrol::setPID",2,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPcontrol,0))){
    SWIG_fail_ptr("rlPcontrol_setPID",1,SWIGTYPE_p_rlPcontrol);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  (arg1)->setPID(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPcontrol_pid(lua_State* L) {
  int SWIG_arg = 0;
  rlPcontrol *arg1 = (rlPcontrol *) 0 ;
  long result;
  
  SWIG_check_num_args("rlPcontrol::pid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPcontrol::pid",1,"rlPcontrol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPcontrol,0))){
    SWIG_fail_ptr("rlPcontrol_pid",1,SWIGTYPE_p_rlPcontrol);
  }
  
  result = (long)(arg1)->pid();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPcontrol_getNext(lua_State* L) {
  int SWIG_arg = 0;
  rlPcontrol *arg1 = (rlPcontrol *) 0 ;
  rlPcontrol *result = 0 ;
  
  SWIG_check_num_args("rlPcontrol::getNext",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPcontrol::getNext",1,"rlPcontrol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPcontrol,0))){
    SWIG_fail_ptr("rlPcontrol_getNext",1,SWIGTYPE_p_rlPcontrol);
  }
  
  result = (rlPcontrol *)(arg1)->getNext();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlPcontrol,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPcontrol_addNew(lua_State* L) {
  int SWIG_arg = 0;
  rlPcontrol *arg1 = (rlPcontrol *) 0 ;
  rlPcontrol *result = 0 ;
  
  SWIG_check_num_args("rlPcontrol::addNew",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPcontrol::addNew",1,"rlPcontrol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPcontrol,0))){
    SWIG_fail_ptr("rlPcontrol_addNew",1,SWIGTYPE_p_rlPcontrol);
  }
  
  result = (rlPcontrol *)(arg1)->addNew();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlPcontrol,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPcontrol_setPriority(lua_State* L) {
  int SWIG_arg = 0;
  rlPcontrol *arg1 = (rlPcontrol *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlPcontrol::setPriority",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPcontrol::setPriority",1,"rlPcontrol *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPcontrol::setPriority",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPcontrol,0))){
    SWIG_fail_ptr("rlPcontrol_setPriority",1,SWIGTYPE_p_rlPcontrol);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setPriority(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPcontrol_priority(lua_State* L) {
  int SWIG_arg = 0;
  rlPcontrol *arg1 = (rlPcontrol *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPcontrol::priority",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPcontrol::priority",1,"rlPcontrol *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPcontrol,0))){
    SWIG_fail_ptr("rlPcontrol_priority",1,SWIGTYPE_p_rlPcontrol);
  }
  
  result = (int)(arg1)->priority();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlPcontrol(void *obj) {
rlPcontrol *arg1 = (rlPcontrol *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlPcontrol(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlPcontrol);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlPcontrol_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rlPcontrol_methods[]= {
    { "setStartupCommand", _wrap_rlPcontrol_setStartupCommand},
    { "start", _wrap_rlPcontrol_start},
    { "sigterm", _wrap_rlPcontrol_sigterm},
    { "sigkill", _wrap_rlPcontrol_sigkill},
    { "isAlive", _wrap_rlPcontrol_isAlive},
    { "startupCommand", _wrap_rlPcontrol_startupCommand},
    { "processName", _wrap_rlPcontrol_processName},
    { "processTime", _wrap_rlPcontrol_processTime},
    { "setPID", _wrap_rlPcontrol_setPID},
    { "pid", _wrap_rlPcontrol_pid},
    { "getNext", _wrap_rlPcontrol_getNext},
    { "addNew", _wrap_rlPcontrol_addNew},
    { "setPriority", _wrap_rlPcontrol_setPriority},
    { "priority", _wrap_rlPcontrol_priority},
    {0,0}
};
static swig_lua_method swig_rlPcontrol_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlPcontrol_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlPcontrol_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlPcontrol_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlPcontrol_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlPcontrol_Sf_SwigStatic = {
    "rlPcontrol",
    swig_rlPcontrol_Sf_SwigStatic_methods,
    swig_rlPcontrol_Sf_SwigStatic_attributes,
    swig_rlPcontrol_Sf_SwigStatic_constants,
    swig_rlPcontrol_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlPcontrol_bases[] = {0};
static const char *swig_rlPcontrol_base_names[] = {0};
static swig_lua_class _wrap_class_rlPcontrol = { "rlPcontrol", "rlPcontrol", &SWIGTYPE_p_rlPcontrol,_proxy__wrap_new_rlPcontrol, swig_delete_rlPcontrol, swig_rlPcontrol_methods, swig_rlPcontrol_attributes, &swig_rlPcontrol_Sf_SwigStatic, swig_rlPcontrol_meta, swig_rlPcontrol_bases, swig_rlPcontrol_base_names };

static int _wrap_new_rlPlcState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  rlPlcState *result = 0 ;
  
  SWIG_check_num_args("rlPlcState::rlPlcState",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlPlcState::rlPlcState",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::rlPlcState",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlPlcState::rlPlcState",3,"int");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("rlPlcState::rlPlcState",4,"char const *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (rlPlcState *)new rlPlcState(arg1,arg2,arg3,(char const *)arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlPlcState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlPlcState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  rlPlcState *result = 0 ;
  
  SWIG_check_num_args("rlPlcState::rlPlcState",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlPlcState::rlPlcState",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::rlPlcState",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlPlcState::rlPlcState",3,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (rlPlcState *)new rlPlcState(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlPlcState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlPlcState__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  rlPlcState *result = 0 ;
  
  SWIG_check_num_args("rlPlcState::rlPlcState",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlPlcState::rlPlcState",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::rlPlcState",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (rlPlcState *)new rlPlcState(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlPlcState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlPlcState__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  rlPlcState *result = 0 ;
  
  SWIG_check_num_args("rlPlcState::rlPlcState",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlPlcState::rlPlcState",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (rlPlcState *)new rlPlcState(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlPlcState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlPlcState__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *result = 0 ;
  
  SWIG_check_num_args("rlPlcState::rlPlcState",0,0)
  result = (rlPlcState *)new rlPlcState();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlPlcState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlPlcState(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_rlPlcState__SWIG_4(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_rlPlcState__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_rlPlcState__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_rlPlcState__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_rlPlcState__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlPlcState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlPlcState::rlPlcState(int,int,int,char const *)\n"
    "    rlPlcState::rlPlcState(int,int,int)\n"
    "    rlPlcState::rlPlcState(int,int)\n"
    "    rlPlcState::rlPlcState(int)\n"
    "    rlPlcState::rlPlcState()\n");
  lua_error(L);return 0;
}


static int _wrap_rlPlcState_i_set(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int *arg2 = (int *) 0 ;
  
  SWIG_check_num_args("rlPlcState::i",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::i",1,"rlPlcState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlPlcState::i",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_i_set",1,SWIGTYPE_p_rlPlcState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("rlPlcState_i_set",2,SWIGTYPE_p_int);
  }
  
  if (arg1) (arg1)->i = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_i_get(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("rlPlcState::i",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::i",1,"rlPlcState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_i_get",1,SWIGTYPE_p_rlPlcState);
  }
  
  result = (int *) ((arg1)->i);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_i_old_set(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int *arg2 = (int *) 0 ;
  
  SWIG_check_num_args("rlPlcState::i_old",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::i_old",1,"rlPlcState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlPlcState::i_old",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_i_old_set",1,SWIGTYPE_p_rlPlcState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("rlPlcState_i_old_set",2,SWIGTYPE_p_int);
  }
  
  if (arg1) (arg1)->i_old = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_i_old_get(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("rlPlcState::i_old",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::i_old",1,"rlPlcState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_i_old_get",1,SWIGTYPE_p_rlPlcState);
  }
  
  result = (int *) ((arg1)->i_old);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_f_set(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("rlPlcState::f",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::f",1,"rlPlcState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlPlcState::f",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_f_set",1,SWIGTYPE_p_rlPlcState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("rlPlcState_f_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->f = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_f_get(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("rlPlcState::f",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::f",1,"rlPlcState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_f_get",1,SWIGTYPE_p_rlPlcState);
  }
  
  result = (float *) ((arg1)->f);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_f_old_set(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("rlPlcState::f_old",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::f_old",1,"rlPlcState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlPlcState::f_old",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_f_old_set",1,SWIGTYPE_p_rlPlcState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("rlPlcState_f_old_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->f_old = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_f_old_get(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("rlPlcState::f_old",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::f_old",1,"rlPlcState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_f_old_get",1,SWIGTYPE_p_rlPlcState);
  }
  
  result = (float *) ((arg1)->f_old);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_d_set(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("rlPlcState::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::d",1,"rlPlcState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlPlcState::d",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_d_set",1,SWIGTYPE_p_rlPlcState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("rlPlcState_d_set",2,SWIGTYPE_p_double);
  }
  
  if (arg1) (arg1)->d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_d_get(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("rlPlcState::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::d",1,"rlPlcState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_d_get",1,SWIGTYPE_p_rlPlcState);
  }
  
  result = (double *) ((arg1)->d);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_d_old_set(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("rlPlcState::d_old",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::d_old",1,"rlPlcState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlPlcState::d_old",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_d_old_set",1,SWIGTYPE_p_rlPlcState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("rlPlcState_d_old_set",2,SWIGTYPE_p_double);
  }
  
  if (arg1) (arg1)->d_old = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_d_old_get(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("rlPlcState::d_old",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::d_old",1,"rlPlcState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_d_old_get",1,SWIGTYPE_p_rlPlcState);
  }
  
  result = (double *) ((arg1)->d_old);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_clear__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  
  SWIG_check_num_args("rlPlcState::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::clear",1,"rlPlcState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_clear",1,SWIGTYPE_p_rlPlcState);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_rememberState(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  
  SWIG_check_num_args("rlPlcState::rememberState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::rememberState",1,"rlPlcState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_rememberState",1,SWIGTYPE_p_rlPlcState);
  }
  
  (arg1)->rememberState();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_intChanged(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlPlcState::intChanged",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::intChanged",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::intChanged",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_intChanged",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->intChanged(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_floatChanged(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlPlcState::floatChanged",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::floatChanged",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::floatChanged",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_floatChanged",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->floatChanged(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_doubleChanged(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlPlcState::doubleChanged",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::doubleChanged",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::doubleChanged",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_doubleChanged",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->doubleChanged(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_intHasIncreased(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlPlcState::intHasIncreased",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::intHasIncreased",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::intHasIncreased",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_intHasIncreased",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->intHasIncreased(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_floatHasIncreased(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlPlcState::floatHasIncreased",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::floatHasIncreased",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::floatHasIncreased",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_floatHasIncreased",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->floatHasIncreased(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_doubleHasIncreased(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlPlcState::doubleHasIncreased",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::doubleHasIncreased",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::doubleHasIncreased",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_doubleHasIncreased",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->doubleHasIncreased(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_intHasDecreased(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlPlcState::intHasDecreased",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::intHasDecreased",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::intHasDecreased",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_intHasDecreased",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->intHasDecreased(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_floatHasDecreased(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlPlcState::floatHasDecreased",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::floatHasDecreased",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::floatHasDecreased",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_floatHasDecreased",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->floatHasDecreased(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_doubleHasDecreased(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlPlcState::doubleHasDecreased",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::doubleHasDecreased",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::doubleHasDecreased",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_doubleHasDecreased",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->doubleHasDecreased(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_deltaInt(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlPlcState::deltaInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::deltaInt",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::deltaInt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_deltaInt",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->deltaInt(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_deltaFloat(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("rlPlcState::deltaFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::deltaFloat",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::deltaFloat",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_deltaFloat",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)(arg1)->deltaFloat(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_deltaDouble(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("rlPlcState::deltaDouble",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::deltaDouble",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::deltaDouble",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_deltaDouble",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)(arg1)->deltaDouble(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_set(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("rlPlcState::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::set",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::set",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlPlcState::set",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_set",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_clear__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("rlPlcState::clear",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::clear",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::clear",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlPlcState::clear",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_clear",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->clear(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_clear(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlPlcState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rlPlcState_clear__SWIG_0(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlPlcState, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_rlPlcState_clear__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlPlcState_clear'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlPlcState::clear()\n"
    "    rlPlcState::clear(int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_rlPlcState_isSet(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlPlcState::isSet",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::isSet",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::isSet",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlPlcState::isSet",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_isSet",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->isSet(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_isClear(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlPlcState::isClear",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::isClear",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::isClear",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlPlcState::isClear",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_isClear",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->isClear(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_hasBeenSet(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlPlcState::hasBeenSet",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::hasBeenSet",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::hasBeenSet",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlPlcState::hasBeenSet",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_hasBeenSet",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->hasBeenSet(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_hasBeenCleared(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlPlcState::hasBeenCleared",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::hasBeenCleared",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::hasBeenCleared",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlPlcState::hasBeenCleared",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_hasBeenCleared",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->hasBeenCleared(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_maxInt(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPlcState::maxInt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::maxInt",1,"rlPlcState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_maxInt",1,SWIGTYPE_p_rlPlcState);
  }
  
  result = (int)(arg1)->maxInt();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_maxFloat(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPlcState::maxFloat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::maxFloat",1,"rlPlcState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_maxFloat",1,SWIGTYPE_p_rlPlcState);
  }
  
  result = (int)(arg1)->maxFloat();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_maxDouble(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPlcState::maxDouble",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::maxDouble",1,"rlPlcState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_maxDouble",1,SWIGTYPE_p_rlPlcState);
  }
  
  result = (int)(arg1)->maxDouble();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_getInt(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlPlcState::getInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::getInt",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::getInt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_getInt",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->getInt(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_getFloat(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("rlPlcState::getFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::getFloat",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::getFloat",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_getFloat",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)(arg1)->getFloat(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_getDouble(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("rlPlcState::getDouble",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::getDouble",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::getDouble",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_getDouble",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)(arg1)->getDouble(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_getOldInt(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlPlcState::getOldInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::getOldInt",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::getOldInt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_getOldInt",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->getOldInt(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_getOldFloat(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("rlPlcState::getOldFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::getOldFloat",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::getOldFloat",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_getOldFloat",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)(arg1)->getOldFloat(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_getOldDouble(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  int arg2 ;
  double result;
  
  SWIG_check_num_args("rlPlcState::getOldDouble",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::getOldDouble",1,"rlPlcState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcState::getOldDouble",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_getOldDouble",1,SWIGTYPE_p_rlPlcState);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)(arg1)->getOldDouble(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_shm_set(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  rlSharedMemory *arg2 = (rlSharedMemory *) 0 ;
  
  SWIG_check_num_args("rlPlcState::shm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::shm",1,"rlPlcState *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlPlcState::shm",2,"rlSharedMemory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_shm_set",1,SWIGTYPE_p_rlPlcState);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSharedMemory,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("rlPlcState_shm_set",2,SWIGTYPE_p_rlSharedMemory);
  }
  
  if (arg1) (arg1)->shm = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcState_shm_get(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcState *arg1 = (rlPlcState *) 0 ;
  rlSharedMemory *result = 0 ;
  
  SWIG_check_num_args("rlPlcState::shm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcState::shm",1,"rlPlcState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcState,0))){
    SWIG_fail_ptr("rlPlcState_shm_get",1,SWIGTYPE_p_rlPlcState);
  }
  
  result = (rlSharedMemory *) ((arg1)->shm);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSharedMemory,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlPlcState(void *obj) {
rlPlcState *arg1 = (rlPlcState *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlPlcState(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlPlcState);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlPlcState_attributes[] = {
    { "i", _wrap_rlPlcState_i_get, _wrap_rlPlcState_i_set },
    { "i_old", _wrap_rlPlcState_i_old_get, _wrap_rlPlcState_i_old_set },
    { "f", _wrap_rlPlcState_f_get, _wrap_rlPlcState_f_set },
    { "f_old", _wrap_rlPlcState_f_old_get, _wrap_rlPlcState_f_old_set },
    { "d", _wrap_rlPlcState_d_get, _wrap_rlPlcState_d_set },
    { "d_old", _wrap_rlPlcState_d_old_get, _wrap_rlPlcState_d_old_set },
    { "shm", _wrap_rlPlcState_shm_get, _wrap_rlPlcState_shm_set },
    {0,0,0}
};
static swig_lua_method swig_rlPlcState_methods[]= {
    { "rememberState", _wrap_rlPlcState_rememberState},
    { "intChanged", _wrap_rlPlcState_intChanged},
    { "floatChanged", _wrap_rlPlcState_floatChanged},
    { "doubleChanged", _wrap_rlPlcState_doubleChanged},
    { "intHasIncreased", _wrap_rlPlcState_intHasIncreased},
    { "floatHasIncreased", _wrap_rlPlcState_floatHasIncreased},
    { "doubleHasIncreased", _wrap_rlPlcState_doubleHasIncreased},
    { "intHasDecreased", _wrap_rlPlcState_intHasDecreased},
    { "floatHasDecreased", _wrap_rlPlcState_floatHasDecreased},
    { "doubleHasDecreased", _wrap_rlPlcState_doubleHasDecreased},
    { "deltaInt", _wrap_rlPlcState_deltaInt},
    { "deltaFloat", _wrap_rlPlcState_deltaFloat},
    { "deltaDouble", _wrap_rlPlcState_deltaDouble},
    { "set", _wrap_rlPlcState_set},
    { "clear", _wrap_rlPlcState_clear},
    { "isSet", _wrap_rlPlcState_isSet},
    { "isClear", _wrap_rlPlcState_isClear},
    { "hasBeenSet", _wrap_rlPlcState_hasBeenSet},
    { "hasBeenCleared", _wrap_rlPlcState_hasBeenCleared},
    { "maxInt", _wrap_rlPlcState_maxInt},
    { "maxFloat", _wrap_rlPlcState_maxFloat},
    { "maxDouble", _wrap_rlPlcState_maxDouble},
    { "getInt", _wrap_rlPlcState_getInt},
    { "getFloat", _wrap_rlPlcState_getFloat},
    { "getDouble", _wrap_rlPlcState_getDouble},
    { "getOldInt", _wrap_rlPlcState_getOldInt},
    { "getOldFloat", _wrap_rlPlcState_getOldFloat},
    { "getOldDouble", _wrap_rlPlcState_getOldDouble},
    {0,0}
};
static swig_lua_method swig_rlPlcState_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlPlcState_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlPlcState_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlPlcState_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlPlcState_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlPlcState_Sf_SwigStatic = {
    "rlPlcState",
    swig_rlPlcState_Sf_SwigStatic_methods,
    swig_rlPlcState_Sf_SwigStatic_attributes,
    swig_rlPlcState_Sf_SwigStatic_constants,
    swig_rlPlcState_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlPlcState_bases[] = {0};
static const char *swig_rlPlcState_base_names[] = {0};
static swig_lua_class _wrap_class_rlPlcState = { "rlPlcState", "rlPlcState", &SWIGTYPE_p_rlPlcState,_proxy__wrap_new_rlPlcState, swig_delete_rlPlcState, swig_rlPlcState_methods, swig_rlPlcState_attributes, &swig_rlPlcState_Sf_SwigStatic, swig_rlPlcState_meta, swig_rlPlcState_bases, swig_rlPlcState_base_names };

static int _wrap_new_rlPlcMem(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *result = 0 ;
  
  SWIG_check_num_args("rlPlcMem::rlPlcMem",0,0)
  result = (rlPlcMem *)new rlPlcMem();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlPlcMem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_i_set(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlPlcMem::i",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::i",1,"rlPlcMem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcMem::i",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_i_set",1,SWIGTYPE_p_rlPlcMem);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->i = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_i_get(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPlcMem::i",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::i",1,"rlPlcMem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_i_get",1,SWIGTYPE_p_rlPlcMem);
  }
  
  result = (int) ((arg1)->i);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_i_old_set(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlPlcMem::i_old",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::i_old",1,"rlPlcMem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcMem::i_old",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_i_old_set",1,SWIGTYPE_p_rlPlcMem);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->i_old = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_i_old_get(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPlcMem::i_old",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::i_old",1,"rlPlcMem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_i_old_get",1,SWIGTYPE_p_rlPlcMem);
  }
  
  result = (int) ((arg1)->i_old);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_f_set(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("rlPlcMem::f",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::f",1,"rlPlcMem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcMem::f",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_f_set",1,SWIGTYPE_p_rlPlcMem);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->f = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_f_get(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  float result;
  
  SWIG_check_num_args("rlPlcMem::f",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::f",1,"rlPlcMem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_f_get",1,SWIGTYPE_p_rlPlcMem);
  }
  
  result = (float) ((arg1)->f);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_f_old_set(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("rlPlcMem::f_old",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::f_old",1,"rlPlcMem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcMem::f_old",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_f_old_set",1,SWIGTYPE_p_rlPlcMem);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->f_old = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_f_old_get(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  float result;
  
  SWIG_check_num_args("rlPlcMem::f_old",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::f_old",1,"rlPlcMem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_f_old_get",1,SWIGTYPE_p_rlPlcMem);
  }
  
  result = (float) ((arg1)->f_old);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_d_set(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("rlPlcMem::d",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::d",1,"rlPlcMem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcMem::d",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_d_set",1,SWIGTYPE_p_rlPlcMem);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->d = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_d_get(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  double result;
  
  SWIG_check_num_args("rlPlcMem::d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::d",1,"rlPlcMem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_d_get",1,SWIGTYPE_p_rlPlcMem);
  }
  
  result = (double) ((arg1)->d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_d_old_set(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("rlPlcMem::d_old",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::d_old",1,"rlPlcMem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcMem::d_old",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_d_old_set",1,SWIGTYPE_p_rlPlcMem);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->d_old = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_d_old_get(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  double result;
  
  SWIG_check_num_args("rlPlcMem::d_old",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::d_old",1,"rlPlcMem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_d_old_get",1,SWIGTYPE_p_rlPlcMem);
  }
  
  result = (double) ((arg1)->d_old);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_rememberState(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  
  SWIG_check_num_args("rlPlcMem::rememberState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::rememberState",1,"rlPlcMem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_rememberState",1,SWIGTYPE_p_rlPlcMem);
  }
  
  (arg1)->rememberState();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_intChanged(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPlcMem::intChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::intChanged",1,"rlPlcMem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_intChanged",1,SWIGTYPE_p_rlPlcMem);
  }
  
  result = (int)(arg1)->intChanged();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_floatChanged(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPlcMem::floatChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::floatChanged",1,"rlPlcMem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_floatChanged",1,SWIGTYPE_p_rlPlcMem);
  }
  
  result = (int)(arg1)->floatChanged();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_doubleChanged(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPlcMem::doubleChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::doubleChanged",1,"rlPlcMem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_doubleChanged",1,SWIGTYPE_p_rlPlcMem);
  }
  
  result = (int)(arg1)->doubleChanged();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_intHasIncreased(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPlcMem::intHasIncreased",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::intHasIncreased",1,"rlPlcMem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_intHasIncreased",1,SWIGTYPE_p_rlPlcMem);
  }
  
  result = (int)(arg1)->intHasIncreased();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_floatHasIncreased(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPlcMem::floatHasIncreased",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::floatHasIncreased",1,"rlPlcMem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_floatHasIncreased",1,SWIGTYPE_p_rlPlcMem);
  }
  
  result = (int)(arg1)->floatHasIncreased();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_doubleHasIncreased(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPlcMem::doubleHasIncreased",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::doubleHasIncreased",1,"rlPlcMem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_doubleHasIncreased",1,SWIGTYPE_p_rlPlcMem);
  }
  
  result = (int)(arg1)->doubleHasIncreased();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_intHasDecreased(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPlcMem::intHasDecreased",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::intHasDecreased",1,"rlPlcMem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_intHasDecreased",1,SWIGTYPE_p_rlPlcMem);
  }
  
  result = (int)(arg1)->intHasDecreased();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_floatHasDecreased(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPlcMem::floatHasDecreased",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::floatHasDecreased",1,"rlPlcMem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_floatHasDecreased",1,SWIGTYPE_p_rlPlcMem);
  }
  
  result = (int)(arg1)->floatHasDecreased();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_doubleHasDecreased(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPlcMem::doubleHasDecreased",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::doubleHasDecreased",1,"rlPlcMem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_doubleHasDecreased",1,SWIGTYPE_p_rlPlcMem);
  }
  
  result = (int)(arg1)->doubleHasDecreased();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_deltaInt(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPlcMem::deltaInt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::deltaInt",1,"rlPlcMem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_deltaInt",1,SWIGTYPE_p_rlPlcMem);
  }
  
  result = (int)(arg1)->deltaInt();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_deltaFloat(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  float result;
  
  SWIG_check_num_args("rlPlcMem::deltaFloat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::deltaFloat",1,"rlPlcMem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_deltaFloat",1,SWIGTYPE_p_rlPlcMem);
  }
  
  result = (float)(arg1)->deltaFloat();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_deltaDouble(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  double result;
  
  SWIG_check_num_args("rlPlcMem::deltaDouble",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::deltaDouble",1,"rlPlcMem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_deltaDouble",1,SWIGTYPE_p_rlPlcMem);
  }
  
  result = (double)(arg1)->deltaDouble();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_set(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlPlcMem::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::set",1,"rlPlcMem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcMem::set",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_set",1,SWIGTYPE_p_rlPlcMem);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->set(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_clear(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlPlcMem::clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::clear",1,"rlPlcMem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcMem::clear",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_clear",1,SWIGTYPE_p_rlPlcMem);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->clear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_isSet(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlPlcMem::isSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::isSet",1,"rlPlcMem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcMem::isSet",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_isSet",1,SWIGTYPE_p_rlPlcMem);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->isSet(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_isClear(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlPlcMem::isClear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::isClear",1,"rlPlcMem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcMem::isClear",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_isClear",1,SWIGTYPE_p_rlPlcMem);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->isClear(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_hasBeenSet(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlPlcMem::hasBeenSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::hasBeenSet",1,"rlPlcMem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcMem::hasBeenSet",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_hasBeenSet",1,SWIGTYPE_p_rlPlcMem);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->hasBeenSet(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPlcMem_hasBeenCleared(lua_State* L) {
  int SWIG_arg = 0;
  rlPlcMem *arg1 = (rlPlcMem *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlPlcMem::hasBeenCleared",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPlcMem::hasBeenCleared",1,"rlPlcMem *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPlcMem::hasBeenCleared",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPlcMem,0))){
    SWIG_fail_ptr("rlPlcMem_hasBeenCleared",1,SWIGTYPE_p_rlPlcMem);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->hasBeenCleared(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlPlcMem(void *obj) {
rlPlcMem *arg1 = (rlPlcMem *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlPlcMem(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlPlcMem);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlPlcMem_attributes[] = {
    { "i", _wrap_rlPlcMem_i_get, _wrap_rlPlcMem_i_set },
    { "i_old", _wrap_rlPlcMem_i_old_get, _wrap_rlPlcMem_i_old_set },
    { "f", _wrap_rlPlcMem_f_get, _wrap_rlPlcMem_f_set },
    { "f_old", _wrap_rlPlcMem_f_old_get, _wrap_rlPlcMem_f_old_set },
    { "d", _wrap_rlPlcMem_d_get, _wrap_rlPlcMem_d_set },
    { "d_old", _wrap_rlPlcMem_d_old_get, _wrap_rlPlcMem_d_old_set },
    {0,0,0}
};
static swig_lua_method swig_rlPlcMem_methods[]= {
    { "rememberState", _wrap_rlPlcMem_rememberState},
    { "intChanged", _wrap_rlPlcMem_intChanged},
    { "floatChanged", _wrap_rlPlcMem_floatChanged},
    { "doubleChanged", _wrap_rlPlcMem_doubleChanged},
    { "intHasIncreased", _wrap_rlPlcMem_intHasIncreased},
    { "floatHasIncreased", _wrap_rlPlcMem_floatHasIncreased},
    { "doubleHasIncreased", _wrap_rlPlcMem_doubleHasIncreased},
    { "intHasDecreased", _wrap_rlPlcMem_intHasDecreased},
    { "floatHasDecreased", _wrap_rlPlcMem_floatHasDecreased},
    { "doubleHasDecreased", _wrap_rlPlcMem_doubleHasDecreased},
    { "deltaInt", _wrap_rlPlcMem_deltaInt},
    { "deltaFloat", _wrap_rlPlcMem_deltaFloat},
    { "deltaDouble", _wrap_rlPlcMem_deltaDouble},
    { "set", _wrap_rlPlcMem_set},
    { "clear", _wrap_rlPlcMem_clear},
    { "isSet", _wrap_rlPlcMem_isSet},
    { "isClear", _wrap_rlPlcMem_isClear},
    { "hasBeenSet", _wrap_rlPlcMem_hasBeenSet},
    { "hasBeenCleared", _wrap_rlPlcMem_hasBeenCleared},
    {0,0}
};
static swig_lua_method swig_rlPlcMem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlPlcMem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlPlcMem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlPlcMem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlPlcMem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlPlcMem_Sf_SwigStatic = {
    "rlPlcMem",
    swig_rlPlcMem_Sf_SwigStatic_methods,
    swig_rlPlcMem_Sf_SwigStatic_attributes,
    swig_rlPlcMem_Sf_SwigStatic_constants,
    swig_rlPlcMem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlPlcMem_bases[] = {0};
static const char *swig_rlPlcMem_base_names[] = {0};
static swig_lua_class _wrap_class_rlPlcMem = { "rlPlcMem", "rlPlcMem", &SWIGTYPE_p_rlPlcMem,_proxy__wrap_new_rlPlcMem, swig_delete_rlPlcMem, swig_rlPlcMem_methods, swig_rlPlcMem_attributes, &swig_rlPlcMem_Sf_SwigStatic, swig_rlPlcMem_meta, swig_rlPlcMem_bases, swig_rlPlcMem_base_names };

static int _wrap_new_rlPPIClient__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  rlPPIClient *result = 0 ;
  
  SWIG_check_num_args("rlPPIClient::rlPPIClient",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlPPIClient::rlPPIClient",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlPPIClient::rlPPIClient",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlPPIClient::rlPPIClient",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlPPIClient::rlPPIClient",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (rlPPIClient *)new rlPPIClient((char const *)arg1,(char const *)arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlPPIClient,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlPPIClient__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  rlPPIClient *result = 0 ;
  
  SWIG_check_num_args("rlPPIClient::rlPPIClient",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlPPIClient::rlPPIClient",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlPPIClient::rlPPIClient",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlPPIClient::rlPPIClient",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (rlPPIClient *)new rlPPIClient((char const *)arg1,(char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlPPIClient,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlPPIClient(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_rlPPIClient__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_rlPPIClient__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlPPIClient'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlPPIClient::rlPPIClient(char const *,char const *,int,int)\n"
    "    rlPPIClient::rlPPIClient(char const *,char const *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_rlPPIClient_write(lua_State* L) {
  int SWIG_arg = 0;
  rlPPIClient *arg1 = (rlPPIClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  unsigned char *arg7 = (unsigned char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPPIClient::write",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPPIClient::write",1,"rlPPIClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPPIClient::write",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlPPIClient::write",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlPPIClient::write",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlPPIClient::write",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlPPIClient::write",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("rlPPIClient::write",7,"unsigned char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPPIClient,0))){
    SWIG_fail_ptr("rlPPIClient_write",1,SWIGTYPE_p_rlPPIClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlPPIClient_write",7,SWIGTYPE_p_unsigned_char);
  }
  
  result = (int)(arg1)->write(arg2,arg3,arg4,arg5,arg6,(unsigned char const *)arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPPIClient_writeFloat(lua_State* L) {
  int SWIG_arg = 0;
  rlPPIClient *arg1 = (rlPPIClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPPIClient::writeFloat",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPPIClient::writeFloat",1,"rlPPIClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPPIClient::writeFloat",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlPPIClient::writeFloat",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlPPIClient::writeFloat",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlPPIClient::writeFloat",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlPPIClient::writeFloat",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("rlPPIClient::writeFloat",7,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPPIClient,0))){
    SWIG_fail_ptr("rlPPIClient_writeFloat",1,SWIGTYPE_p_rlPPIClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("rlPPIClient_writeFloat",7,SWIGTYPE_p_float);
  }
  
  result = (int)(arg1)->writeFloat(arg2,arg3,arg4,arg5,arg6,(float const *)arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPPIClient_writeDword(lua_State* L) {
  int SWIG_arg = 0;
  rlPPIClient *arg1 = (rlPPIClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPPIClient::writeDword",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPPIClient::writeDword",1,"rlPPIClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPPIClient::writeDword",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlPPIClient::writeDword",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlPPIClient::writeDword",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlPPIClient::writeDword",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlPPIClient::writeDword",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("rlPPIClient::writeDword",7,"int const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPPIClient,0))){
    SWIG_fail_ptr("rlPPIClient_writeDword",1,SWIGTYPE_p_rlPPIClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlPPIClient_writeDword",7,SWIGTYPE_p_int);
  }
  
  result = (int)(arg1)->writeDword(arg2,arg3,arg4,arg5,arg6,(int const *)arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPPIClient_writeShort(lua_State* L) {
  int SWIG_arg = 0;
  rlPPIClient *arg1 = (rlPPIClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  short *arg7 = (short *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPPIClient::writeShort",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPPIClient::writeShort",1,"rlPPIClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPPIClient::writeShort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlPPIClient::writeShort",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlPPIClient::writeShort",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlPPIClient::writeShort",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlPPIClient::writeShort",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("rlPPIClient::writeShort",7,"short const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPPIClient,0))){
    SWIG_fail_ptr("rlPPIClient_writeShort",1,SWIGTYPE_p_rlPPIClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_short,0))){
    SWIG_fail_ptr("rlPPIClient_writeShort",7,SWIGTYPE_p_short);
  }
  
  result = (int)(arg1)->writeShort(arg2,arg3,arg4,arg5,arg6,(short const *)arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPPIClient_writeUDword(lua_State* L) {
  int SWIG_arg = 0;
  rlPPIClient *arg1 = (rlPPIClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  unsigned int *arg7 = (unsigned int *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPPIClient::writeUDword",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPPIClient::writeUDword",1,"rlPPIClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPPIClient::writeUDword",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlPPIClient::writeUDword",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlPPIClient::writeUDword",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlPPIClient::writeUDword",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlPPIClient::writeUDword",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("rlPPIClient::writeUDword",7,"unsigned int const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPPIClient,0))){
    SWIG_fail_ptr("rlPPIClient_writeUDword",1,SWIGTYPE_p_rlPPIClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("rlPPIClient_writeUDword",7,SWIGTYPE_p_unsigned_int);
  }
  
  result = (int)(arg1)->writeUDword(arg2,arg3,arg4,arg5,arg6,(unsigned int const *)arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPPIClient_writeUShort(lua_State* L) {
  int SWIG_arg = 0;
  rlPPIClient *arg1 = (rlPPIClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  unsigned short *arg7 = (unsigned short *) 0 ;
  int result;
  
  SWIG_check_num_args("rlPPIClient::writeUShort",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPPIClient::writeUShort",1,"rlPPIClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPPIClient::writeUShort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlPPIClient::writeUShort",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlPPIClient::writeUShort",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlPPIClient::writeUShort",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlPPIClient::writeUShort",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("rlPPIClient::writeUShort",7,"unsigned short const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPPIClient,0))){
    SWIG_fail_ptr("rlPPIClient_writeUShort",1,SWIGTYPE_p_rlPPIClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("rlPPIClient_writeUShort",7,SWIGTYPE_p_unsigned_short);
  }
  
  result = (int)(arg1)->writeUShort(arg2,arg3,arg4,arg5,arg6,(unsigned short const *)arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPPIClient_read(lua_State* L) {
  int SWIG_arg = 0;
  rlPPIClient *arg1 = (rlPPIClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlPPIClient::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPPIClient::read",1,"rlPPIClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPPIClient::read",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlPPIClient::read",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPPIClient,0))){
    SWIG_fail_ptr("rlPPIClient_read",1,SWIGTYPE_p_rlPPIClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->read(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPPIClient_Float(lua_State* L) {
  int SWIG_arg = 0;
  rlPPIClient *arg1 = (rlPPIClient *) 0 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("rlPPIClient::Float",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPPIClient::Float",1,"rlPPIClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPPIClient::Float",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPPIClient,0))){
    SWIG_fail_ptr("rlPPIClient_Float",1,SWIGTYPE_p_rlPPIClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)(arg1)->Float(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPPIClient_Dword(lua_State* L) {
  int SWIG_arg = 0;
  rlPPIClient *arg1 = (rlPPIClient *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlPPIClient::Dword",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPPIClient::Dword",1,"rlPPIClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPPIClient::Dword",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPPIClient,0))){
    SWIG_fail_ptr("rlPPIClient_Dword",1,SWIGTYPE_p_rlPPIClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->Dword(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPPIClient_Short(lua_State* L) {
  int SWIG_arg = 0;
  rlPPIClient *arg1 = (rlPPIClient *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlPPIClient::Short",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPPIClient::Short",1,"rlPPIClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPPIClient::Short",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPPIClient,0))){
    SWIG_fail_ptr("rlPPIClient_Short",1,SWIGTYPE_p_rlPPIClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->Short(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPPIClient_UDword(lua_State* L) {
  int SWIG_arg = 0;
  rlPPIClient *arg1 = (rlPPIClient *) 0 ;
  int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("rlPPIClient::UDword",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPPIClient::UDword",1,"rlPPIClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPPIClient::UDword",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPPIClient,0))){
    SWIG_fail_ptr("rlPPIClient_UDword",1,SWIGTYPE_p_rlPPIClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->UDword(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPPIClient_UShort(lua_State* L) {
  int SWIG_arg = 0;
  rlPPIClient *arg1 = (rlPPIClient *) 0 ;
  int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("rlPPIClient::UShort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPPIClient::UShort",1,"rlPPIClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlPPIClient::UShort",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPPIClient,0))){
    SWIG_fail_ptr("rlPPIClient_UShort",1,SWIGTYPE_p_rlPPIClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->UShort(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPPIClient_buf_set(lua_State* L) {
  int SWIG_arg = 0;
  rlPPIClient *arg1 = (rlPPIClient *) 0 ;
  unsigned char *arg2 ;
  
  SWIG_check_num_args("rlPPIClient::buf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPPIClient::buf",1,"rlPPIClient *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlPPIClient::buf",2,"unsigned char [512]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPPIClient,0))){
    SWIG_fail_ptr("rlPPIClient_buf_set",1,SWIGTYPE_p_rlPPIClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlPPIClient_buf_set",2,SWIGTYPE_p_unsigned_char);
  }
  
  {
    size_t ii;
    unsigned char *b = (unsigned char *) arg1->buf;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((unsigned char *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlPPIClient_buf_get(lua_State* L) {
  int SWIG_arg = 0;
  rlPPIClient *arg1 = (rlPPIClient *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("rlPPIClient::buf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlPPIClient::buf",1,"rlPPIClient *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlPPIClient,0))){
    SWIG_fail_ptr("rlPPIClient_buf_get",1,SWIGTYPE_p_rlPPIClient);
  }
  
  result = (unsigned char *)(unsigned char *) ((arg1)->buf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlPPIClient(void *obj) {
rlPPIClient *arg1 = (rlPPIClient *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlPPIClient(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlPPIClient);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlPPIClient_attributes[] = {
    { "buf", _wrap_rlPPIClient_buf_get, _wrap_rlPPIClient_buf_set },
    {0,0,0}
};
static swig_lua_method swig_rlPPIClient_methods[]= {
    { "write", _wrap_rlPPIClient_write},
    { "writeFloat", _wrap_rlPPIClient_writeFloat},
    { "writeDword", _wrap_rlPPIClient_writeDword},
    { "writeShort", _wrap_rlPPIClient_writeShort},
    { "writeUDword", _wrap_rlPPIClient_writeUDword},
    { "writeUShort", _wrap_rlPPIClient_writeUShort},
    { "read", _wrap_rlPPIClient_read},
    { "Float", _wrap_rlPPIClient_Float},
    { "Dword", _wrap_rlPPIClient_Dword},
    { "Short", _wrap_rlPPIClient_Short},
    { "UDword", _wrap_rlPPIClient_UDword},
    { "UShort", _wrap_rlPPIClient_UShort},
    {0,0}
};
static swig_lua_method swig_rlPPIClient_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlPPIClient_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlPPIClient_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("daveSD", rlPPIClient::daveSD)},
    {SWIG_LUA_CONSTTAB_INT("daveInputs", rlPPIClient::daveInputs)},
    {SWIG_LUA_CONSTTAB_INT("daveOutputs", rlPPIClient::daveOutputs)},
    {SWIG_LUA_CONSTTAB_INT("daveFlags", rlPPIClient::daveFlags)},
    {SWIG_LUA_CONSTTAB_INT("daveDB", rlPPIClient::daveDB)},
    {SWIG_LUA_CONSTTAB_INT("daveDI", rlPPIClient::daveDI)},
    {SWIG_LUA_CONSTTAB_INT("daveLocal", rlPPIClient::daveLocal)},
    {SWIG_LUA_CONSTTAB_INT("daveV", rlPPIClient::daveV)},
    {SWIG_LUA_CONSTTAB_INT("daveCounter", rlPPIClient::daveCounter)},
    {SWIG_LUA_CONSTTAB_INT("daveTimer", rlPPIClient::daveTimer)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlPPIClient_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlPPIClient_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlPPIClient_Sf_SwigStatic = {
    "rlPPIClient",
    swig_rlPPIClient_Sf_SwigStatic_methods,
    swig_rlPPIClient_Sf_SwigStatic_attributes,
    swig_rlPPIClient_Sf_SwigStatic_constants,
    swig_rlPPIClient_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlPPIClient_bases[] = {0,0};
static const char *swig_rlPPIClient_base_names[] = {"rlMailbox *",0};
static swig_lua_class _wrap_class_rlPPIClient = { "rlPPIClient", "rlPPIClient", &SWIGTYPE_p_rlPPIClient,_proxy__wrap_new_rlPPIClient, swig_delete_rlPPIClient, swig_rlPPIClient_methods, swig_rlPPIClient_attributes, &swig_rlPPIClient_Sf_SwigStatic, swig_rlPPIClient_meta, swig_rlPPIClient_bases, swig_rlPPIClient_base_names };

static int _wrap_new_rlSerial(lua_State* L) {
  int SWIG_arg = 0;
  rlSerial *result = 0 ;
  
  SWIG_check_num_args("rlSerial::rlSerial",0,0)
  result = (rlSerial *)new rlSerial();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSerial,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSerial_openDevice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlSerial *arg1 = (rlSerial *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int result;
  
  SWIG_check_num_args("rlSerial::openDevice",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSerial::openDevice",1,"rlSerial *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSerial::openDevice",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSerial::openDevice",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSerial::openDevice",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlSerial::openDevice",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlSerial::openDevice",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("rlSerial::openDevice",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("rlSerial::openDevice",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rlSerial_openDevice",1,SWIGTYPE_p_rlSerial);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  result = (int)(arg1)->openDevice((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSerial_openDevice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSerial *arg1 = (rlSerial *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int result;
  
  SWIG_check_num_args("rlSerial::openDevice",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSerial::openDevice",1,"rlSerial *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSerial::openDevice",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSerial::openDevice",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSerial::openDevice",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlSerial::openDevice",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlSerial::openDevice",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("rlSerial::openDevice",7,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rlSerial_openDevice",1,SWIGTYPE_p_rlSerial);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  result = (int)(arg1)->openDevice((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSerial_openDevice__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  rlSerial *arg1 = (rlSerial *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int result;
  
  SWIG_check_num_args("rlSerial::openDevice",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSerial::openDevice",1,"rlSerial *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSerial::openDevice",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSerial::openDevice",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSerial::openDevice",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlSerial::openDevice",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlSerial::openDevice",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rlSerial_openDevice",1,SWIGTYPE_p_rlSerial);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  result = (int)(arg1)->openDevice((char const *)arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSerial_openDevice__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  rlSerial *arg1 = (rlSerial *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  SWIG_check_num_args("rlSerial::openDevice",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSerial::openDevice",1,"rlSerial *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSerial::openDevice",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSerial::openDevice",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSerial::openDevice",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlSerial::openDevice",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rlSerial_openDevice",1,SWIGTYPE_p_rlSerial);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (int)(arg1)->openDevice((char const *)arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSerial_openDevice__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  rlSerial *arg1 = (rlSerial *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlSerial::openDevice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSerial::openDevice",1,"rlSerial *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSerial::openDevice",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSerial::openDevice",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSerial::openDevice",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rlSerial_openDevice",1,SWIGTYPE_p_rlSerial);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->openDevice((char const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSerial_openDevice__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  rlSerial *arg1 = (rlSerial *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlSerial::openDevice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSerial::openDevice",1,"rlSerial *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSerial::openDevice",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSerial::openDevice",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rlSerial_openDevice",1,SWIGTYPE_p_rlSerial);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->openDevice((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSerial_openDevice__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  rlSerial *arg1 = (rlSerial *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSerial::openDevice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSerial::openDevice",1,"rlSerial *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSerial::openDevice",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rlSerial_openDevice",1,SWIGTYPE_p_rlSerial);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->openDevice((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSerial_openDevice(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSerial, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_rlSerial_openDevice__SWIG_6(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSerial, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_rlSerial_openDevice__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSerial, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_rlSerial_openDevice__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSerial, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_rlSerial_openDevice__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSerial, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_rlSerial_openDevice__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSerial, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_rlSerial_openDevice__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSerial, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_rlSerial_openDevice__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlSerial_openDevice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSerial::openDevice(char const *,int,int,int,int,int,int)\n"
    "    rlSerial::openDevice(char const *,int,int,int,int,int)\n"
    "    rlSerial::openDevice(char const *,int,int,int,int)\n"
    "    rlSerial::openDevice(char const *,int,int,int)\n"
    "    rlSerial::openDevice(char const *,int,int)\n"
    "    rlSerial::openDevice(char const *,int)\n"
    "    rlSerial::openDevice(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlSerial_select__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlSerial *arg1 = (rlSerial *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlSerial::select",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSerial::select",1,"rlSerial *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSerial::select",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rlSerial_select",1,SWIGTYPE_p_rlSerial);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->select(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSerial_select__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSerial *arg1 = (rlSerial *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSerial::select",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSerial::select",1,"rlSerial *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rlSerial_select",1,SWIGTYPE_p_rlSerial);
  }
  
  result = (int)(arg1)->select();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSerial_select(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSerial, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rlSerial_select__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSerial, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_rlSerial_select__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlSerial_select'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSerial::select(int)\n"
    "    rlSerial::select()\n");
  lua_error(L);return 0;
}


static int _wrap_rlSerial_readChar(lua_State* L) {
  int SWIG_arg = 0;
  rlSerial *arg1 = (rlSerial *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSerial::readChar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSerial::readChar",1,"rlSerial *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rlSerial_readChar",1,SWIGTYPE_p_rlSerial);
  }
  
  result = (int)(arg1)->readChar();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSerial_writeChar(lua_State* L) {
  int SWIG_arg = 0;
  rlSerial *arg1 = (rlSerial *) 0 ;
  unsigned char arg2 ;
  int result;
  
  SWIG_check_num_args("rlSerial::writeChar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSerial::writeChar",1,"rlSerial *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSerial::writeChar",2,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rlSerial_writeChar",1,SWIGTYPE_p_rlSerial);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned char)lua_tonumber(L, 2);
  result = (int)(arg1)->writeChar(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSerial_readBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlSerial *arg1 = (rlSerial *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlSerial::readBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSerial::readBlock",1,"rlSerial *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSerial::readBlock",2,"unsigned char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSerial::readBlock",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSerial::readBlock",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rlSerial_readBlock",1,SWIGTYPE_p_rlSerial);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlSerial_readBlock",2,SWIGTYPE_p_unsigned_char);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->readBlock(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSerial_readBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSerial *arg1 = (rlSerial *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlSerial::readBlock",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSerial::readBlock",1,"rlSerial *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSerial::readBlock",2,"unsigned char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSerial::readBlock",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rlSerial_readBlock",1,SWIGTYPE_p_rlSerial);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlSerial_readBlock",2,SWIGTYPE_p_unsigned_char);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->readBlock(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSerial_readBlock(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSerial, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_rlSerial_readBlock__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSerial, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_rlSerial_readBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlSerial_readBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSerial::readBlock(unsigned char *,int,int)\n"
    "    rlSerial::readBlock(unsigned char *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_rlSerial_writeBlock(lua_State* L) {
  int SWIG_arg = 0;
  rlSerial *arg1 = (rlSerial *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlSerial::writeBlock",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSerial::writeBlock",1,"rlSerial *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSerial::writeBlock",2,"unsigned char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSerial::writeBlock",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rlSerial_writeBlock",1,SWIGTYPE_p_rlSerial);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlSerial_writeBlock",2,SWIGTYPE_p_unsigned_char);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->writeBlock((unsigned char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSerial_readLine__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlSerial *arg1 = (rlSerial *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlSerial::readLine",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSerial::readLine",1,"rlSerial *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSerial::readLine",2,"unsigned char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSerial::readLine",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSerial::readLine",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rlSerial_readLine",1,SWIGTYPE_p_rlSerial);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlSerial_readLine",2,SWIGTYPE_p_unsigned_char);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->readLine(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSerial_readLine__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSerial *arg1 = (rlSerial *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlSerial::readLine",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSerial::readLine",1,"rlSerial *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSerial::readLine",2,"unsigned char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSerial::readLine",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rlSerial_readLine",1,SWIGTYPE_p_rlSerial);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlSerial_readLine",2,SWIGTYPE_p_unsigned_char);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->readLine(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSerial_readLine(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSerial, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_rlSerial_readLine__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSerial, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_rlSerial_readLine__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlSerial_readLine'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSerial::readLine(unsigned char *,int,int)\n"
    "    rlSerial::readLine(unsigned char *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_rlSerial_closeDevice(lua_State* L) {
  int SWIG_arg = 0;
  rlSerial *arg1 = (rlSerial *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSerial::closeDevice",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSerial::closeDevice",1,"rlSerial *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rlSerial_closeDevice",1,SWIGTYPE_p_rlSerial);
  }
  
  result = (int)(arg1)->closeDevice();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSerial_setTrace(lua_State* L) {
  int SWIG_arg = 0;
  rlSerial *arg1 = (rlSerial *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlSerial::setTrace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSerial::setTrace",1,"rlSerial *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSerial::setTrace",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSerial,0))){
    SWIG_fail_ptr("rlSerial_setTrace",1,SWIGTYPE_p_rlSerial);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setTrace(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlSerial(void *obj) {
rlSerial *arg1 = (rlSerial *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlSerial(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlSerial);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlSerial_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rlSerial_methods[]= {
    { "openDevice", _wrap_rlSerial_openDevice},
    { "select", _wrap_rlSerial_select},
    { "readChar", _wrap_rlSerial_readChar},
    { "writeChar", _wrap_rlSerial_writeChar},
    { "readBlock", _wrap_rlSerial_readBlock},
    { "writeBlock", _wrap_rlSerial_writeBlock},
    { "readLine", _wrap_rlSerial_readLine},
    { "closeDevice", _wrap_rlSerial_closeDevice},
    { "setTrace", _wrap_rlSerial_setTrace},
    {0,0}
};
static swig_lua_method swig_rlSerial_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlSerial_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlSerial_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("NONE", rlSerial::NONE)},
    {SWIG_LUA_CONSTTAB_INT("ODD", rlSerial::ODD)},
    {SWIG_LUA_CONSTTAB_INT("EVEN", rlSerial::EVEN)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlSerial_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlSerial_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlSerial_Sf_SwigStatic = {
    "rlSerial",
    swig_rlSerial_Sf_SwigStatic_methods,
    swig_rlSerial_Sf_SwigStatic_attributes,
    swig_rlSerial_Sf_SwigStatic_constants,
    swig_rlSerial_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlSerial_bases[] = {0};
static const char *swig_rlSerial_base_names[] = {0};
static swig_lua_class _wrap_class_rlSerial = { "rlSerial", "rlSerial", &SWIGTYPE_p_rlSerial,_proxy__wrap_new_rlSerial, swig_delete_rlSerial, swig_rlSerial_methods, swig_rlSerial_attributes, &swig_rlSerial_Sf_SwigStatic, swig_rlSerial_meta, swig_rlSerial_bases, swig_rlSerial_base_names };

static int _wrap_new_rlSiemensTCPClient__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  rlSiemensTCPClient *result = 0 ;
  
  SWIG_check_num_args("rlSiemensTCPClient::rlSiemensTCPClient",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlSiemensTCPClient::rlSiemensTCPClient",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSiemensTCPClient::rlSiemensTCPClient",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSiemensTCPClient::rlSiemensTCPClient",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSiemensTCPClient::rlSiemensTCPClient",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (rlSiemensTCPClient *)new rlSiemensTCPClient((char const *)arg1,(char const *)arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSiemensTCPClient,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSiemensTCPClient__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  rlSiemensTCPClient *result = 0 ;
  
  SWIG_check_num_args("rlSiemensTCPClient::rlSiemensTCPClient",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlSiemensTCPClient::rlSiemensTCPClient",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSiemensTCPClient::rlSiemensTCPClient",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSiemensTCPClient::rlSiemensTCPClient",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (rlSiemensTCPClient *)new rlSiemensTCPClient((char const *)arg1,(char const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSiemensTCPClient,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSiemensTCPClient(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_rlSiemensTCPClient__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_rlSiemensTCPClient__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlSiemensTCPClient'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSiemensTCPClient::rlSiemensTCPClient(char const *,char const *,int,int)\n"
    "    rlSiemensTCPClient::rlSiemensTCPClient(char const *,char const *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_rlSiemensTCPClient_write(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCPClient *arg1 = (rlSiemensTCPClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  unsigned char *arg7 = (unsigned char *) 0 ;
  int arg8 ;
  int result;
  
  SWIG_check_num_args("rlSiemensTCPClient::write",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCPClient::write",1,"rlSiemensTCPClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCPClient::write",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSiemensTCPClient::write",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSiemensTCPClient::write",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlSiemensTCPClient::write",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlSiemensTCPClient::write",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("rlSiemensTCPClient::write",7,"unsigned char const *");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("rlSiemensTCPClient::write",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCPClient,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_write",1,SWIGTYPE_p_rlSiemensTCPClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_write",7,SWIGTYPE_p_unsigned_char);
  }
  
  arg8 = (int)lua_tonumber(L, 8);
  result = (int)(arg1)->write(arg2,arg3,arg4,arg5,arg6,(unsigned char const *)arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSiemensTCPClient_writeBit(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCPClient *arg1 = (rlSiemensTCPClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  unsigned char *arg8 = (unsigned char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSiemensTCPClient::writeBit",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCPClient::writeBit",1,"rlSiemensTCPClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCPClient::writeBit",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSiemensTCPClient::writeBit",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSiemensTCPClient::writeBit",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlSiemensTCPClient::writeBit",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlSiemensTCPClient::writeBit",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("rlSiemensTCPClient::writeBit",7,"int");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("rlSiemensTCPClient::writeBit",8,"unsigned char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCPClient,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_writeBit",1,SWIGTYPE_p_rlSiemensTCPClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_writeBit",8,SWIGTYPE_p_unsigned_char);
  }
  
  result = (int)(arg1)->writeBit(arg2,arg3,arg4,arg5,arg6,arg7,(unsigned char const *)arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSiemensTCPClient_writeByte(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCPClient *arg1 = (rlSiemensTCPClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  unsigned char *arg7 = (unsigned char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSiemensTCPClient::writeByte",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCPClient::writeByte",1,"rlSiemensTCPClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCPClient::writeByte",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSiemensTCPClient::writeByte",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSiemensTCPClient::writeByte",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlSiemensTCPClient::writeByte",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlSiemensTCPClient::writeByte",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("rlSiemensTCPClient::writeByte",7,"unsigned char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCPClient,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_writeByte",1,SWIGTYPE_p_rlSiemensTCPClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_writeByte",7,SWIGTYPE_p_unsigned_char);
  }
  
  result = (int)(arg1)->writeByte(arg2,arg3,arg4,arg5,arg6,(unsigned char const *)arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSiemensTCPClient_writeFloat(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCPClient *arg1 = (rlSiemensTCPClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  float *arg7 = (float *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSiemensTCPClient::writeFloat",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCPClient::writeFloat",1,"rlSiemensTCPClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCPClient::writeFloat",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSiemensTCPClient::writeFloat",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSiemensTCPClient::writeFloat",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlSiemensTCPClient::writeFloat",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlSiemensTCPClient::writeFloat",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("rlSiemensTCPClient::writeFloat",7,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCPClient,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_writeFloat",1,SWIGTYPE_p_rlSiemensTCPClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_writeFloat",7,SWIGTYPE_p_float);
  }
  
  result = (int)(arg1)->writeFloat(arg2,arg3,arg4,arg5,arg6,(float const *)arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSiemensTCPClient_writeDword(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCPClient *arg1 = (rlSiemensTCPClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int *arg7 = (int *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSiemensTCPClient::writeDword",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCPClient::writeDword",1,"rlSiemensTCPClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCPClient::writeDword",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSiemensTCPClient::writeDword",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSiemensTCPClient::writeDword",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlSiemensTCPClient::writeDword",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlSiemensTCPClient::writeDword",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("rlSiemensTCPClient::writeDword",7,"int const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCPClient,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_writeDword",1,SWIGTYPE_p_rlSiemensTCPClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_writeDword",7,SWIGTYPE_p_int);
  }
  
  result = (int)(arg1)->writeDword(arg2,arg3,arg4,arg5,arg6,(int const *)arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSiemensTCPClient_writeShort(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCPClient *arg1 = (rlSiemensTCPClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  short *arg7 = (short *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSiemensTCPClient::writeShort",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCPClient::writeShort",1,"rlSiemensTCPClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCPClient::writeShort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSiemensTCPClient::writeShort",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSiemensTCPClient::writeShort",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlSiemensTCPClient::writeShort",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlSiemensTCPClient::writeShort",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("rlSiemensTCPClient::writeShort",7,"short const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCPClient,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_writeShort",1,SWIGTYPE_p_rlSiemensTCPClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_short,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_writeShort",7,SWIGTYPE_p_short);
  }
  
  result = (int)(arg1)->writeShort(arg2,arg3,arg4,arg5,arg6,(short const *)arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSiemensTCPClient_writeUDword(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCPClient *arg1 = (rlSiemensTCPClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  unsigned int *arg7 = (unsigned int *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSiemensTCPClient::writeUDword",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCPClient::writeUDword",1,"rlSiemensTCPClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCPClient::writeUDword",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSiemensTCPClient::writeUDword",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSiemensTCPClient::writeUDword",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlSiemensTCPClient::writeUDword",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlSiemensTCPClient::writeUDword",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("rlSiemensTCPClient::writeUDword",7,"unsigned int const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCPClient,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_writeUDword",1,SWIGTYPE_p_rlSiemensTCPClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_writeUDword",7,SWIGTYPE_p_unsigned_int);
  }
  
  result = (int)(arg1)->writeUDword(arg2,arg3,arg4,arg5,arg6,(unsigned int const *)arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSiemensTCPClient_writeUShort(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCPClient *arg1 = (rlSiemensTCPClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  unsigned short *arg7 = (unsigned short *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSiemensTCPClient::writeUShort",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCPClient::writeUShort",1,"rlSiemensTCPClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCPClient::writeUShort",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSiemensTCPClient::writeUShort",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSiemensTCPClient::writeUShort",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlSiemensTCPClient::writeUShort",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlSiemensTCPClient::writeUShort",6,"int");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("rlSiemensTCPClient::writeUShort",7,"unsigned short const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCPClient,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_writeUShort",1,SWIGTYPE_p_rlSiemensTCPClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_writeUShort",7,SWIGTYPE_p_unsigned_short);
  }
  
  result = (int)(arg1)->writeUShort(arg2,arg3,arg4,arg5,arg6,(unsigned short const *)arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSiemensTCPClient_read(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCPClient *arg1 = (rlSiemensTCPClient *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlSiemensTCPClient::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCPClient::read",1,"rlSiemensTCPClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCPClient::read",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSiemensTCPClient::read",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCPClient,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_read",1,SWIGTYPE_p_rlSiemensTCPClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->read(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSiemensTCPClient_Float(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCPClient *arg1 = (rlSiemensTCPClient *) 0 ;
  int arg2 ;
  float result;
  
  SWIG_check_num_args("rlSiemensTCPClient::Float",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCPClient::Float",1,"rlSiemensTCPClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCPClient::Float",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCPClient,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_Float",1,SWIGTYPE_p_rlSiemensTCPClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)(arg1)->Float(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSiemensTCPClient_Dword(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCPClient *arg1 = (rlSiemensTCPClient *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlSiemensTCPClient::Dword",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCPClient::Dword",1,"rlSiemensTCPClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCPClient::Dword",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCPClient,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_Dword",1,SWIGTYPE_p_rlSiemensTCPClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->Dword(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSiemensTCPClient_Short(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCPClient *arg1 = (rlSiemensTCPClient *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlSiemensTCPClient::Short",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCPClient::Short",1,"rlSiemensTCPClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCPClient::Short",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCPClient,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_Short",1,SWIGTYPE_p_rlSiemensTCPClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->Short(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSiemensTCPClient_UDword(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCPClient *arg1 = (rlSiemensTCPClient *) 0 ;
  int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("rlSiemensTCPClient::UDword",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCPClient::UDword",1,"rlSiemensTCPClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCPClient::UDword",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCPClient,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_UDword",1,SWIGTYPE_p_rlSiemensTCPClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->UDword(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSiemensTCPClient_UShort(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCPClient *arg1 = (rlSiemensTCPClient *) 0 ;
  int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("rlSiemensTCPClient::UShort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCPClient::UShort",1,"rlSiemensTCPClient *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCPClient::UShort",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCPClient,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_UShort",1,SWIGTYPE_p_rlSiemensTCPClient);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (unsigned int)(arg1)->UShort(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSiemensTCPClient_buf_set(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCPClient *arg1 = (rlSiemensTCPClient *) 0 ;
  unsigned char *arg2 ;
  
  SWIG_check_num_args("rlSiemensTCPClient::buf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCPClient::buf",1,"rlSiemensTCPClient *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSiemensTCPClient::buf",2,"unsigned char [2048]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCPClient,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_buf_set",1,SWIGTYPE_p_rlSiemensTCPClient);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_buf_set",2,SWIGTYPE_p_unsigned_char);
  }
  
  {
    size_t ii;
    unsigned char *b = (unsigned char *) arg1->buf;
    for (ii = 0; ii < (size_t)2048; ii++) b[ii] = *((unsigned char *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSiemensTCPClient_buf_get(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCPClient *arg1 = (rlSiemensTCPClient *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("rlSiemensTCPClient::buf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCPClient::buf",1,"rlSiemensTCPClient *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCPClient,0))){
    SWIG_fail_ptr("rlSiemensTCPClient_buf_get",1,SWIGTYPE_p_rlSiemensTCPClient);
  }
  
  result = (unsigned char *)(unsigned char *) ((arg1)->buf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlSiemensTCPClient(void *obj) {
rlSiemensTCPClient *arg1 = (rlSiemensTCPClient *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlSiemensTCPClient(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlSiemensTCPClient);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlSiemensTCPClient_attributes[] = {
    { "buf", _wrap_rlSiemensTCPClient_buf_get, _wrap_rlSiemensTCPClient_buf_set },
    {0,0,0}
};
static swig_lua_method swig_rlSiemensTCPClient_methods[]= {
    { "write", _wrap_rlSiemensTCPClient_write},
    { "writeBit", _wrap_rlSiemensTCPClient_writeBit},
    { "writeByte", _wrap_rlSiemensTCPClient_writeByte},
    { "writeFloat", _wrap_rlSiemensTCPClient_writeFloat},
    { "writeDword", _wrap_rlSiemensTCPClient_writeDword},
    { "writeShort", _wrap_rlSiemensTCPClient_writeShort},
    { "writeUDword", _wrap_rlSiemensTCPClient_writeUDword},
    { "writeUShort", _wrap_rlSiemensTCPClient_writeUShort},
    { "read", _wrap_rlSiemensTCPClient_read},
    { "Float", _wrap_rlSiemensTCPClient_Float},
    { "Dword", _wrap_rlSiemensTCPClient_Dword},
    { "Short", _wrap_rlSiemensTCPClient_Short},
    { "UDword", _wrap_rlSiemensTCPClient_UDword},
    { "UShort", _wrap_rlSiemensTCPClient_UShort},
    {0,0}
};
static swig_lua_method swig_rlSiemensTCPClient_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlSiemensTCPClient_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlSiemensTCPClient_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ORG_DB", rlSiemensTCPClient::ORG_DB)},
    {SWIG_LUA_CONSTTAB_INT("ORG_M", rlSiemensTCPClient::ORG_M)},
    {SWIG_LUA_CONSTTAB_INT("ORG_E", rlSiemensTCPClient::ORG_E)},
    {SWIG_LUA_CONSTTAB_INT("ORG_A", rlSiemensTCPClient::ORG_A)},
    {SWIG_LUA_CONSTTAB_INT("ORG_PEPA", rlSiemensTCPClient::ORG_PEPA)},
    {SWIG_LUA_CONSTTAB_INT("ORG_Z", rlSiemensTCPClient::ORG_Z)},
    {SWIG_LUA_CONSTTAB_INT("ORG_T", rlSiemensTCPClient::ORG_T)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlSiemensTCPClient_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlSiemensTCPClient_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlSiemensTCPClient_Sf_SwigStatic = {
    "rlSiemensTCPClient",
    swig_rlSiemensTCPClient_Sf_SwigStatic_methods,
    swig_rlSiemensTCPClient_Sf_SwigStatic_attributes,
    swig_rlSiemensTCPClient_Sf_SwigStatic_constants,
    swig_rlSiemensTCPClient_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlSiemensTCPClient_bases[] = {0,0};
static const char *swig_rlSiemensTCPClient_base_names[] = {"rlMailbox *",0};
static swig_lua_class _wrap_class_rlSiemensTCPClient = { "rlSiemensTCPClient", "rlSiemensTCPClient", &SWIGTYPE_p_rlSiemensTCPClient,_proxy__wrap_new_rlSiemensTCPClient, swig_delete_rlSiemensTCPClient, swig_rlSiemensTCPClient_methods, swig_rlSiemensTCPClient_attributes, &swig_rlSiemensTCPClient_Sf_SwigStatic, swig_rlSiemensTCPClient_meta, swig_rlSiemensTCPClient_bases, swig_rlSiemensTCPClient_base_names };

static int _wrap_new_rlSiemensTCP__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  rlSiemensTCP *result = 0 ;
  
  SWIG_check_num_args("rlSiemensTCP::rlSiemensTCP",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlSiemensTCP::rlSiemensTCP",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCP::rlSiemensTCP",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSiemensTCP::rlSiemensTCP",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSiemensTCP::rlSiemensTCP",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlSiemensTCP::rlSiemensTCP",5,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (rlSiemensTCP *)new rlSiemensTCP((char const *)arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSiemensTCP,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSiemensTCP__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  rlSiemensTCP *result = 0 ;
  
  SWIG_check_num_args("rlSiemensTCP::rlSiemensTCP",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlSiemensTCP::rlSiemensTCP",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCP::rlSiemensTCP",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSiemensTCP::rlSiemensTCP",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSiemensTCP::rlSiemensTCP",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (rlSiemensTCP *)new rlSiemensTCP((char const *)arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSiemensTCP,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSiemensTCP__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  rlSiemensTCP *result = 0 ;
  
  SWIG_check_num_args("rlSiemensTCP::rlSiemensTCP",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlSiemensTCP::rlSiemensTCP",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCP::rlSiemensTCP",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSiemensTCP::rlSiemensTCP",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (rlSiemensTCP *)new rlSiemensTCP((char const *)arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSiemensTCP,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSiemensTCP__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  rlSiemensTCP *result = 0 ;
  
  SWIG_check_num_args("rlSiemensTCP::rlSiemensTCP",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlSiemensTCP::rlSiemensTCP",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCP::rlSiemensTCP",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (rlSiemensTCP *)new rlSiemensTCP((char const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSiemensTCP,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSiemensTCP__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  rlSiemensTCP *result = 0 ;
  
  SWIG_check_num_args("rlSiemensTCP::rlSiemensTCP",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlSiemensTCP::rlSiemensTCP",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (rlSiemensTCP *)new rlSiemensTCP((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSiemensTCP,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSiemensTCP(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_rlSiemensTCP__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_rlSiemensTCP__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_rlSiemensTCP__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_rlSiemensTCP__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_rlSiemensTCP__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlSiemensTCP'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSiemensTCP::rlSiemensTCP(char const *,int,int,int,int)\n"
    "    rlSiemensTCP::rlSiemensTCP(char const *,int,int,int)\n"
    "    rlSiemensTCP::rlSiemensTCP(char const *,int,int)\n"
    "    rlSiemensTCP::rlSiemensTCP(char const *,int)\n"
    "    rlSiemensTCP::rlSiemensTCP(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlSiemensTCP_getDefaultConnectBlock(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCP *arg1 = (rlSiemensTCP *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSiemensTCP::getDefaultConnectBlock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCP::getDefaultConnectBlock",1,"rlSiemensTCP *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSiemensTCP::getDefaultConnectBlock",2,"unsigned char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCP,0))){
    SWIG_fail_ptr("rlSiemensTCP_getDefaultConnectBlock",1,SWIGTYPE_p_rlSiemensTCP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlSiemensTCP_getDefaultConnectBlock",2,SWIGTYPE_p_unsigned_char);
  }
  
  result = (int)(arg1)->getDefaultConnectBlock(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSiemensTCP_setConnectBlock(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCP *arg1 = (rlSiemensTCP *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSiemensTCP::setConnectBlock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCP::setConnectBlock",1,"rlSiemensTCP *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSiemensTCP::setConnectBlock",2,"unsigned char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCP,0))){
    SWIG_fail_ptr("rlSiemensTCP_setConnectBlock",1,SWIGTYPE_p_rlSiemensTCP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlSiemensTCP_setConnectBlock",2,SWIGTYPE_p_unsigned_char);
  }
  
  result = (int)(arg1)->setConnectBlock((unsigned char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSiemensTCP_getConnectBlock(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCP *arg1 = (rlSiemensTCP *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSiemensTCP::getConnectBlock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCP::getConnectBlock",1,"rlSiemensTCP *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSiemensTCP::getConnectBlock",2,"unsigned char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCP,0))){
    SWIG_fail_ptr("rlSiemensTCP_getConnectBlock",1,SWIGTYPE_p_rlSiemensTCP);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlSiemensTCP_getConnectBlock",2,SWIGTYPE_p_unsigned_char);
  }
  
  result = (int)(arg1)->getConnectBlock(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSiemensTCP_write__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCP *arg1 = (rlSiemensTCP *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  unsigned char *arg6 = (unsigned char *) 0 ;
  int arg7 ;
  int result;
  
  SWIG_check_num_args("rlSiemensTCP::write",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCP::write",1,"rlSiemensTCP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCP::write",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSiemensTCP::write",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSiemensTCP::write",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlSiemensTCP::write",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("rlSiemensTCP::write",6,"unsigned char const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("rlSiemensTCP::write",7,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCP,0))){
    SWIG_fail_ptr("rlSiemensTCP_write",1,SWIGTYPE_p_rlSiemensTCP);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlSiemensTCP_write",6,SWIGTYPE_p_unsigned_char);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  result = (int)(arg1)->write(arg2,arg3,arg4,arg5,(unsigned char const *)arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSiemensTCP_write__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCP *arg1 = (rlSiemensTCP *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  unsigned char *arg6 = (unsigned char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSiemensTCP::write",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCP::write",1,"rlSiemensTCP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCP::write",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSiemensTCP::write",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSiemensTCP::write",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlSiemensTCP::write",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("rlSiemensTCP::write",6,"unsigned char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCP,0))){
    SWIG_fail_ptr("rlSiemensTCP_write",1,SWIGTYPE_p_rlSiemensTCP);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlSiemensTCP_write",6,SWIGTYPE_p_unsigned_char);
  }
  
  result = (int)(arg1)->write(arg2,arg3,arg4,arg5,(unsigned char const *)arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSiemensTCP_write(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSiemensTCP, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_rlSiemensTCP_write__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSiemensTCP, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_rlSiemensTCP_write__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlSiemensTCP_write'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSiemensTCP::write(int,int,int,int,unsigned char const *,int)\n"
    "    rlSiemensTCP::write(int,int,int,int,unsigned char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlSiemensTCP_fetch(lua_State* L) {
  int SWIG_arg = 0;
  rlSiemensTCP *arg1 = (rlSiemensTCP *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  unsigned char *arg6 = (unsigned char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSiemensTCP::fetch",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSiemensTCP::fetch",1,"rlSiemensTCP *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSiemensTCP::fetch",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSiemensTCP::fetch",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSiemensTCP::fetch",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlSiemensTCP::fetch",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("rlSiemensTCP::fetch",6,"unsigned char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSiemensTCP,0))){
    SWIG_fail_ptr("rlSiemensTCP_fetch",1,SWIGTYPE_p_rlSiemensTCP);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlSiemensTCP_fetch",6,SWIGTYPE_p_unsigned_char);
  }
  
  result = (int)(arg1)->fetch(arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlSiemensTCP(void *obj) {
rlSiemensTCP *arg1 = (rlSiemensTCP *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlSiemensTCP(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlSiemensTCP);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlSiemensTCP_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rlSiemensTCP_methods[]= {
    { "getDefaultConnectBlock", _wrap_rlSiemensTCP_getDefaultConnectBlock},
    { "setConnectBlock", _wrap_rlSiemensTCP_setConnectBlock},
    { "getConnectBlock", _wrap_rlSiemensTCP_getConnectBlock},
    { "write", _wrap_rlSiemensTCP_write},
    { "fetch", _wrap_rlSiemensTCP_fetch},
    {0,0}
};
static swig_lua_method swig_rlSiemensTCP_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlSiemensTCP_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlSiemensTCP_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ORG_DB", rlSiemensTCP::ORG_DB)},
    {SWIG_LUA_CONSTTAB_INT("ORG_M", rlSiemensTCP::ORG_M)},
    {SWIG_LUA_CONSTTAB_INT("ORG_E", rlSiemensTCP::ORG_E)},
    {SWIG_LUA_CONSTTAB_INT("ORG_A", rlSiemensTCP::ORG_A)},
    {SWIG_LUA_CONSTTAB_INT("ORG_PEPA", rlSiemensTCP::ORG_PEPA)},
    {SWIG_LUA_CONSTTAB_INT("ORG_Z", rlSiemensTCP::ORG_Z)},
    {SWIG_LUA_CONSTTAB_INT("ORG_T", rlSiemensTCP::ORG_T)},
    {SWIG_LUA_CONSTTAB_INT("ANY_SIEMENS_COMPATIBLE_PLC", rlSiemensTCP::ANY_SIEMENS_COMPATIBLE_PLC)},
    {SWIG_LUA_CONSTTAB_INT("S7_200", rlSiemensTCP::S7_200)},
    {SWIG_LUA_CONSTTAB_INT("S7_300", rlSiemensTCP::S7_300)},
    {SWIG_LUA_CONSTTAB_INT("S7_400", rlSiemensTCP::S7_400)},
    {SWIG_LUA_CONSTTAB_INT("S5", rlSiemensTCP::S5)},
    {SWIG_LUA_CONSTTAB_INT("RACK_SLOT", rlSiemensTCP::RACK_SLOT)},
    {SWIG_LUA_CONSTTAB_INT("S7_1200", rlSiemensTCP::S7_1200)},
    {SWIG_LUA_CONSTTAB_INT("LOGO", rlSiemensTCP::LOGO)},
    {SWIG_LUA_CONSTTAB_INT("WriteBit", rlSiemensTCP::WriteBit)},
    {SWIG_LUA_CONSTTAB_INT("WriteByte", rlSiemensTCP::WriteByte)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlSiemensTCP_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlSiemensTCP_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlSiemensTCP_Sf_SwigStatic = {
    "rlSiemensTCP",
    swig_rlSiemensTCP_Sf_SwigStatic_methods,
    swig_rlSiemensTCP_Sf_SwigStatic_attributes,
    swig_rlSiemensTCP_Sf_SwigStatic_constants,
    swig_rlSiemensTCP_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlSiemensTCP_bases[] = {0,0};
static const char *swig_rlSiemensTCP_base_names[] = {"rlSocket *",0};
static swig_lua_class _wrap_class_rlSiemensTCP = { "rlSiemensTCP", "rlSiemensTCP", &SWIGTYPE_p_rlSiemensTCP,_proxy__wrap_new_rlSiemensTCP, swig_delete_rlSiemensTCP, swig_rlSiemensTCP_methods, swig_rlSiemensTCP_attributes, &swig_rlSiemensTCP_Sf_SwigStatic, swig_rlSiemensTCP_meta, swig_rlSiemensTCP_bases, swig_rlSiemensTCP_base_names };

static int _wrap_new_rlSpawn(lua_State* L) {
  int SWIG_arg = 0;
  rlSpawn *result = 0 ;
  
  SWIG_check_num_args("rlSpawn::rlSpawn",0,0)
  result = (rlSpawn *)new rlSpawn();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSpawn,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpawn_spawn(lua_State* L) {
  int SWIG_arg = 0;
  rlSpawn *arg1 = (rlSpawn *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSpawn::spawn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpawn::spawn",1,"rlSpawn *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSpawn::spawn",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpawn,0))){
    SWIG_fail_ptr("rlSpawn_spawn",1,SWIGTYPE_p_rlSpawn);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->spawn((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpawn_readLine(lua_State* L) {
  int SWIG_arg = 0;
  rlSpawn *arg1 = (rlSpawn *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlSpawn::readLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpawn::readLine",1,"rlSpawn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpawn,0))){
    SWIG_fail_ptr("rlSpawn_readLine",1,SWIGTYPE_p_rlSpawn);
  }
  
  result = (char *)(arg1)->readLine();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpawn_getchar(lua_State* L) {
  int SWIG_arg = 0;
  rlSpawn *arg1 = (rlSpawn *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSpawn::getchar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpawn::getchar",1,"rlSpawn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpawn,0))){
    SWIG_fail_ptr("rlSpawn_getchar",1,SWIGTYPE_p_rlSpawn);
  }
  
  result = (int)(arg1)->getchar();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpawn_select__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlSpawn *arg1 = (rlSpawn *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlSpawn::select",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpawn::select",1,"rlSpawn *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSpawn::select",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpawn,0))){
    SWIG_fail_ptr("rlSpawn_select",1,SWIGTYPE_p_rlSpawn);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->select(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpawn_select__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSpawn *arg1 = (rlSpawn *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSpawn::select",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpawn::select",1,"rlSpawn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpawn,0))){
    SWIG_fail_ptr("rlSpawn_select",1,SWIGTYPE_p_rlSpawn);
  }
  
  result = (int)(arg1)->select();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpawn_select(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSpawn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rlSpawn_select__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSpawn, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_rlSpawn_select__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlSpawn_select'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSpawn::select(int)\n"
    "    rlSpawn::select()\n");
  lua_error(L);return 0;
}


static int _wrap_rlSpawn_writeString(lua_State* L) {
  int SWIG_arg = 0;
  rlSpawn *arg1 = (rlSpawn *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSpawn::writeString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpawn::writeString",1,"rlSpawn *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSpawn::writeString",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpawn,0))){
    SWIG_fail_ptr("rlSpawn_writeString",1,SWIGTYPE_p_rlSpawn);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->writeString((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpawn_write(lua_State* L) {
  int SWIG_arg = 0;
  rlSpawn *arg1 = (rlSpawn *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlSpawn::write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpawn::write",1,"rlSpawn *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSpawn::write",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSpawn::write",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpawn,0))){
    SWIG_fail_ptr("rlSpawn_write",1,SWIGTYPE_p_rlSpawn);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->write((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpawn_printf(lua_State* L) {
  int SWIG_arg = 0;
  rlSpawn *arg1 = (rlSpawn *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  int result;
  
  SWIG_check_num_args("rlSpawn::printf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpawn::printf",1,"rlSpawn *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSpawn::printf",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpawn,0))){
    SWIG_fail_ptr("rlSpawn_printf",1,SWIGTYPE_p_rlSpawn);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->printf((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpawn_printAll(lua_State* L) {
  int SWIG_arg = 0;
  rlSpawn *arg1 = (rlSpawn *) 0 ;
  
  SWIG_check_num_args("rlSpawn::printAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpawn::printAll",1,"rlSpawn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpawn,0))){
    SWIG_fail_ptr("rlSpawn_printAll",1,SWIGTYPE_p_rlSpawn);
  }
  
  (arg1)->printAll();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpawn_getFilepointer(lua_State* L) {
  int SWIG_arg = 0;
  rlSpawn *arg1 = (rlSpawn *) 0 ;
  FILE *result = 0 ;
  
  SWIG_check_num_args("rlSpawn::getFilepointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpawn::getFilepointer",1,"rlSpawn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpawn,0))){
    SWIG_fail_ptr("rlSpawn_getFilepointer",1,SWIGTYPE_p_rlSpawn);
  }
  
  result = (FILE *)(arg1)->getFilepointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FILE,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpawn_sigkill(lua_State* L) {
  int SWIG_arg = 0;
  rlSpawn *arg1 = (rlSpawn *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSpawn::sigkill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpawn::sigkill",1,"rlSpawn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpawn,0))){
    SWIG_fail_ptr("rlSpawn_sigkill",1,SWIGTYPE_p_rlSpawn);
  }
  
  result = (int)(arg1)->sigkill();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpawn_readJpegBuffer(lua_State* L) {
  int SWIG_arg = 0;
  rlSpawn *arg1 = (rlSpawn *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlSpawn::readJpegBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpawn::readJpegBuffer",1,"rlSpawn *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSpawn::readJpegBuffer",2,"unsigned char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSpawn::readJpegBuffer",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpawn,0))){
    SWIG_fail_ptr("rlSpawn_readJpegBuffer",1,SWIGTYPE_p_rlSpawn);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlSpawn_readJpegBuffer",2,SWIGTYPE_p_unsigned_char);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->readJpegBuffer(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpawn_pid_set(lua_State* L) {
  int SWIG_arg = 0;
  rlSpawn *arg1 = (rlSpawn *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlSpawn::pid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpawn::pid",1,"rlSpawn *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSpawn::pid",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpawn,0))){
    SWIG_fail_ptr("rlSpawn_pid_set",1,SWIGTYPE_p_rlSpawn);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->pid = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpawn_pid_get(lua_State* L) {
  int SWIG_arg = 0;
  rlSpawn *arg1 = (rlSpawn *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSpawn::pid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpawn::pid",1,"rlSpawn *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpawn,0))){
    SWIG_fail_ptr("rlSpawn_pid_get",1,SWIGTYPE_p_rlSpawn);
  }
  
  result = (int) ((arg1)->pid);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlSpawn(void *obj) {
rlSpawn *arg1 = (rlSpawn *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlSpawn(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlSpawn);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlSpawn_attributes[] = {
    { "pid", _wrap_rlSpawn_pid_get, _wrap_rlSpawn_pid_set },
    {0,0,0}
};
static swig_lua_method swig_rlSpawn_methods[]= {
    { "spawn", _wrap_rlSpawn_spawn},
    { "readLine", _wrap_rlSpawn_readLine},
    { "getchar", _wrap_rlSpawn_getchar},
    { "select", _wrap_rlSpawn_select},
    { "writeString", _wrap_rlSpawn_writeString},
    { "write", _wrap_rlSpawn_write},
    { "printf", _wrap_rlSpawn_printf},
    { "printAll", _wrap_rlSpawn_printAll},
    { "getFilepointer", _wrap_rlSpawn_getFilepointer},
    { "sigkill", _wrap_rlSpawn_sigkill},
    { "readJpegBuffer", _wrap_rlSpawn_readJpegBuffer},
    {0,0}
};
static swig_lua_method swig_rlSpawn_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlSpawn_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlSpawn_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlSpawn_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlSpawn_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlSpawn_Sf_SwigStatic = {
    "rlSpawn",
    swig_rlSpawn_Sf_SwigStatic_methods,
    swig_rlSpawn_Sf_SwigStatic_attributes,
    swig_rlSpawn_Sf_SwigStatic_constants,
    swig_rlSpawn_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlSpawn_bases[] = {0};
static const char *swig_rlSpawn_base_names[] = {0};
static swig_lua_class _wrap_class_rlSpawn = { "rlSpawn", "rlSpawn", &SWIGTYPE_p_rlSpawn,_proxy__wrap_new_rlSpawn, swig_delete_rlSpawn, swig_rlSpawn_methods, swig_rlSpawn_attributes, &swig_rlSpawn_Sf_SwigStatic, swig_rlSpawn_meta, swig_rlSpawn_bases, swig_rlSpawn_base_names };

static int _wrap_new_rlSpreadsheetCell__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  rlSpreadsheetCell *result = 0 ;
  
  SWIG_check_num_args("rlSpreadsheetCell::rlSpreadsheetCell",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlSpreadsheetCell::rlSpreadsheetCell",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (rlSpreadsheetCell *)new rlSpreadsheetCell((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSpreadsheetCell,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSpreadsheetCell__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetCell *result = 0 ;
  
  SWIG_check_num_args("rlSpreadsheetCell::rlSpreadsheetCell",0,0)
  result = (rlSpreadsheetCell *)new rlSpreadsheetCell();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSpreadsheetCell,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSpreadsheetCell(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_rlSpreadsheetCell__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_rlSpreadsheetCell__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlSpreadsheetCell'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSpreadsheetCell::rlSpreadsheetCell(char const *)\n"
    "    rlSpreadsheetCell::rlSpreadsheetCell()\n");
  lua_error(L);return 0;
}


static int _wrap_rlSpreadsheetCell_text(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetCell *arg1 = (rlSpreadsheetCell *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlSpreadsheetCell::text",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetCell::text",1,"rlSpreadsheetCell *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetCell,0))){
    SWIG_fail_ptr("rlSpreadsheetCell_text",1,SWIGTYPE_p_rlSpreadsheetCell);
  }
  
  result = (char *)(arg1)->text();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetCell_setText(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetCell *arg1 = (rlSpreadsheetCell *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("rlSpreadsheetCell::setText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetCell::setText",1,"rlSpreadsheetCell *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSpreadsheetCell::setText",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetCell,0))){
    SWIG_fail_ptr("rlSpreadsheetCell_setText",1,SWIGTYPE_p_rlSpreadsheetCell);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setText((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetCell_printf(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetCell *arg1 = (rlSpreadsheetCell *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  int result;
  
  SWIG_check_num_args("rlSpreadsheetCell::printf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetCell::printf",1,"rlSpreadsheetCell *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSpreadsheetCell::printf",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetCell,0))){
    SWIG_fail_ptr("rlSpreadsheetCell_printf",1,SWIGTYPE_p_rlSpreadsheetCell);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->printf((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetCell_clear(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetCell *arg1 = (rlSpreadsheetCell *) 0 ;
  
  SWIG_check_num_args("rlSpreadsheetCell::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetCell::clear",1,"rlSpreadsheetCell *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetCell,0))){
    SWIG_fail_ptr("rlSpreadsheetCell_clear",1,SWIGTYPE_p_rlSpreadsheetCell);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetCell_setNextCell(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetCell *arg1 = (rlSpreadsheetCell *) 0 ;
  rlSpreadsheetCell *arg2 = (rlSpreadsheetCell *) 0 ;
  
  SWIG_check_num_args("rlSpreadsheetCell::setNextCell",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetCell::setNextCell",1,"rlSpreadsheetCell *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSpreadsheetCell::setNextCell",2,"rlSpreadsheetCell *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetCell,0))){
    SWIG_fail_ptr("rlSpreadsheetCell_setNextCell",1,SWIGTYPE_p_rlSpreadsheetCell);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSpreadsheetCell,0))){
    SWIG_fail_ptr("rlSpreadsheetCell_setNextCell",2,SWIGTYPE_p_rlSpreadsheetCell);
  }
  
  (arg1)->setNextCell(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetCell_getNextCell(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetCell *arg1 = (rlSpreadsheetCell *) 0 ;
  rlSpreadsheetCell *result = 0 ;
  
  SWIG_check_num_args("rlSpreadsheetCell::getNextCell",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetCell::getNextCell",1,"rlSpreadsheetCell *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetCell,0))){
    SWIG_fail_ptr("rlSpreadsheetCell_getNextCell",1,SWIGTYPE_p_rlSpreadsheetCell);
  }
  
  result = (rlSpreadsheetCell *)(arg1)->getNextCell();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSpreadsheetCell,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetCell_exists(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetCell *arg1 = (rlSpreadsheetCell *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSpreadsheetCell::exists",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetCell::exists",1,"rlSpreadsheetCell *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetCell,0))){
    SWIG_fail_ptr("rlSpreadsheetCell_exists",1,SWIGTYPE_p_rlSpreadsheetCell);
  }
  
  result = (int)(arg1)->exists();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlSpreadsheetCell(void *obj) {
rlSpreadsheetCell *arg1 = (rlSpreadsheetCell *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlSpreadsheetCell(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlSpreadsheetCell);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlSpreadsheetCell_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rlSpreadsheetCell_methods[]= {
    { "text", _wrap_rlSpreadsheetCell_text},
    { "setText", _wrap_rlSpreadsheetCell_setText},
    { "printf", _wrap_rlSpreadsheetCell_printf},
    { "clear", _wrap_rlSpreadsheetCell_clear},
    { "setNextCell", _wrap_rlSpreadsheetCell_setNextCell},
    { "getNextCell", _wrap_rlSpreadsheetCell_getNextCell},
    { "exists", _wrap_rlSpreadsheetCell_exists},
    {0,0}
};
static swig_lua_method swig_rlSpreadsheetCell_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlSpreadsheetCell_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlSpreadsheetCell_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlSpreadsheetCell_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlSpreadsheetCell_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlSpreadsheetCell_Sf_SwigStatic = {
    "rlSpreadsheetCell",
    swig_rlSpreadsheetCell_Sf_SwigStatic_methods,
    swig_rlSpreadsheetCell_Sf_SwigStatic_attributes,
    swig_rlSpreadsheetCell_Sf_SwigStatic_constants,
    swig_rlSpreadsheetCell_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlSpreadsheetCell_bases[] = {0};
static const char *swig_rlSpreadsheetCell_base_names[] = {0};
static swig_lua_class _wrap_class_rlSpreadsheetCell = { "rlSpreadsheetCell", "rlSpreadsheetCell", &SWIGTYPE_p_rlSpreadsheetCell,_proxy__wrap_new_rlSpreadsheetCell, swig_delete_rlSpreadsheetCell, swig_rlSpreadsheetCell_methods, swig_rlSpreadsheetCell_attributes, &swig_rlSpreadsheetCell_Sf_SwigStatic, swig_rlSpreadsheetCell_meta, swig_rlSpreadsheetCell_bases, swig_rlSpreadsheetCell_base_names };

static int _wrap_new_rlSpreadsheetRow(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetRow *result = 0 ;
  
  SWIG_check_num_args("rlSpreadsheetRow::rlSpreadsheetRow",0,0)
  result = (rlSpreadsheetRow *)new rlSpreadsheetRow();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSpreadsheetRow,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetRow_text(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetRow *arg1 = (rlSpreadsheetRow *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlSpreadsheetRow::text",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetRow::text",1,"rlSpreadsheetRow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSpreadsheetRow::text",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetRow,0))){
    SWIG_fail_ptr("rlSpreadsheetRow_text",1,SWIGTYPE_p_rlSpreadsheetRow);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(arg1)->text(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetRow_setText(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetRow *arg1 = (rlSpreadsheetRow *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("rlSpreadsheetRow::setText",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetRow::setText",1,"rlSpreadsheetRow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSpreadsheetRow::setText",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlSpreadsheetRow::setText",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetRow,0))){
    SWIG_fail_ptr("rlSpreadsheetRow_setText",1,SWIGTYPE_p_rlSpreadsheetRow);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->setText(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetRow_printf(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetRow *arg1 = (rlSpreadsheetRow *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  int result;
  
  SWIG_check_num_args("rlSpreadsheetRow::printf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetRow::printf",1,"rlSpreadsheetRow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSpreadsheetRow::printf",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlSpreadsheetRow::printf",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetRow,0))){
    SWIG_fail_ptr("rlSpreadsheetRow_printf",1,SWIGTYPE_p_rlSpreadsheetRow);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->printf(arg2,(char const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetRow_clear(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetRow *arg1 = (rlSpreadsheetRow *) 0 ;
  
  SWIG_check_num_args("rlSpreadsheetRow::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetRow::clear",1,"rlSpreadsheetRow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetRow,0))){
    SWIG_fail_ptr("rlSpreadsheetRow_clear",1,SWIGTYPE_p_rlSpreadsheetRow);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetRow_setNextRow(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetRow *arg1 = (rlSpreadsheetRow *) 0 ;
  rlSpreadsheetRow *arg2 = (rlSpreadsheetRow *) 0 ;
  
  SWIG_check_num_args("rlSpreadsheetRow::setNextRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetRow::setNextRow",1,"rlSpreadsheetRow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSpreadsheetRow::setNextRow",2,"rlSpreadsheetRow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetRow,0))){
    SWIG_fail_ptr("rlSpreadsheetRow_setNextRow",1,SWIGTYPE_p_rlSpreadsheetRow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSpreadsheetRow,0))){
    SWIG_fail_ptr("rlSpreadsheetRow_setNextRow",2,SWIGTYPE_p_rlSpreadsheetRow);
  }
  
  (arg1)->setNextRow(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetRow_getNextRow(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetRow *arg1 = (rlSpreadsheetRow *) 0 ;
  rlSpreadsheetRow *result = 0 ;
  
  SWIG_check_num_args("rlSpreadsheetRow::getNextRow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetRow::getNextRow",1,"rlSpreadsheetRow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetRow,0))){
    SWIG_fail_ptr("rlSpreadsheetRow_getNextRow",1,SWIGTYPE_p_rlSpreadsheetRow);
  }
  
  result = (rlSpreadsheetRow *)(arg1)->getNextRow();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSpreadsheetRow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetRow_getFirstCell(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetRow *arg1 = (rlSpreadsheetRow *) 0 ;
  rlSpreadsheetCell *result = 0 ;
  
  SWIG_check_num_args("rlSpreadsheetRow::getFirstCell",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetRow::getFirstCell",1,"rlSpreadsheetRow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetRow,0))){
    SWIG_fail_ptr("rlSpreadsheetRow_getFirstCell",1,SWIGTYPE_p_rlSpreadsheetRow);
  }
  
  result = (rlSpreadsheetCell *)(arg1)->getFirstCell();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSpreadsheetCell,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetRow_readRow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetRow *arg1 = (rlSpreadsheetRow *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  char arg3 ;
  
  SWIG_check_num_args("rlSpreadsheetRow::readRow",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetRow::readRow",1,"rlSpreadsheetRow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSpreadsheetRow::readRow",2,"unsigned char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlSpreadsheetRow::readRow",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetRow,0))){
    SWIG_fail_ptr("rlSpreadsheetRow_readRow",1,SWIGTYPE_p_rlSpreadsheetRow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlSpreadsheetRow_readRow",2,SWIGTYPE_p_unsigned_char);
  }
  
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->readRow((unsigned char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetRow_readRow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetRow *arg1 = (rlSpreadsheetRow *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  SWIG_check_num_args("rlSpreadsheetRow::readRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetRow::readRow",1,"rlSpreadsheetRow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSpreadsheetRow::readRow",2,"unsigned char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetRow,0))){
    SWIG_fail_ptr("rlSpreadsheetRow_readRow",1,SWIGTYPE_p_rlSpreadsheetRow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlSpreadsheetRow_readRow",2,SWIGTYPE_p_unsigned_char);
  }
  
  (arg1)->readRow((unsigned char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetRow_readRow(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSpreadsheetRow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_rlSpreadsheetRow_readRow__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSpreadsheetRow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_rlSpreadsheetRow_readRow__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlSpreadsheetRow_readRow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSpreadsheetRow::readRow(unsigned char const *,char)\n"
    "    rlSpreadsheetRow::readRow(unsigned char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlSpreadsheetRow_writeRow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetRow *arg1 = (rlSpreadsheetRow *) 0 ;
  void *arg2 = (void *) 0 ;
  char arg3 ;
  
  SWIG_check_num_args("rlSpreadsheetRow::writeRow",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetRow::writeRow",1,"rlSpreadsheetRow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSpreadsheetRow::writeRow",2,"void *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlSpreadsheetRow::writeRow",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetRow,0))){
    SWIG_fail_ptr("rlSpreadsheetRow_writeRow",1,SWIGTYPE_p_rlSpreadsheetRow);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlSpreadsheetRow_writeRow");
  arg3 = (lua_tostring(L, 3))[0];
  (arg1)->writeRow(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetRow_writeRow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetRow *arg1 = (rlSpreadsheetRow *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("rlSpreadsheetRow::writeRow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetRow::writeRow",1,"rlSpreadsheetRow *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSpreadsheetRow::writeRow",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetRow,0))){
    SWIG_fail_ptr("rlSpreadsheetRow_writeRow",1,SWIGTYPE_p_rlSpreadsheetRow);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"rlSpreadsheetRow_writeRow");
  (arg1)->writeRow(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetRow_writeRow(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSpreadsheetRow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_rlSpreadsheetRow_writeRow__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSpreadsheetRow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_rlSpreadsheetRow_writeRow__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlSpreadsheetRow_writeRow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSpreadsheetRow::writeRow(void *,char)\n"
    "    rlSpreadsheetRow::writeRow(void *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlSpreadsheetRow_exists(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetRow *arg1 = (rlSpreadsheetRow *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlSpreadsheetRow::exists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetRow::exists",1,"rlSpreadsheetRow *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSpreadsheetRow::exists",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetRow,0))){
    SWIG_fail_ptr("rlSpreadsheetRow_exists",1,SWIGTYPE_p_rlSpreadsheetRow);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->exists(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlSpreadsheetRow(void *obj) {
rlSpreadsheetRow *arg1 = (rlSpreadsheetRow *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlSpreadsheetRow(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlSpreadsheetRow);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlSpreadsheetRow_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rlSpreadsheetRow_methods[]= {
    { "text", _wrap_rlSpreadsheetRow_text},
    { "setText", _wrap_rlSpreadsheetRow_setText},
    { "printf", _wrap_rlSpreadsheetRow_printf},
    { "clear", _wrap_rlSpreadsheetRow_clear},
    { "setNextRow", _wrap_rlSpreadsheetRow_setNextRow},
    { "getNextRow", _wrap_rlSpreadsheetRow_getNextRow},
    { "getFirstCell", _wrap_rlSpreadsheetRow_getFirstCell},
    { "readRow", _wrap_rlSpreadsheetRow_readRow},
    { "writeRow", _wrap_rlSpreadsheetRow_writeRow},
    { "exists", _wrap_rlSpreadsheetRow_exists},
    {0,0}
};
static swig_lua_method swig_rlSpreadsheetRow_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlSpreadsheetRow_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlSpreadsheetRow_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlSpreadsheetRow_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlSpreadsheetRow_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlSpreadsheetRow_Sf_SwigStatic = {
    "rlSpreadsheetRow",
    swig_rlSpreadsheetRow_Sf_SwigStatic_methods,
    swig_rlSpreadsheetRow_Sf_SwigStatic_attributes,
    swig_rlSpreadsheetRow_Sf_SwigStatic_constants,
    swig_rlSpreadsheetRow_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlSpreadsheetRow_bases[] = {0};
static const char *swig_rlSpreadsheetRow_base_names[] = {0};
static swig_lua_class _wrap_class_rlSpreadsheetRow = { "rlSpreadsheetRow", "rlSpreadsheetRow", &SWIGTYPE_p_rlSpreadsheetRow,_proxy__wrap_new_rlSpreadsheetRow, swig_delete_rlSpreadsheetRow, swig_rlSpreadsheetRow_methods, swig_rlSpreadsheetRow_attributes, &swig_rlSpreadsheetRow_Sf_SwigStatic, swig_rlSpreadsheetRow_meta, swig_rlSpreadsheetRow_bases, swig_rlSpreadsheetRow_base_names };

static int _wrap_new_rlSpreadsheetTable__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  rlSpreadsheetTable *result = 0 ;
  
  SWIG_check_num_args("rlSpreadsheetTable::rlSpreadsheetTable",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlSpreadsheetTable::rlSpreadsheetTable",1,"char");
  arg1 = (lua_tostring(L, 1))[0];
  result = (rlSpreadsheetTable *)new rlSpreadsheetTable(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSpreadsheetTable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSpreadsheetTable__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetTable *result = 0 ;
  
  SWIG_check_num_args("rlSpreadsheetTable::rlSpreadsheetTable",0,0)
  result = (rlSpreadsheetTable *)new rlSpreadsheetTable();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSpreadsheetTable,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSpreadsheetTable(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_rlSpreadsheetTable__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      return _wrap_new_rlSpreadsheetTable__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlSpreadsheetTable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSpreadsheetTable::rlSpreadsheetTable(char)\n"
    "    rlSpreadsheetTable::rlSpreadsheetTable()\n");
  lua_error(L);return 0;
}


static int _wrap_rlSpreadsheetTable_text(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetTable *arg1 = (rlSpreadsheetTable *) 0 ;
  int arg2 ;
  int arg3 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlSpreadsheetTable::text",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetTable::text",1,"rlSpreadsheetTable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSpreadsheetTable::text",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSpreadsheetTable::text",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetTable,0))){
    SWIG_fail_ptr("rlSpreadsheetTable_text",1,SWIGTYPE_p_rlSpreadsheetTable);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (char *)(arg1)->text(arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetTable_setText(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetTable *arg1 = (rlSpreadsheetTable *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  SWIG_check_num_args("rlSpreadsheetTable::setText",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetTable::setText",1,"rlSpreadsheetTable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSpreadsheetTable::setText",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSpreadsheetTable::setText",3,"int");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("rlSpreadsheetTable::setText",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetTable,0))){
    SWIG_fail_ptr("rlSpreadsheetTable_setText",1,SWIGTYPE_p_rlSpreadsheetTable);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  (arg1)->setText(arg2,arg3,(char const *)arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetTable_printf(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetTable *arg1 = (rlSpreadsheetTable *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  int result;
  
  SWIG_check_num_args("rlSpreadsheetTable::printf",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetTable::printf",1,"rlSpreadsheetTable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSpreadsheetTable::printf",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSpreadsheetTable::printf",3,"int");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("rlSpreadsheetTable::printf",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetTable,0))){
    SWIG_fail_ptr("rlSpreadsheetTable_printf",1,SWIGTYPE_p_rlSpreadsheetTable);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (int)(arg1)->printf(arg2,arg3,(char const *)arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetTable_clear(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetTable *arg1 = (rlSpreadsheetTable *) 0 ;
  
  SWIG_check_num_args("rlSpreadsheetTable::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetTable::clear",1,"rlSpreadsheetTable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetTable,0))){
    SWIG_fail_ptr("rlSpreadsheetTable_clear",1,SWIGTYPE_p_rlSpreadsheetTable);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetTable_read(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetTable *arg1 = (rlSpreadsheetTable *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSpreadsheetTable::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetTable::read",1,"rlSpreadsheetTable *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSpreadsheetTable::read",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetTable,0))){
    SWIG_fail_ptr("rlSpreadsheetTable_read",1,SWIGTYPE_p_rlSpreadsheetTable);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->read((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetTable_write(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetTable *arg1 = (rlSpreadsheetTable *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSpreadsheetTable::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetTable::write",1,"rlSpreadsheetTable *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSpreadsheetTable::write",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetTable,0))){
    SWIG_fail_ptr("rlSpreadsheetTable_write",1,SWIGTYPE_p_rlSpreadsheetTable);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->write((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetTable_setNextTable(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetTable *arg1 = (rlSpreadsheetTable *) 0 ;
  rlSpreadsheetTable *arg2 = (rlSpreadsheetTable *) 0 ;
  
  SWIG_check_num_args("rlSpreadsheetTable::setNextTable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetTable::setNextTable",1,"rlSpreadsheetTable *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSpreadsheetTable::setNextTable",2,"rlSpreadsheetTable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetTable,0))){
    SWIG_fail_ptr("rlSpreadsheetTable_setNextTable",1,SWIGTYPE_p_rlSpreadsheetTable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSpreadsheetTable,0))){
    SWIG_fail_ptr("rlSpreadsheetTable_setNextTable",2,SWIGTYPE_p_rlSpreadsheetTable);
  }
  
  (arg1)->setNextTable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetTable_getNextTable(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetTable *arg1 = (rlSpreadsheetTable *) 0 ;
  rlSpreadsheetTable *result = 0 ;
  
  SWIG_check_num_args("rlSpreadsheetTable::getNextTable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetTable::getNextTable",1,"rlSpreadsheetTable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetTable,0))){
    SWIG_fail_ptr("rlSpreadsheetTable_getNextTable",1,SWIGTYPE_p_rlSpreadsheetTable);
  }
  
  result = (rlSpreadsheetTable *)(arg1)->getNextTable();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSpreadsheetTable,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetTable_getFirstRow(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetTable *arg1 = (rlSpreadsheetTable *) 0 ;
  rlSpreadsheetRow *result = 0 ;
  
  SWIG_check_num_args("rlSpreadsheetTable::getFirstRow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetTable::getFirstRow",1,"rlSpreadsheetTable *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetTable,0))){
    SWIG_fail_ptr("rlSpreadsheetTable_getFirstRow",1,SWIGTYPE_p_rlSpreadsheetTable);
  }
  
  result = (rlSpreadsheetRow *)(arg1)->getFirstRow();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSpreadsheetRow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetTable_exists(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetTable *arg1 = (rlSpreadsheetTable *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlSpreadsheetTable::exists",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetTable::exists",1,"rlSpreadsheetTable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSpreadsheetTable::exists",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSpreadsheetTable::exists",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetTable,0))){
    SWIG_fail_ptr("rlSpreadsheetTable_exists",1,SWIGTYPE_p_rlSpreadsheetTable);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->exists(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetTable_setDelimitor(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetTable *arg1 = (rlSpreadsheetTable *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("rlSpreadsheetTable::setDelimitor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetTable::setDelimitor",1,"rlSpreadsheetTable *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSpreadsheetTable::setDelimitor",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetTable,0))){
    SWIG_fail_ptr("rlSpreadsheetTable_setDelimitor",1,SWIGTYPE_p_rlSpreadsheetTable);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  (arg1)->setDelimitor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlSpreadsheetTable(void *obj) {
rlSpreadsheetTable *arg1 = (rlSpreadsheetTable *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlSpreadsheetTable(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlSpreadsheetTable);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlSpreadsheetTable_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rlSpreadsheetTable_methods[]= {
    { "text", _wrap_rlSpreadsheetTable_text},
    { "setText", _wrap_rlSpreadsheetTable_setText},
    { "printf", _wrap_rlSpreadsheetTable_printf},
    { "clear", _wrap_rlSpreadsheetTable_clear},
    { "read", _wrap_rlSpreadsheetTable_read},
    { "write", _wrap_rlSpreadsheetTable_write},
    { "setNextTable", _wrap_rlSpreadsheetTable_setNextTable},
    { "getNextTable", _wrap_rlSpreadsheetTable_getNextTable},
    { "getFirstRow", _wrap_rlSpreadsheetTable_getFirstRow},
    { "exists", _wrap_rlSpreadsheetTable_exists},
    { "setDelimitor", _wrap_rlSpreadsheetTable_setDelimitor},
    {0,0}
};
static swig_lua_method swig_rlSpreadsheetTable_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlSpreadsheetTable_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlSpreadsheetTable_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlSpreadsheetTable_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlSpreadsheetTable_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlSpreadsheetTable_Sf_SwigStatic = {
    "rlSpreadsheetTable",
    swig_rlSpreadsheetTable_Sf_SwigStatic_methods,
    swig_rlSpreadsheetTable_Sf_SwigStatic_attributes,
    swig_rlSpreadsheetTable_Sf_SwigStatic_constants,
    swig_rlSpreadsheetTable_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlSpreadsheetTable_bases[] = {0};
static const char *swig_rlSpreadsheetTable_base_names[] = {0};
static swig_lua_class _wrap_class_rlSpreadsheetTable = { "rlSpreadsheetTable", "rlSpreadsheetTable", &SWIGTYPE_p_rlSpreadsheetTable,_proxy__wrap_new_rlSpreadsheetTable, swig_delete_rlSpreadsheetTable, swig_rlSpreadsheetTable_methods, swig_rlSpreadsheetTable_attributes, &swig_rlSpreadsheetTable_Sf_SwigStatic, swig_rlSpreadsheetTable_meta, swig_rlSpreadsheetTable_bases, swig_rlSpreadsheetTable_base_names };

static int _wrap_new_rlSpreadsheetWorkbook__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  rlSpreadsheetWorkbook *result = 0 ;
  
  SWIG_check_num_args("rlSpreadsheetWorkbook::rlSpreadsheetWorkbook",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlSpreadsheetWorkbook::rlSpreadsheetWorkbook",1,"char");
  arg1 = (lua_tostring(L, 1))[0];
  result = (rlSpreadsheetWorkbook *)new rlSpreadsheetWorkbook(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSpreadsheetWorkbook,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSpreadsheetWorkbook__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetWorkbook *result = 0 ;
  
  SWIG_check_num_args("rlSpreadsheetWorkbook::rlSpreadsheetWorkbook",0,0)
  result = (rlSpreadsheetWorkbook *)new rlSpreadsheetWorkbook();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSpreadsheetWorkbook,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSpreadsheetWorkbook(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_rlSpreadsheetWorkbook__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      return _wrap_new_rlSpreadsheetWorkbook__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlSpreadsheetWorkbook'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSpreadsheetWorkbook::rlSpreadsheetWorkbook(char)\n"
    "    rlSpreadsheetWorkbook::rlSpreadsheetWorkbook()\n");
  lua_error(L);return 0;
}


static int _wrap_rlSpreadsheetWorkbook_text(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetWorkbook *arg1 = (rlSpreadsheetWorkbook *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlSpreadsheetWorkbook::text",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetWorkbook::text",1,"rlSpreadsheetWorkbook *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSpreadsheetWorkbook::text",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSpreadsheetWorkbook::text",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSpreadsheetWorkbook::text",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetWorkbook,0))){
    SWIG_fail_ptr("rlSpreadsheetWorkbook_text",1,SWIGTYPE_p_rlSpreadsheetWorkbook);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (char *)(arg1)->text(arg2,arg3,arg4);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetWorkbook_setText(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetWorkbook *arg1 = (rlSpreadsheetWorkbook *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  
  SWIG_check_num_args("rlSpreadsheetWorkbook::setText",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetWorkbook::setText",1,"rlSpreadsheetWorkbook *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSpreadsheetWorkbook::setText",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSpreadsheetWorkbook::setText",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSpreadsheetWorkbook::setText",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("rlSpreadsheetWorkbook::setText",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetWorkbook,0))){
    SWIG_fail_ptr("rlSpreadsheetWorkbook_setText",1,SWIGTYPE_p_rlSpreadsheetWorkbook);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  (arg1)->setText(arg2,arg3,arg4,(char const *)arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetWorkbook_printf(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetWorkbook *arg1 = (rlSpreadsheetWorkbook *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  void *arg6 = 0 ;
  int result;
  
  SWIG_check_num_args("rlSpreadsheetWorkbook::printf",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetWorkbook::printf",1,"rlSpreadsheetWorkbook *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSpreadsheetWorkbook::printf",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSpreadsheetWorkbook::printf",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSpreadsheetWorkbook::printf",4,"int");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("rlSpreadsheetWorkbook::printf",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetWorkbook,0))){
    SWIG_fail_ptr("rlSpreadsheetWorkbook_printf",1,SWIGTYPE_p_rlSpreadsheetWorkbook);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (int)(arg1)->printf(arg2,arg3,arg4,(char const *)arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetWorkbook_clear(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetWorkbook *arg1 = (rlSpreadsheetWorkbook *) 0 ;
  
  SWIG_check_num_args("rlSpreadsheetWorkbook::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetWorkbook::clear",1,"rlSpreadsheetWorkbook *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetWorkbook,0))){
    SWIG_fail_ptr("rlSpreadsheetWorkbook_clear",1,SWIGTYPE_p_rlSpreadsheetWorkbook);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetWorkbook_read(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetWorkbook *arg1 = (rlSpreadsheetWorkbook *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSpreadsheetWorkbook::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetWorkbook::read",1,"rlSpreadsheetWorkbook *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSpreadsheetWorkbook::read",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetWorkbook,0))){
    SWIG_fail_ptr("rlSpreadsheetWorkbook_read",1,SWIGTYPE_p_rlSpreadsheetWorkbook);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->read((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetWorkbook_write(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetWorkbook *arg1 = (rlSpreadsheetWorkbook *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSpreadsheetWorkbook::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetWorkbook::write",1,"rlSpreadsheetWorkbook *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSpreadsheetWorkbook::write",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetWorkbook,0))){
    SWIG_fail_ptr("rlSpreadsheetWorkbook_write",1,SWIGTYPE_p_rlSpreadsheetWorkbook);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->write((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetWorkbook_exists(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetWorkbook *arg1 = (rlSpreadsheetWorkbook *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlSpreadsheetWorkbook::exists",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetWorkbook::exists",1,"rlSpreadsheetWorkbook *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSpreadsheetWorkbook::exists",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSpreadsheetWorkbook::exists",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSpreadsheetWorkbook::exists",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetWorkbook,0))){
    SWIG_fail_ptr("rlSpreadsheetWorkbook_exists",1,SWIGTYPE_p_rlSpreadsheetWorkbook);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->exists(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetWorkbook_getFirstTable(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetWorkbook *arg1 = (rlSpreadsheetWorkbook *) 0 ;
  rlSpreadsheetTable *result = 0 ;
  
  SWIG_check_num_args("rlSpreadsheetWorkbook::getFirstTable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetWorkbook::getFirstTable",1,"rlSpreadsheetWorkbook *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetWorkbook,0))){
    SWIG_fail_ptr("rlSpreadsheetWorkbook_getFirstTable",1,SWIGTYPE_p_rlSpreadsheetWorkbook);
  }
  
  result = (rlSpreadsheetTable *)(arg1)->getFirstTable();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSpreadsheetTable,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSpreadsheetWorkbook_setDelimitor(lua_State* L) {
  int SWIG_arg = 0;
  rlSpreadsheetWorkbook *arg1 = (rlSpreadsheetWorkbook *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("rlSpreadsheetWorkbook::setDelimitor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSpreadsheetWorkbook::setDelimitor",1,"rlSpreadsheetWorkbook *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSpreadsheetWorkbook::setDelimitor",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSpreadsheetWorkbook,0))){
    SWIG_fail_ptr("rlSpreadsheetWorkbook_setDelimitor",1,SWIGTYPE_p_rlSpreadsheetWorkbook);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  (arg1)->setDelimitor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlSpreadsheetWorkbook(void *obj) {
rlSpreadsheetWorkbook *arg1 = (rlSpreadsheetWorkbook *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlSpreadsheetWorkbook(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlSpreadsheetWorkbook);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlSpreadsheetWorkbook_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rlSpreadsheetWorkbook_methods[]= {
    { "text", _wrap_rlSpreadsheetWorkbook_text},
    { "setText", _wrap_rlSpreadsheetWorkbook_setText},
    { "printf", _wrap_rlSpreadsheetWorkbook_printf},
    { "clear", _wrap_rlSpreadsheetWorkbook_clear},
    { "read", _wrap_rlSpreadsheetWorkbook_read},
    { "write", _wrap_rlSpreadsheetWorkbook_write},
    { "exists", _wrap_rlSpreadsheetWorkbook_exists},
    { "getFirstTable", _wrap_rlSpreadsheetWorkbook_getFirstTable},
    { "setDelimitor", _wrap_rlSpreadsheetWorkbook_setDelimitor},
    {0,0}
};
static swig_lua_method swig_rlSpreadsheetWorkbook_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlSpreadsheetWorkbook_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlSpreadsheetWorkbook_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlSpreadsheetWorkbook_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlSpreadsheetWorkbook_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlSpreadsheetWorkbook_Sf_SwigStatic = {
    "rlSpreadsheetWorkbook",
    swig_rlSpreadsheetWorkbook_Sf_SwigStatic_methods,
    swig_rlSpreadsheetWorkbook_Sf_SwigStatic_attributes,
    swig_rlSpreadsheetWorkbook_Sf_SwigStatic_constants,
    swig_rlSpreadsheetWorkbook_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlSpreadsheetWorkbook_bases[] = {0};
static const char *swig_rlSpreadsheetWorkbook_base_names[] = {0};
static swig_lua_class _wrap_class_rlSpreadsheetWorkbook = { "rlSpreadsheetWorkbook", "rlSpreadsheetWorkbook", &SWIGTYPE_p_rlSpreadsheetWorkbook,_proxy__wrap_new_rlSpreadsheetWorkbook, swig_delete_rlSpreadsheetWorkbook, swig_rlSpreadsheetWorkbook_methods, swig_rlSpreadsheetWorkbook_attributes, &swig_rlSpreadsheetWorkbook_Sf_SwigStatic, swig_rlSpreadsheetWorkbook_meta, swig_rlSpreadsheetWorkbook_bases, swig_rlSpreadsheetWorkbook_base_names };

static int _wrap_rlCRLF_get(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("rlCRLF",0,0)
  result = (char *)(char *)rlCRLF;
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  rlString *result = 0 ;
  
  SWIG_check_num_args("rlString::rlString",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("rlString::rlString",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (rlString *)new rlString((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlString,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlString *result = 0 ;
  
  SWIG_check_num_args("rlString::rlString",0,0)
  result = (rlString *)new rlString();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlString,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlString__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = 0 ;
  rlString *result = 0 ;
  
  SWIG_check_num_args("rlString::rlString",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("rlString::rlString",1,"rlString &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("new_rlString",1,SWIGTYPE_p_rlString);
  }
  
  result = (rlString *)new rlString(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlString,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlString__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  rlString *result = 0 ;
  
  SWIG_check_num_args("rlString::rlString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::rlString",1,"rlString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("new_rlString",1,SWIGTYPE_p_rlString);
  }
  
  result = (rlString *)new rlString(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlString,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlString__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = 0 ;
  rlString *result = 0 ;
  
  SWIG_check_num_args("rlString::rlString",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("rlString::rlString",1,"rlString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("new_rlString",1,SWIGTYPE_p_rlString);
  }
  
  result = (rlString *)new rlString((rlString const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlString,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlString(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_rlString__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_rlString__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_rlString__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_rlString__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_rlString__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlString::rlString(char const *)\n"
    "    rlString::rlString()\n"
    "    rlString::rlString(rlString &)\n"
    "    rlString::rlString(rlString *)\n"
    "    rlString::rlString(rlString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_rlString___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  char *arg2 = (char *) 0 ;
  rlString *result = 0 ;
  
  SWIG_check_num_args("rlString::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::operator +",1,"rlString *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlString::operator +",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString___add",1,SWIGTYPE_p_rlString);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (rlString *) &(arg1)->operator +((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  rlString *arg2 = 0 ;
  rlString *result = 0 ;
  
  SWIG_check_num_args("rlString::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::operator +",1,"rlString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("rlString::operator +",2,"rlString &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString___add",1,SWIGTYPE_p_rlString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString___add",2,SWIGTYPE_p_rlString);
  }
  
  result = (rlString *) &(arg1)->operator +(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_rlString, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_rlString___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_rlString___add__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlString___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlString::operator +(char const *)\n"
    "    rlString::operator +(rlString &)\n");
  lua_error(L);return 0;
}


static int _wrap_rlString___eq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlString::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::operator ==",1,"rlString *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlString::operator ==",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString___eq",1,SWIGTYPE_p_rlString);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->operator ==((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString___eq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  rlString *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("rlString::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::operator ==",1,"rlString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("rlString::operator ==",2,"rlString &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString___eq",1,SWIGTYPE_p_rlString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString___eq",2,SWIGTYPE_p_rlString);
  }
  
  result = (int)(arg1)->operator ==(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString___eq__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  rlString *arg2 = 0 ;
  int result;
  
  SWIG_check_num_args("rlString::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::operator ==",1,"rlString *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("rlString::operator ==",2,"rlString const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString___eq",1,SWIGTYPE_p_rlString);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString___eq",2,SWIGTYPE_p_rlString);
  }
  
  result = (int)(arg1)->operator ==((rlString const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString___eq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_rlString, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_rlString___eq__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_rlString, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_rlString___eq__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_rlString___eq__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlString___eq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlString::operator ==(char const *)\n"
    "    rlString::operator ==(rlString &)\n"
    "    rlString::operator ==(rlString const &)\n");
  lua_error(L);return 0;
}


static int _wrap_rlString_text__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlString::text",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::text",1,"rlString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_text",1,SWIGTYPE_p_rlString);
  }
  
  result = (char *)(arg1)->text();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString_text__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlString::text",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::text",1,"rlString const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_text",1,SWIGTYPE_p_rlString);
  }
  
  result = (char *)((rlString const *)arg1)->text();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString_text(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rlString_text__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rlString_text__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlString_text'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlString::text()\n"
    "    rlString::text() const\n");
  lua_error(L);return 0;
}


static int _wrap_rlString_setText(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlString::setText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::setText",1,"rlString *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlString::setText",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_setText",1,SWIGTYPE_p_rlString);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->setText((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString_printf(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  int result;
  
  SWIG_check_num_args("rlString::printf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::printf",1,"rlString *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlString::printf",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_printf",1,SWIGTYPE_p_rlString);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->printf((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString_strcpy(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlString::strcpy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::strcpy",1,"rlString *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlString::strcpy",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_strcpy",1,SWIGTYPE_p_rlString);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->strcpy((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString_cat(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlString::cat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::cat",1,"rlString *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlString::cat",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_cat",1,SWIGTYPE_p_rlString);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->cat((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString_upper(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  int result;
  
  SWIG_check_num_args("rlString::upper",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::upper",1,"rlString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_upper",1,SWIGTYPE_p_rlString);
  }
  
  result = (int)(arg1)->upper();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString_lower(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  int result;
  
  SWIG_check_num_args("rlString::lower",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::lower",1,"rlString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_lower",1,SWIGTYPE_p_rlString);
  }
  
  result = (int)(arg1)->lower();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString_startsWith(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlString::startsWith",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::startsWith",1,"rlString *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlString::startsWith",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_startsWith",1,SWIGTYPE_p_rlString);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->startsWith((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString_strnocasecmp(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlString::strnocasecmp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::strnocasecmp",1,"rlString *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlString::strnocasecmp",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_strnocasecmp",1,SWIGTYPE_p_rlString);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->strnocasecmp((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString_strnnocasecmp(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlString::strnnocasecmp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::strnnocasecmp",1,"rlString *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlString::strnnocasecmp",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlString::strnnocasecmp",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_strnnocasecmp",1,SWIGTYPE_p_rlString);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->strnnocasecmp((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString_strstr(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlString::strstr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::strstr",1,"rlString *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlString::strstr",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_strstr",1,SWIGTYPE_p_rlString);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (char *)(arg1)->strstr((char const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString_strchr(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlString::strchr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::strchr",1,"rlString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlString::strchr",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_strchr",1,SWIGTYPE_p_rlString);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(arg1)->strchr(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString_strrchr(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlString::strrchr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::strrchr",1,"rlString *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlString::strrchr",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_strrchr",1,SWIGTYPE_p_rlString);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(arg1)->strrchr(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString_removeQuotas__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  char arg2 ;
  int result;
  
  SWIG_check_num_args("rlString::removeQuotas",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::removeQuotas",1,"rlString *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlString::removeQuotas",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_removeQuotas",1,SWIGTYPE_p_rlString);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (int)(arg1)->removeQuotas(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString_removeQuotas__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  int result;
  
  SWIG_check_num_args("rlString::removeQuotas",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::removeQuotas",1,"rlString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_removeQuotas",1,SWIGTYPE_p_rlString);
  }
  
  result = (int)(arg1)->removeQuotas();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString_removeQuotas(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rlString_removeQuotas__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlString, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_rlString_removeQuotas__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlString_removeQuotas'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlString::removeQuotas(char)\n"
    "    rlString::removeQuotas()\n");
  lua_error(L);return 0;
}


static int _wrap_rlString_removeNewline(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  int result;
  
  SWIG_check_num_args("rlString::removeNewline",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::removeNewline",1,"rlString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_removeNewline",1,SWIGTYPE_p_rlString);
  }
  
  result = (int)(arg1)->removeNewline();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString_read(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlString::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::read",1,"rlString *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlString::read",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_read",1,SWIGTYPE_p_rlString);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->read((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString_write(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlString::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::write",1,"rlString *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlString::write",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_write",1,SWIGTYPE_p_rlString);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->write((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString_toFilename(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlString::toFilename",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::toFilename",1,"rlString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_toFilename",1,SWIGTYPE_p_rlString);
  }
  
  result = (char *)(arg1)->toFilename();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlString_toDirname(lua_State* L) {
  int SWIG_arg = 0;
  rlString *arg1 = (rlString *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlString::toDirname",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlString::toDirname",1,"rlString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlString_toDirname",1,SWIGTYPE_p_rlString);
  }
  
  result = (char *)(arg1)->toDirname();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlString(void *obj) {
rlString *arg1 = (rlString *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlString(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlString);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlString_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rlString_methods[]= {
    { "__add", _wrap_rlString___add},
    { "__eq", _wrap_rlString___eq},
    { "text", _wrap_rlString_text},
    { "setText", _wrap_rlString_setText},
    { "printf", _wrap_rlString_printf},
    { "strcpy", _wrap_rlString_strcpy},
    { "cat", _wrap_rlString_cat},
    { "upper", _wrap_rlString_upper},
    { "lower", _wrap_rlString_lower},
    { "startsWith", _wrap_rlString_startsWith},
    { "strnocasecmp", _wrap_rlString_strnocasecmp},
    { "strnnocasecmp", _wrap_rlString_strnnocasecmp},
    { "strstr", _wrap_rlString_strstr},
    { "strchr", _wrap_rlString_strchr},
    { "strrchr", _wrap_rlString_strrchr},
    { "removeQuotas", _wrap_rlString_removeQuotas},
    { "removeNewline", _wrap_rlString_removeNewline},
    { "read", _wrap_rlString_read},
    { "write", _wrap_rlString_write},
    { "toFilename", _wrap_rlString_toFilename},
    { "toDirname", _wrap_rlString_toDirname},
    {0,0}
};
static swig_lua_method swig_rlString_meta[] = {
    { "__add", _wrap_rlString___add},
    { "__eq", _wrap_rlString___eq},
    {0,0}
};

static swig_lua_attribute swig_rlString_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlString_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlString_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlString_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlString_Sf_SwigStatic = {
    "rlString",
    swig_rlString_Sf_SwigStatic_methods,
    swig_rlString_Sf_SwigStatic_attributes,
    swig_rlString_Sf_SwigStatic_constants,
    swig_rlString_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlString_bases[] = {0};
static const char *swig_rlString_base_names[] = {0};
static swig_lua_class _wrap_class_rlString = { "rlString", "rlString", &SWIGTYPE_p_rlString,_proxy__wrap_new_rlString, swig_delete_rlString, swig_rlString_methods, swig_rlString_attributes, &swig_rlString_Sf_SwigStatic, swig_rlString_meta, swig_rlString_bases, swig_rlString_base_names };

static int _wrap_new_rlSvgPosition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *result = 0 ;
  
  SWIG_check_num_args("rlSvgPosition::rlSvgPosition",0,0)
  result = (rlSvgPosition *)new rlSvgPosition();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSvgPosition,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSvgPosition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  rlSvgPosition *result = 0 ;
  
  SWIG_check_num_args("rlSvgPosition::rlSvgPosition",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlSvgPosition::rlSvgPosition",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgPosition::rlSvgPosition",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSvgPosition::rlSvgPosition",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSvgPosition::rlSvgPosition",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlSvgPosition::rlSvgPosition",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlSvgPosition::rlSvgPosition",6,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  result = (rlSvgPosition *)new rlSvgPosition(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSvgPosition,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_rlSvgPosition(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_rlSvgPosition__SWIG_0(L);
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_rlSvgPosition__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_rlSvgPosition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSvgPosition::rlSvgPosition()\n"
    "    rlSvgPosition::rlSvgPosition(float,float,float,float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_rlSvgPosition_sx_set(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *arg1 = (rlSvgPosition *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("rlSvgPosition::sx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgPosition::sx",1,"rlSvgPosition *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgPosition::sx",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgPosition_sx_set",1,SWIGTYPE_p_rlSvgPosition);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->sx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgPosition_sx_get(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *arg1 = (rlSvgPosition *) 0 ;
  float result;
  
  SWIG_check_num_args("rlSvgPosition::sx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgPosition::sx",1,"rlSvgPosition *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgPosition_sx_get",1,SWIGTYPE_p_rlSvgPosition);
  }
  
  result = (float) ((arg1)->sx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgPosition_alpha_set(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *arg1 = (rlSvgPosition *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("rlSvgPosition::alpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgPosition::alpha",1,"rlSvgPosition *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgPosition::alpha",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgPosition_alpha_set",1,SWIGTYPE_p_rlSvgPosition);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->alpha = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgPosition_alpha_get(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *arg1 = (rlSvgPosition *) 0 ;
  float result;
  
  SWIG_check_num_args("rlSvgPosition::alpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgPosition::alpha",1,"rlSvgPosition *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgPosition_alpha_get",1,SWIGTYPE_p_rlSvgPosition);
  }
  
  result = (float) ((arg1)->alpha);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgPosition_x0_set(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *arg1 = (rlSvgPosition *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("rlSvgPosition::x0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgPosition::x0",1,"rlSvgPosition *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgPosition::x0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgPosition_x0_set",1,SWIGTYPE_p_rlSvgPosition);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgPosition_x0_get(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *arg1 = (rlSvgPosition *) 0 ;
  float result;
  
  SWIG_check_num_args("rlSvgPosition::x0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgPosition::x0",1,"rlSvgPosition *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgPosition_x0_get",1,SWIGTYPE_p_rlSvgPosition);
  }
  
  result = (float) ((arg1)->x0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgPosition_y0_set(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *arg1 = (rlSvgPosition *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("rlSvgPosition::y0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgPosition::y0",1,"rlSvgPosition *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgPosition::y0",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgPosition_y0_set",1,SWIGTYPE_p_rlSvgPosition);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgPosition_y0_get(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *arg1 = (rlSvgPosition *) 0 ;
  float result;
  
  SWIG_check_num_args("rlSvgPosition::y0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgPosition::y0",1,"rlSvgPosition *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgPosition_y0_get",1,SWIGTYPE_p_rlSvgPosition);
  }
  
  result = (float) ((arg1)->y0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgPosition_cx_set(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *arg1 = (rlSvgPosition *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("rlSvgPosition::cx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgPosition::cx",1,"rlSvgPosition *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgPosition::cx",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgPosition_cx_set",1,SWIGTYPE_p_rlSvgPosition);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->cx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgPosition_cx_get(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *arg1 = (rlSvgPosition *) 0 ;
  float result;
  
  SWIG_check_num_args("rlSvgPosition::cx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgPosition::cx",1,"rlSvgPosition *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgPosition_cx_get",1,SWIGTYPE_p_rlSvgPosition);
  }
  
  result = (float) ((arg1)->cx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgPosition_cy_set(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *arg1 = (rlSvgPosition *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("rlSvgPosition::cy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgPosition::cy",1,"rlSvgPosition *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgPosition::cy",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgPosition_cy_set",1,SWIGTYPE_p_rlSvgPosition);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->cy = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgPosition_cy_get(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *arg1 = (rlSvgPosition *) 0 ;
  float result;
  
  SWIG_check_num_args("rlSvgPosition::cy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgPosition::cy",1,"rlSvgPosition *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgPosition_cy_get",1,SWIGTYPE_p_rlSvgPosition);
  }
  
  result = (float) ((arg1)->cy);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgPosition_init_set(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *arg1 = (rlSvgPosition *) 0 ;
  rlSvgPosition::rlPositionInit *arg2 = (rlSvgPosition::rlPositionInit *) 0 ;
  
  SWIG_check_num_args("rlSvgPosition::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgPosition::init",1,"rlSvgPosition *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSvgPosition::init",2,"rlSvgPosition::rlPositionInit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgPosition_init_set",1,SWIGTYPE_p_rlSvgPosition);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSvgPosition__rlPositionInit,0))){
    SWIG_fail_ptr("rlSvgPosition_init_set",2,SWIGTYPE_p_rlSvgPosition__rlPositionInit);
  }
  
  if (arg1) (arg1)->init = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgPosition_init_get(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *arg1 = (rlSvgPosition *) 0 ;
  rlSvgPosition::rlPositionInit *result = 0 ;
  
  SWIG_check_num_args("rlSvgPosition::init",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgPosition::init",1,"rlSvgPosition *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgPosition_init_get",1,SWIGTYPE_p_rlSvgPosition);
  }
  
  result = (rlSvgPosition::rlPositionInit *)& ((arg1)->init);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSvgPosition__rlPositionInit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgPosition_setInit(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *arg1 = (rlSvgPosition *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("rlSvgPosition::setInit",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgPosition::setInit",1,"rlSvgPosition *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgPosition::setInit",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSvgPosition::setInit",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSvgPosition::setInit",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlSvgPosition::setInit",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgPosition_setInit",1,SWIGTYPE_p_rlSvgPosition);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->setInit(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgPosition_move(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *arg1 = (rlSvgPosition *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("rlSvgPosition::move",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgPosition::move",1,"rlSvgPosition *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgPosition::move",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSvgPosition::move",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgPosition_move",1,SWIGTYPE_p_rlSvgPosition);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->move(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgPosition_moveRelative(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *arg1 = (rlSvgPosition *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("rlSvgPosition::moveRelative",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgPosition::moveRelative",1,"rlSvgPosition *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgPosition::moveRelative",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSvgPosition::moveRelative",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgPosition_moveRelative",1,SWIGTYPE_p_rlSvgPosition);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->moveRelative(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgPosition_scale(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *arg1 = (rlSvgPosition *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("rlSvgPosition::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgPosition::scale",1,"rlSvgPosition *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgPosition::scale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgPosition_scale",1,SWIGTYPE_p_rlSvgPosition);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->scale(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgPosition_scaleRelative(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *arg1 = (rlSvgPosition *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("rlSvgPosition::scaleRelative",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgPosition::scaleRelative",1,"rlSvgPosition *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgPosition::scaleRelative",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgPosition_scaleRelative",1,SWIGTYPE_p_rlSvgPosition);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->scaleRelative(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgPosition_rotate(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgPosition *arg1 = (rlSvgPosition *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("rlSvgPosition::rotate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgPosition::rotate",1,"rlSvgPosition *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgPosition::rotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSvgPosition::rotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSvgPosition::rotate",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgPosition_rotate",1,SWIGTYPE_p_rlSvgPosition);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->rotate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlSvgPosition(void *obj) {
rlSvgPosition *arg1 = (rlSvgPosition *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlSvgPosition(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlSvgPosition);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlSvgPosition_attributes[] = {
    { "sx", _wrap_rlSvgPosition_sx_get, _wrap_rlSvgPosition_sx_set },
    { "alpha", _wrap_rlSvgPosition_alpha_get, _wrap_rlSvgPosition_alpha_set },
    { "x0", _wrap_rlSvgPosition_x0_get, _wrap_rlSvgPosition_x0_set },
    { "y0", _wrap_rlSvgPosition_y0_get, _wrap_rlSvgPosition_y0_set },
    { "cx", _wrap_rlSvgPosition_cx_get, _wrap_rlSvgPosition_cx_set },
    { "cy", _wrap_rlSvgPosition_cy_get, _wrap_rlSvgPosition_cy_set },
    { "init", _wrap_rlSvgPosition_init_get, _wrap_rlSvgPosition_init_set },
    {0,0,0}
};
static swig_lua_method swig_rlSvgPosition_methods[]= {
    { "setInit", _wrap_rlSvgPosition_setInit},
    { "move", _wrap_rlSvgPosition_move},
    { "moveRelative", _wrap_rlSvgPosition_moveRelative},
    { "scale", _wrap_rlSvgPosition_scale},
    { "scaleRelative", _wrap_rlSvgPosition_scaleRelative},
    { "rotate", _wrap_rlSvgPosition_rotate},
    {0,0}
};
static swig_lua_method swig_rlSvgPosition_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlSvgPosition_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlSvgPosition_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlSvgPosition_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlSvgPosition_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlSvgPosition_Sf_SwigStatic = {
    "rlSvgPosition",
    swig_rlSvgPosition_Sf_SwigStatic_methods,
    swig_rlSvgPosition_Sf_SwigStatic_attributes,
    swig_rlSvgPosition_Sf_SwigStatic_constants,
    swig_rlSvgPosition_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlSvgPosition_bases[] = {0};
static const char *swig_rlSvgPosition_base_names[] = {0};
static swig_lua_class _wrap_class_rlSvgPosition = { "rlSvgPosition", "rlSvgPosition", &SWIGTYPE_p_rlSvgPosition,_proxy__wrap_new_rlSvgPosition, swig_delete_rlSvgPosition, swig_rlSvgPosition_methods, swig_rlSvgPosition_attributes, &swig_rlSvgPosition_Sf_SwigStatic, swig_rlSvgPosition_meta, swig_rlSvgPosition_bases, swig_rlSvgPosition_base_names };

static int _wrap_new_rlSvgAnimator(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *result = 0 ;
  
  SWIG_check_num_args("rlSvgAnimator::rlSvgAnimator",0,0)
  result = (rlSvgAnimator *)new rlSvgAnimator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSvgAnimator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_setSocket(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  int *arg2 = (int *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::setSocket",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::setSocket",1,"rlSvgAnimator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlSvgAnimator::setSocket",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_setSocket",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("rlSvgAnimator_setSocket",2,SWIGTYPE_p_int);
  }
  
  result = (int)(arg1)->setSocket(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_setId(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::setId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::setId",1,"rlSvgAnimator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgAnimator::setId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_setId",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->setId(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_read__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  char *arg2 = (char *) 0 ;
  rlIniFile *arg3 = (rlIniFile *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::read",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::read",1,"rlSvgAnimator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSvgAnimator::read",2,"char const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("rlSvgAnimator::read",3,"rlIniFile *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_read",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_rlIniFile,0))){
    SWIG_fail_ptr("rlSvgAnimator_read",3,SWIGTYPE_p_rlIniFile);
  }
  
  result = (int)(arg1)->read((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_read__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::read",1,"rlSvgAnimator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSvgAnimator::read",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_read",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->read((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_read(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSvgAnimator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_rlSvgAnimator_read__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSvgAnimator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_rlIniFile, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_rlSvgAnimator_read__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlSvgAnimator_read'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSvgAnimator::read(char const *,rlIniFile *)\n"
    "    rlSvgAnimator::read(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlSvgAnimator_writeSocket(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::writeSocket",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::writeSocket",1,"rlSvgAnimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_writeSocket",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  result = (int)(arg1)->writeSocket();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_svgPrintf(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::svgPrintf",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::svgPrintf",1,"rlSvgAnimator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSvgAnimator::svgPrintf",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlSvgAnimator::svgPrintf",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("rlSvgAnimator::svgPrintf",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_svgPrintf",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (int)(arg1)->svgPrintf((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_svgRecursivePrintf(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::svgRecursivePrintf",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::svgRecursivePrintf",1,"rlSvgAnimator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSvgAnimator::svgRecursivePrintf",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlSvgAnimator::svgRecursivePrintf",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("rlSvgAnimator::svgRecursivePrintf",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_svgRecursivePrintf",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (int)(arg1)->svgRecursivePrintf((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_svgSearchAndReplace(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::svgSearchAndReplace",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::svgSearchAndReplace",1,"rlSvgAnimator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSvgAnimator::svgSearchAndReplace",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlSvgAnimator::svgSearchAndReplace",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("rlSvgAnimator::svgSearchAndReplace",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("rlSvgAnimator::svgSearchAndReplace",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_svgSearchAndReplace",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (int)(arg1)->svgSearchAndReplace((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_svgRecursiveSearchAndReplace(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::svgRecursiveSearchAndReplace",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::svgRecursiveSearchAndReplace",1,"rlSvgAnimator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSvgAnimator::svgRecursiveSearchAndReplace",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlSvgAnimator::svgRecursiveSearchAndReplace",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("rlSvgAnimator::svgRecursiveSearchAndReplace",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("rlSvgAnimator::svgRecursiveSearchAndReplace",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_svgRecursiveSearchAndReplace",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (int)(arg1)->svgRecursiveSearchAndReplace((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_svgTextPrintf(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::svgTextPrintf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::svgTextPrintf",1,"rlSvgAnimator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSvgAnimator::svgTextPrintf",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlSvgAnimator::svgTextPrintf",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_svgTextPrintf",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->svgTextPrintf((char const *)arg2,(char const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_svgRemoveStyleOption(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::svgRemoveStyleOption",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::svgRemoveStyleOption",1,"rlSvgAnimator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSvgAnimator::svgRemoveStyleOption",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlSvgAnimator::svgRemoveStyleOption",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_svgRemoveStyleOption",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->svgRemoveStyleOption((char const *)arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_svgRecursiveRemoveStyleOption(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::svgRecursiveRemoveStyleOption",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::svgRecursiveRemoveStyleOption",1,"rlSvgAnimator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSvgAnimator::svgRecursiveRemoveStyleOption",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlSvgAnimator::svgRecursiveRemoveStyleOption",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_svgRecursiveRemoveStyleOption",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->svgRecursiveRemoveStyleOption((char const *)arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_svgChangeStyleOption(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::svgChangeStyleOption",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::svgChangeStyleOption",1,"rlSvgAnimator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSvgAnimator::svgChangeStyleOption",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlSvgAnimator::svgChangeStyleOption",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("rlSvgAnimator::svgChangeStyleOption",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_svgChangeStyleOption",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (int)(arg1)->svgChangeStyleOption((char const *)arg2,(char const *)arg3,(char const *)arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_svgRecursiveChangeStyleOption(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::svgRecursiveChangeStyleOption",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::svgRecursiveChangeStyleOption",1,"rlSvgAnimator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSvgAnimator::svgRecursiveChangeStyleOption",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlSvgAnimator::svgRecursiveChangeStyleOption",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("rlSvgAnimator::svgRecursiveChangeStyleOption",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_svgRecursiveChangeStyleOption",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (int)(arg1)->svgRecursiveChangeStyleOption((char const *)arg2,(char const *)arg3,(char const *)arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_svgSetStyleOption(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::svgSetStyleOption",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::svgSetStyleOption",1,"rlSvgAnimator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSvgAnimator::svgSetStyleOption",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlSvgAnimator::svgSetStyleOption",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_svgSetStyleOption",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->svgSetStyleOption((char const *)arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_svgRecursiveSetStyleOption(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::svgRecursiveSetStyleOption",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::svgRecursiveSetStyleOption",1,"rlSvgAnimator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSvgAnimator::svgRecursiveSetStyleOption",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlSvgAnimator::svgRecursiveSetStyleOption",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_svgRecursiveSetStyleOption",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->svgRecursiveSetStyleOption((char const *)arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_show(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::show",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::show",1,"rlSvgAnimator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSvgAnimator::show",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSvgAnimator::show",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_show",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->show((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_setMatrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::setMatrix",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::setMatrix",1,"rlSvgAnimator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSvgAnimator::setMatrix",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSvgAnimator::setMatrix",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlSvgAnimator::setMatrix",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rlSvgAnimator::setMatrix",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("rlSvgAnimator::setMatrix",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("rlSvgAnimator::setMatrix",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("rlSvgAnimator::setMatrix",8,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_setMatrix",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  result = (int)(arg1)->setMatrix((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_setMatrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  char *arg2 = (char *) 0 ;
  rlSvgPosition *arg3 = 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::setMatrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::setMatrix",1,"rlSvgAnimator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSvgAnimator::setMatrix",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("rlSvgAnimator::setMatrix",3,"rlSvgPosition &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_setMatrix",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_rlSvgPosition,0))){
    SWIG_fail_ptr("rlSvgAnimator_setMatrix",3,SWIGTYPE_p_rlSvgPosition);
  }
  
  result = (int)(arg1)->setMatrix((char const *)arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_setMatrix(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSvgAnimator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_rlSvgPosition, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_rlSvgAnimator_setMatrix__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSvgAnimator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_rlSvgAnimator_setMatrix__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlSvgAnimator_setMatrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSvgAnimator::setMatrix(char const *,float,float,float,float,float,float)\n"
    "    rlSvgAnimator::setMatrix(char const *,rlSvgPosition &)\n");
  lua_error(L);return 0;
}


static int _wrap_rlSvgAnimator_setMainObject(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::setMainObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::setMainObject",1,"rlSvgAnimator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSvgAnimator::setMainObject",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_setMainObject",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->setMainObject((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_mainObject(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlSvgAnimator::mainObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::mainObject",1,"rlSvgAnimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_mainObject",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  result = (char *)(arg1)->mainObject();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_setXY0(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  float arg2 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::setXY0",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::setXY0",1,"rlSvgAnimator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgAnimator::setXY0",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSvgAnimator::setXY0",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_setXY0",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)(arg1)->setXY0(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_x0(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  float result;
  
  SWIG_check_num_args("rlSvgAnimator::x0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::x0",1,"rlSvgAnimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_x0",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  result = (float)(arg1)->x0();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_y0(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  float result;
  
  SWIG_check_num_args("rlSvgAnimator::y0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::y0",1,"rlSvgAnimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_y0",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  result = (float)(arg1)->y0();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_setMouseXY0(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  float arg2 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::setMouseXY0",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::setMouseXY0",1,"rlSvgAnimator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgAnimator::setMouseXY0",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSvgAnimator::setMouseXY0",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_setMouseXY0",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)(arg1)->setMouseXY0(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_mouseX0(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  float result;
  
  SWIG_check_num_args("rlSvgAnimator::mouseX0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::mouseX0",1,"rlSvgAnimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_mouseX0",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  result = (float)(arg1)->mouseX0();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_mouseY0(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  float result;
  
  SWIG_check_num_args("rlSvgAnimator::mouseY0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::mouseY0",1,"rlSvgAnimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_mouseY0",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  result = (float)(arg1)->mouseY0();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_setMouseXY1(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  float arg2 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::setMouseXY1",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::setMouseXY1",1,"rlSvgAnimator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgAnimator::setMouseXY1",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSvgAnimator::setMouseXY1",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_setMouseXY1",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)(arg1)->setMouseXY1(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_mouseX1(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  float result;
  
  SWIG_check_num_args("rlSvgAnimator::mouseX1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::mouseX1",1,"rlSvgAnimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_mouseX1",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  result = (float)(arg1)->mouseX1();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_mouseY1(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  float result;
  
  SWIG_check_num_args("rlSvgAnimator::mouseY1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::mouseY1",1,"rlSvgAnimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_mouseY1",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  result = (float)(arg1)->mouseY1();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_setScale(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  float arg2 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::setScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::setScale",1,"rlSvgAnimator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgAnimator::setScale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_setScale",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (int)(arg1)->setScale(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_scale(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  float result;
  
  SWIG_check_num_args("rlSvgAnimator::scale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::scale",1,"rlSvgAnimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_scale",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  result = (float)(arg1)->scale();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_zoomCenter(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  float arg2 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::zoomCenter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::zoomCenter",1,"rlSvgAnimator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgAnimator::zoomCenter",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_zoomCenter",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (int)(arg1)->zoomCenter(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_zoomRect(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::zoomRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::zoomRect",1,"rlSvgAnimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_zoomRect",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  result = (int)(arg1)->zoomRect();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_setMainObjectMatrix(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::setMainObjectMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::setMainObjectMatrix",1,"rlSvgAnimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_setMainObjectMatrix",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  result = (int)(arg1)->setMainObjectMatrix();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_setWindowSize(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::setWindowSize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::setWindowSize",1,"rlSvgAnimator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgAnimator::setWindowSize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSvgAnimator::setWindowSize",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_setWindowSize",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->setWindowSize(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_windowWidth(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  float result;
  
  SWIG_check_num_args("rlSvgAnimator::windowWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::windowWidth",1,"rlSvgAnimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_windowWidth",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  result = (float)(arg1)->windowWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_windowHeight(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  float result;
  
  SWIG_check_num_args("rlSvgAnimator::windowHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::windowHeight",1,"rlSvgAnimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_windowHeight",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  result = (float)(arg1)->windowHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_moveMainObject(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  float arg2 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::moveMainObject",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::moveMainObject",1,"rlSvgAnimator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgAnimator::moveMainObject",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSvgAnimator::moveMainObject",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_moveMainObject",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)(arg1)->moveMainObject(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_isModified_set(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlSvgAnimator::isModified",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::isModified",1,"rlSvgAnimator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlSvgAnimator::isModified",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_isModified_set",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->isModified = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgAnimator_isModified_get(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgAnimator *arg1 = (rlSvgAnimator *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgAnimator::isModified",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgAnimator::isModified",1,"rlSvgAnimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgAnimator,0))){
    SWIG_fail_ptr("rlSvgAnimator_isModified_get",1,SWIGTYPE_p_rlSvgAnimator);
  }
  
  result = (int) ((arg1)->isModified);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlSvgAnimator(void *obj) {
rlSvgAnimator *arg1 = (rlSvgAnimator *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlSvgAnimator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlSvgAnimator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlSvgAnimator_attributes[] = {
    { "isModified", _wrap_rlSvgAnimator_isModified_get, _wrap_rlSvgAnimator_isModified_set },
    {0,0,0}
};
static swig_lua_method swig_rlSvgAnimator_methods[]= {
    { "setSocket", _wrap_rlSvgAnimator_setSocket},
    { "setId", _wrap_rlSvgAnimator_setId},
    { "read", _wrap_rlSvgAnimator_read},
    { "writeSocket", _wrap_rlSvgAnimator_writeSocket},
    { "svgPrintf", _wrap_rlSvgAnimator_svgPrintf},
    { "svgRecursivePrintf", _wrap_rlSvgAnimator_svgRecursivePrintf},
    { "svgSearchAndReplace", _wrap_rlSvgAnimator_svgSearchAndReplace},
    { "svgRecursiveSearchAndReplace", _wrap_rlSvgAnimator_svgRecursiveSearchAndReplace},
    { "svgTextPrintf", _wrap_rlSvgAnimator_svgTextPrintf},
    { "svgRemoveStyleOption", _wrap_rlSvgAnimator_svgRemoveStyleOption},
    { "svgRecursiveRemoveStyleOption", _wrap_rlSvgAnimator_svgRecursiveRemoveStyleOption},
    { "svgChangeStyleOption", _wrap_rlSvgAnimator_svgChangeStyleOption},
    { "svgRecursiveChangeStyleOption", _wrap_rlSvgAnimator_svgRecursiveChangeStyleOption},
    { "svgSetStyleOption", _wrap_rlSvgAnimator_svgSetStyleOption},
    { "svgRecursiveSetStyleOption", _wrap_rlSvgAnimator_svgRecursiveSetStyleOption},
    { "show", _wrap_rlSvgAnimator_show},
    { "setMatrix", _wrap_rlSvgAnimator_setMatrix},
    { "setMainObject", _wrap_rlSvgAnimator_setMainObject},
    { "mainObject", _wrap_rlSvgAnimator_mainObject},
    { "setXY0", _wrap_rlSvgAnimator_setXY0},
    { "x0", _wrap_rlSvgAnimator_x0},
    { "y0", _wrap_rlSvgAnimator_y0},
    { "setMouseXY0", _wrap_rlSvgAnimator_setMouseXY0},
    { "mouseX0", _wrap_rlSvgAnimator_mouseX0},
    { "mouseY0", _wrap_rlSvgAnimator_mouseY0},
    { "setMouseXY1", _wrap_rlSvgAnimator_setMouseXY1},
    { "mouseX1", _wrap_rlSvgAnimator_mouseX1},
    { "mouseY1", _wrap_rlSvgAnimator_mouseY1},
    { "setScale", _wrap_rlSvgAnimator_setScale},
    { "scale", _wrap_rlSvgAnimator_scale},
    { "zoomCenter", _wrap_rlSvgAnimator_zoomCenter},
    { "zoomRect", _wrap_rlSvgAnimator_zoomRect},
    { "setMainObjectMatrix", _wrap_rlSvgAnimator_setMainObjectMatrix},
    { "setWindowSize", _wrap_rlSvgAnimator_setWindowSize},
    { "windowWidth", _wrap_rlSvgAnimator_windowWidth},
    { "windowHeight", _wrap_rlSvgAnimator_windowHeight},
    { "moveMainObject", _wrap_rlSvgAnimator_moveMainObject},
    {0,0}
};
static swig_lua_method swig_rlSvgAnimator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlSvgAnimator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlSvgAnimator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlSvgAnimator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlSvgAnimator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlSvgAnimator_Sf_SwigStatic = {
    "rlSvgAnimator",
    swig_rlSvgAnimator_Sf_SwigStatic_methods,
    swig_rlSvgAnimator_Sf_SwigStatic_attributes,
    swig_rlSvgAnimator_Sf_SwigStatic_constants,
    swig_rlSvgAnimator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlSvgAnimator_bases[] = {0};
static const char *swig_rlSvgAnimator_base_names[] = {0};
static swig_lua_class _wrap_class_rlSvgAnimator = { "rlSvgAnimator", "rlSvgAnimator", &SWIGTYPE_p_rlSvgAnimator,_proxy__wrap_new_rlSvgAnimator, swig_delete_rlSvgAnimator, swig_rlSvgAnimator_methods, swig_rlSvgAnimator_attributes, &swig_rlSvgAnimator_Sf_SwigStatic, swig_rlSvgAnimator_meta, swig_rlSvgAnimator_bases, swig_rlSvgAnimator_base_names };

static int _wrap_new_rlSvgCat(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgCat *result = 0 ;
  
  SWIG_check_num_args("rlSvgCat::rlSvgCat",0,0)
  result = (rlSvgCat *)new rlSvgCat();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSvgCat,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgCat_open__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgCat *arg1 = (rlSvgCat *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgCat::open",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgCat::open",1,"rlSvgCat *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSvgCat::open",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("rlSvgCat::open",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgCat,0))){
    SWIG_fail_ptr("rlSvgCat_open",1,SWIGTYPE_p_rlSvgCat);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (int)(arg1)->open((char const *)arg2,(char const *)arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgCat_open__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgCat *arg1 = (rlSvgCat *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlSvgCat::open",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgCat::open",1,"rlSvgCat *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSvgCat::open",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgCat,0))){
    SWIG_fail_ptr("rlSvgCat_open",1,SWIGTYPE_p_rlSvgCat);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->open((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgCat_open(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSvgCat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_rlSvgCat_open__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlSvgCat, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_rlSvgCat_open__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlSvgCat_open'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlSvgCat::open(char const *,char const *)\n"
    "    rlSvgCat::open(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_rlSvgCat_reopenSocket(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgCat *arg1 = (rlSvgCat *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlSvgCat::reopenSocket",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgCat::reopenSocket",1,"rlSvgCat *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlSvgCat::reopenSocket",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlSvgCat::reopenSocket",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgCat,0))){
    SWIG_fail_ptr("rlSvgCat_reopenSocket",1,SWIGTYPE_p_rlSvgCat);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->reopenSocket((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgCat_cat(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgCat *arg1 = (rlSvgCat *) 0 ;
  
  SWIG_check_num_args("rlSvgCat::cat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgCat::cat",1,"rlSvgCat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgCat,0))){
    SWIG_fail_ptr("rlSvgCat_cat",1,SWIGTYPE_p_rlSvgCat);
  }
  
  (arg1)->cat();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlSvgCat_close(lua_State* L) {
  int SWIG_arg = 0;
  rlSvgCat *arg1 = (rlSvgCat *) 0 ;
  
  SWIG_check_num_args("rlSvgCat::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlSvgCat::close",1,"rlSvgCat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlSvgCat,0))){
    SWIG_fail_ptr("rlSvgCat_close",1,SWIGTYPE_p_rlSvgCat);
  }
  
  (arg1)->close();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlSvgCat(void *obj) {
rlSvgCat *arg1 = (rlSvgCat *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlSvgCat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlSvgCat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlSvgCat_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_rlSvgCat_methods[]= {
    { "open", _wrap_rlSvgCat_open},
    { "reopenSocket", _wrap_rlSvgCat_reopenSocket},
    { "cat", _wrap_rlSvgCat_cat},
    { "close", _wrap_rlSvgCat_close},
    {0,0}
};
static swig_lua_method swig_rlSvgCat_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlSvgCat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlSvgCat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlSvgCat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlSvgCat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlSvgCat_Sf_SwigStatic = {
    "rlSvgCat",
    swig_rlSvgCat_Sf_SwigStatic_methods,
    swig_rlSvgCat_Sf_SwigStatic_attributes,
    swig_rlSvgCat_Sf_SwigStatic_constants,
    swig_rlSvgCat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlSvgCat_bases[] = {0};
static const char *swig_rlSvgCat_base_names[] = {0};
static swig_lua_class _wrap_class_rlSvgCat = { "rlSvgCat", "rlSvgCat", &SWIGTYPE_p_rlSvgCat,_proxy__wrap_new_rlSvgCat, swig_delete_rlSvgCat, swig_rlSvgCat_methods, swig_rlSvgCat_attributes, &swig_rlSvgCat_Sf_SwigStatic, swig_rlSvgCat_meta, swig_rlSvgCat_bases, swig_rlSvgCat_base_names };

static int _wrap_new_rlWebcam(lua_State* L) {
  int SWIG_arg = 0;
  rlWebcam *result = 0 ;
  
  SWIG_check_num_args("rlWebcam::rlWebcam",0,0)
  result = (rlWebcam *)new rlWebcam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlWebcam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlWebcam_setUrl(lua_State* L) {
  int SWIG_arg = 0;
  rlWebcam *arg1 = (rlWebcam *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("rlWebcam::setUrl",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlWebcam::setUrl",1,"rlWebcam *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("rlWebcam::setUrl",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlWebcam,0))){
    SWIG_fail_ptr("rlWebcam_setUrl",1,SWIGTYPE_p_rlWebcam);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->setUrl((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlWebcam_disconnect(lua_State* L) {
  int SWIG_arg = 0;
  rlWebcam *arg1 = (rlWebcam *) 0 ;
  int result;
  
  SWIG_check_num_args("rlWebcam::disconnect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlWebcam::disconnect",1,"rlWebcam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlWebcam,0))){
    SWIG_fail_ptr("rlWebcam_disconnect",1,SWIGTYPE_p_rlWebcam);
  }
  
  result = (int)(arg1)->disconnect();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlWebcam_getSnapshot__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlWebcam *arg1 = (rlWebcam *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlWebcam::getSnapshot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlWebcam::getSnapshot",1,"rlWebcam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlWebcam::getSnapshot",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlWebcam,0))){
    SWIG_fail_ptr("rlWebcam_getSnapshot",1,SWIGTYPE_p_rlWebcam);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(arg1)->getSnapshot(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlWebcam_getSnapshot__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlWebcam *arg1 = (rlWebcam *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlWebcam::getSnapshot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlWebcam::getSnapshot",1,"rlWebcam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlWebcam,0))){
    SWIG_fail_ptr("rlWebcam_getSnapshot",1,SWIGTYPE_p_rlWebcam);
  }
  
  result = (char *)(arg1)->getSnapshot();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlWebcam_getSnapshot(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlWebcam, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rlWebcam_getSnapshot__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlWebcam, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_rlWebcam_getSnapshot__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlWebcam_getSnapshot'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlWebcam::getSnapshot(int)\n"
    "    rlWebcam::getSnapshot()\n");
  lua_error(L);return 0;
}


static int _wrap_rlWebcam_getFrame__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlWebcam *arg1 = (rlWebcam *) 0 ;
  int arg2 ;
  int arg3 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlWebcam::getFrame",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlWebcam::getFrame",1,"rlWebcam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlWebcam::getFrame",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlWebcam::getFrame",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlWebcam,0))){
    SWIG_fail_ptr("rlWebcam_getFrame",1,SWIGTYPE_p_rlWebcam);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (char *)(arg1)->getFrame(arg2,arg3);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlWebcam_getFrame__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlWebcam *arg1 = (rlWebcam *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlWebcam::getFrame",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlWebcam::getFrame",1,"rlWebcam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlWebcam::getFrame",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlWebcam,0))){
    SWIG_fail_ptr("rlWebcam_getFrame",1,SWIGTYPE_p_rlWebcam);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (char *)(arg1)->getFrame(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlWebcam_getFrame__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  rlWebcam *arg1 = (rlWebcam *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlWebcam::getFrame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlWebcam::getFrame",1,"rlWebcam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlWebcam,0))){
    SWIG_fail_ptr("rlWebcam_getFrame",1,SWIGTYPE_p_rlWebcam);
  }
  
  result = (char *)(arg1)->getFrame();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlWebcam_getFrame(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlWebcam, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_rlWebcam_getFrame__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlWebcam, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_rlWebcam_getFrame__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlWebcam, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_rlWebcam_getFrame__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlWebcam_getFrame'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlWebcam::getFrame(int,int)\n"
    "    rlWebcam::getFrame(int)\n"
    "    rlWebcam::getFrame()\n");
  lua_error(L);return 0;
}


static int _wrap_rlWebcam_getFrameBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  rlWebcam *arg1 = (rlWebcam *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("rlWebcam::getFrameBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlWebcam::getFrameBuffer",1,"rlWebcam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlWebcam::getFrameBuffer",2,"unsigned char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlWebcam::getFrameBuffer",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rlWebcam::getFrameBuffer",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlWebcam,0))){
    SWIG_fail_ptr("rlWebcam_getFrameBuffer",1,SWIGTYPE_p_rlWebcam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlWebcam_getFrameBuffer",2,SWIGTYPE_p_unsigned_char);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->getFrameBuffer(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlWebcam_getFrameBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  rlWebcam *arg1 = (rlWebcam *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("rlWebcam::getFrameBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlWebcam::getFrameBuffer",1,"rlWebcam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlWebcam::getFrameBuffer",2,"unsigned char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rlWebcam::getFrameBuffer",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlWebcam,0))){
    SWIG_fail_ptr("rlWebcam_getFrameBuffer",1,SWIGTYPE_p_rlWebcam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("rlWebcam_getFrameBuffer",2,SWIGTYPE_p_unsigned_char);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->getFrameBuffer(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlWebcam_getFrameBuffer(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlWebcam, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_rlWebcam_getFrameBuffer__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_rlWebcam, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_rlWebcam_getFrameBuffer__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rlWebcam_getFrameBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rlWebcam::getFrameBuffer(unsigned char *,int,int)\n"
    "    rlWebcam::getFrameBuffer(unsigned char *,int)\n");
  lua_error(L);return 0;
}


static int _wrap_rlWebcam_getUrl(lua_State* L) {
  int SWIG_arg = 0;
  rlWebcam *arg1 = (rlWebcam *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlWebcam::getUrl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlWebcam::getUrl",1,"rlWebcam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlWebcam,0))){
    SWIG_fail_ptr("rlWebcam_getUrl",1,SWIGTYPE_p_rlWebcam);
  }
  
  result = (char *)(arg1)->getUrl();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlWebcam_getHost(lua_State* L) {
  int SWIG_arg = 0;
  rlWebcam *arg1 = (rlWebcam *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlWebcam::getHost",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlWebcam::getHost",1,"rlWebcam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlWebcam,0))){
    SWIG_fail_ptr("rlWebcam_getHost",1,SWIGTYPE_p_rlWebcam);
  }
  
  result = (char *)(arg1)->getHost();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlWebcam_getPort(lua_State* L) {
  int SWIG_arg = 0;
  rlWebcam *arg1 = (rlWebcam *) 0 ;
  int result;
  
  SWIG_check_num_args("rlWebcam::getPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlWebcam::getPort",1,"rlWebcam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlWebcam,0))){
    SWIG_fail_ptr("rlWebcam_getPort",1,SWIGTYPE_p_rlWebcam);
  }
  
  result = (int)(arg1)->getPort();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlWebcam_getPath(lua_State* L) {
  int SWIG_arg = 0;
  rlWebcam *arg1 = (rlWebcam *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("rlWebcam::getPath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlWebcam::getPath",1,"rlWebcam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlWebcam,0))){
    SWIG_fail_ptr("rlWebcam_getPath",1,SWIGTYPE_p_rlWebcam);
  }
  
  result = (char *)(arg1)->getPath();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlWebcam_debug_set(lua_State* L) {
  int SWIG_arg = 0;
  rlWebcam *arg1 = (rlWebcam *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rlWebcam::debug",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlWebcam::debug",1,"rlWebcam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rlWebcam::debug",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlWebcam,0))){
    SWIG_fail_ptr("rlWebcam_debug_set",1,SWIGTYPE_p_rlWebcam);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->debug = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlWebcam_debug_get(lua_State* L) {
  int SWIG_arg = 0;
  rlWebcam *arg1 = (rlWebcam *) 0 ;
  int result;
  
  SWIG_check_num_args("rlWebcam::debug",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlWebcam::debug",1,"rlWebcam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlWebcam,0))){
    SWIG_fail_ptr("rlWebcam_debug_get",1,SWIGTYPE_p_rlWebcam);
  }
  
  result = (int) ((arg1)->debug);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlWebcam_filename_set(lua_State* L) {
  int SWIG_arg = 0;
  rlWebcam *arg1 = (rlWebcam *) 0 ;
  rlString *arg2 = (rlString *) 0 ;
  
  SWIG_check_num_args("rlWebcam::filename",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlWebcam::filename",1,"rlWebcam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlWebcam::filename",2,"rlString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlWebcam,0))){
    SWIG_fail_ptr("rlWebcam_filename_set",1,SWIGTYPE_p_rlWebcam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlString,0))){
    SWIG_fail_ptr("rlWebcam_filename_set",2,SWIGTYPE_p_rlString);
  }
  
  if (arg1) (arg1)->filename = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlWebcam_filename_get(lua_State* L) {
  int SWIG_arg = 0;
  rlWebcam *arg1 = (rlWebcam *) 0 ;
  rlString *result = 0 ;
  
  SWIG_check_num_args("rlWebcam::filename",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlWebcam::filename",1,"rlWebcam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlWebcam,0))){
    SWIG_fail_ptr("rlWebcam_filename_get",1,SWIGTYPE_p_rlWebcam);
  }
  
  result = (rlString *)& ((arg1)->filename);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlString,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlWebcam_sock_set(lua_State* L) {
  int SWIG_arg = 0;
  rlWebcam *arg1 = (rlWebcam *) 0 ;
  rlSocket *arg2 = (rlSocket *) 0 ;
  
  SWIG_check_num_args("rlWebcam::sock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlWebcam::sock",1,"rlWebcam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("rlWebcam::sock",2,"rlSocket *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlWebcam,0))){
    SWIG_fail_ptr("rlWebcam_sock_set",1,SWIGTYPE_p_rlWebcam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_rlSocket,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("rlWebcam_sock_set",2,SWIGTYPE_p_rlSocket);
  }
  
  if (arg1) (arg1)->sock = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rlWebcam_sock_get(lua_State* L) {
  int SWIG_arg = 0;
  rlWebcam *arg1 = (rlWebcam *) 0 ;
  rlSocket *result = 0 ;
  
  SWIG_check_num_args("rlWebcam::sock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rlWebcam::sock",1,"rlWebcam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_rlWebcam,0))){
    SWIG_fail_ptr("rlWebcam_sock_get",1,SWIGTYPE_p_rlWebcam);
  }
  
  result = (rlSocket *) ((arg1)->sock);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_rlSocket,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_rlWebcam(void *obj) {
rlWebcam *arg1 = (rlWebcam *) obj;
delete arg1;
}
static int _proxy__wrap_new_rlWebcam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_rlWebcam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_rlWebcam_attributes[] = {
    { "debug", _wrap_rlWebcam_debug_get, _wrap_rlWebcam_debug_set },
    { "filename", _wrap_rlWebcam_filename_get, _wrap_rlWebcam_filename_set },
    { "sock", _wrap_rlWebcam_sock_get, _wrap_rlWebcam_sock_set },
    {0,0,0}
};
static swig_lua_method swig_rlWebcam_methods[]= {
    { "setUrl", _wrap_rlWebcam_setUrl},
    { "disconnect", _wrap_rlWebcam_disconnect},
    { "getSnapshot", _wrap_rlWebcam_getSnapshot},
    { "getFrame", _wrap_rlWebcam_getFrame},
    { "getFrameBuffer", _wrap_rlWebcam_getFrameBuffer},
    { "getUrl", _wrap_rlWebcam_getUrl},
    { "getHost", _wrap_rlWebcam_getHost},
    { "getPort", _wrap_rlWebcam_getPort},
    { "getPath", _wrap_rlWebcam_getPath},
    {0,0}
};
static swig_lua_method swig_rlWebcam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_rlWebcam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_rlWebcam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_rlWebcam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_rlWebcam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_rlWebcam_Sf_SwigStatic = {
    "rlWebcam",
    swig_rlWebcam_Sf_SwigStatic_methods,
    swig_rlWebcam_Sf_SwigStatic_attributes,
    swig_rlWebcam_Sf_SwigStatic_constants,
    swig_rlWebcam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_rlWebcam_bases[] = {0};
static const char *swig_rlWebcam_base_names[] = {0};
static swig_lua_class _wrap_class_rlWebcam = { "rlWebcam", "rlWebcam", &SWIGTYPE_p_rlWebcam,_proxy__wrap_new_rlWebcam, swig_delete_rlWebcam, swig_rlWebcam_methods, swig_rlWebcam_attributes, &swig_rlWebcam_Sf_SwigStatic, swig_rlWebcam_meta, swig_rlWebcam_bases, swig_rlWebcam_base_names };

static int _wrap_rlsleep(lua_State* L) {
  int SWIG_arg = 0;
  long arg1 ;
  
  SWIG_check_num_args("rlsleep",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rlsleep",1,"long");
  arg1 = (long)lua_tonumber(L, 1);
  rlsleep(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "rlevent_name", _wrap_rlevent_name_get, SWIG_Lua_set_immutable },
    { "rlCRLF", _wrap_rlCRLF_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("rl_PRINTF_LENGTH", 4096)},
    {SWIG_LUA_CONSTTAB_INT("rl_PRINTF_LENGTH_SPREADSHEET", 4096)},
    {SWIG_LUA_CONSTTAB_INT("BIT0", 1)},
    {SWIG_LUA_CONSTTAB_INT("BIT1", 2)},
    {SWIG_LUA_CONSTTAB_INT("BIT2", 4)},
    {SWIG_LUA_CONSTTAB_INT("BIT3", 8)},
    {SWIG_LUA_CONSTTAB_INT("BIT4", 16)},
    {SWIG_LUA_CONSTTAB_INT("BIT5", 32)},
    {SWIG_LUA_CONSTTAB_INT("BIT6", 64)},
    {SWIG_LUA_CONSTTAB_INT("BIT7", 128)},
    {SWIG_LUA_CONSTTAB_INT("BIT8", 256*1)},
    {SWIG_LUA_CONSTTAB_INT("BIT9", 256*2)},
    {SWIG_LUA_CONSTTAB_INT("BIT10", 256*4)},
    {SWIG_LUA_CONSTTAB_INT("BIT11", 256*8)},
    {SWIG_LUA_CONSTTAB_INT("BIT12", 256*16)},
    {SWIG_LUA_CONSTTAB_INT("BIT13", 256*32)},
    {SWIG_LUA_CONSTTAB_INT("BIT14", 256*64)},
    {SWIG_LUA_CONSTTAB_INT("BIT15", 256*128)},
    {SWIG_LUA_CONSTTAB_INT("BIT16", 256*256*1)},
    {SWIG_LUA_CONSTTAB_INT("BIT17", 256*256*2)},
    {SWIG_LUA_CONSTTAB_INT("BIT18", 256*256*4)},
    {SWIG_LUA_CONSTTAB_INT("BIT19", 256*256*8)},
    {SWIG_LUA_CONSTTAB_INT("BIT20", 256*256*16)},
    {SWIG_LUA_CONSTTAB_INT("BIT21", 256*256*32)},
    {SWIG_LUA_CONSTTAB_INT("BIT22", 256*256*64)},
    {SWIG_LUA_CONSTTAB_INT("BIT23", 256*256*128)},
    {SWIG_LUA_CONSTTAB_INT("BIT24", 256*256*256*1)},
    {SWIG_LUA_CONSTTAB_INT("BIT25", 256*256*256*2)},
    {SWIG_LUA_CONSTTAB_INT("BIT26", 256*256*256*4)},
    {SWIG_LUA_CONSTTAB_INT("BIT27", 256*256*256*8)},
    {SWIG_LUA_CONSTTAB_INT("BIT28", 256*256*256*16)},
    {SWIG_LUA_CONSTTAB_INT("BIT29", 256*256*256*32)},
    {SWIG_LUA_CONSTTAB_INT("BIT30", 256*256*256*64)},
    {SWIG_LUA_CONSTTAB_INT("BIT31", 256*256*256*128)},
    {SWIG_LUA_CONSTTAB_STRING("RLCRLF", "\r\n")},
    {SWIG_LUA_CONSTTAB_INT("rlSharedMemory_OK", rlSharedMemory::OK)},
    {SWIG_LUA_CONSTTAB_INT("rlSharedMemory_ERROR_FILE", rlSharedMemory::ERROR_FILE)},
    {SWIG_LUA_CONSTTAB_INT("rlSharedMemory_ERROR_SHMGET", rlSharedMemory::ERROR_SHMGET)},
    {SWIG_LUA_CONSTTAB_INT("rlSharedMemory_ERROR_SHMAT", rlSharedMemory::ERROR_SHMAT)},
    {SWIG_LUA_CONSTTAB_INT("rlSharedMemory_ERROR_SHMCTL", rlSharedMemory::ERROR_SHMCTL)},
    {SWIG_LUA_CONSTTAB_INT("rlSocket_SOCKET_ERR", rlSocket::SOCKET_ERR)},
    {SWIG_LUA_CONSTTAB_INT("rlSocket_SETSOCKOPT_ERR", rlSocket::SETSOCKOPT_ERR)},
    {SWIG_LUA_CONSTTAB_INT("rlSocket_LISTEN_ERR", rlSocket::LISTEN_ERR)},
    {SWIG_LUA_CONSTTAB_INT("rlSocket_ACCEPT_ERR", rlSocket::ACCEPT_ERR)},
    {SWIG_LUA_CONSTTAB_INT("rlSocket_INET_ADDR_ERR", rlSocket::INET_ADDR_ERR)},
    {SWIG_LUA_CONSTTAB_INT("rlSocket_CONNECT_ERR", rlSocket::CONNECT_ERR)},
    {SWIG_LUA_CONSTTAB_INT("rlSocket_PORT_ERR", rlSocket::PORT_ERR)},
    {SWIG_LUA_CONSTTAB_INT("rl3964R_highPriority", rl3964R::highPriority)},
    {SWIG_LUA_CONSTTAB_INT("rl3964R_lowPriority", rl3964R::lowPriority)},
    {SWIG_LUA_CONSTTAB_INT("rlDataAcquisition_DAQ_ERROR", rlDataAcquisition::DAQ_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("rlDataAcquisitionProvider_DAQ_PROVIDER_ERROR", rlDataAcquisitionProvider::DAQ_PROVIDER_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("rlMAX_EVENT", 256)},
    {SWIG_LUA_CONSTTAB_INT("rlInfo", rlInfo)},
    {SWIG_LUA_CONSTTAB_INT("rlWarning", rlWarning)},
    {SWIG_LUA_CONSTTAB_INT("rlError", rlError)},
    {SWIG_LUA_CONSTTAB_INT("rlCritical", rlCritical)},
    {SWIG_LUA_CONSTTAB_INT("rlFatal", rlFatal)},
    {SWIG_LUA_CONSTTAB_INT("rlTest", rlTest)},
    {SWIG_LUA_CONSTTAB_INT("rlEVENT_SIZE", rlEVENT_SIZE)},
    {SWIG_LUA_CONSTTAB_INT("rlMAX_MESSAGES", 128)},
    {SWIG_LUA_CONSTTAB_INT("rlFifo_DATA_AVAILABLE", rlFifo::DATA_AVAILABLE)},
    {SWIG_LUA_CONSTTAB_INT("rlFifo_NO_DATA_AVAILABLE", rlFifo::NO_DATA_AVAILABLE)},
    {SWIG_LUA_CONSTTAB_INT("rlFifo_MESSAGE_TO_BIG", rlFifo::MESSAGE_TO_BIG)},
    {SWIG_LUA_CONSTTAB_INT("rlFifo_FIFO_FULL", rlFifo::FIFO_FULL)},
    {SWIG_LUA_CONSTTAB_INT("rlMailbox_MAILBOX_ERROR", rlMailbox::MAILBOX_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("rlMailbox_MAILBOX_FULL", rlMailbox::MAILBOX_FULL)},
    {SWIG_LUA_CONSTTAB_INT("rlMailbox_WAIT", rlMailbox::WAIT)},
    {SWIG_LUA_CONSTTAB_INT("rlMailbox_NOWAIT", rlMailbox::NOWAIT)},
    {SWIG_LUA_CONSTTAB_INT("rlMailbox_MAX_MAILBOX", rlMailbox::MAX_MAILBOX)},
    {SWIG_LUA_CONSTTAB_INT("rlMailbox_OK", rlMailbox::OK)},
    {SWIG_LUA_CONSTTAB_INT("rlMailbox_COULD_NOT_CREATE_MAILBOX", rlMailbox::COULD_NOT_CREATE_MAILBOX)},
    {SWIG_LUA_CONSTTAB_INT("rlMailbox_COULD_NOT_GET_KEY", rlMailbox::COULD_NOT_GET_KEY)},
    {SWIG_LUA_CONSTTAB_INT("rlMailbox_COULD_NOT_GET_CHAN_ID", rlMailbox::COULD_NOT_GET_CHAN_ID)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_MODBUS_CHECKSUM_ERROR", rlModbus::MODBUS_CHECKSUM_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_MODBUS_ERROR", rlModbus::MODBUS_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_MODBUS_SUCCESS", rlModbus::MODBUS_SUCCESS)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_MODBUS_RTU", rlModbus::MODBUS_RTU)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_MODBUS_ASCII", rlModbus::MODBUS_ASCII)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_ReadCoilStatus", rlModbus::ReadCoilStatus)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_ReadInputStatus", rlModbus::ReadInputStatus)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_ReadHoldingRegisters", rlModbus::ReadHoldingRegisters)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_ReadInputRegisters", rlModbus::ReadInputRegisters)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_ForceSingleCoil", rlModbus::ForceSingleCoil)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_PresetSingleRegister", rlModbus::PresetSingleRegister)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_ReadExceptionStatus", rlModbus::ReadExceptionStatus)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_FetchCommEventCtr", rlModbus::FetchCommEventCtr)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_FetchCommEventLog", rlModbus::FetchCommEventLog)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_ForceMultipleCoils", rlModbus::ForceMultipleCoils)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_PresetMultipleRegs", rlModbus::PresetMultipleRegs)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_ReportSlaveID", rlModbus::ReportSlaveID)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_ReadGeneralReference", rlModbus::ReadGeneralReference)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_WriteGeneralReference", rlModbus::WriteGeneralReference)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_MaskWrite4XRegisters", rlModbus::MaskWrite4XRegisters)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_ReadWrite4XRegisters", rlModbus::ReadWrite4XRegisters)},
    {SWIG_LUA_CONSTTAB_INT("rlModbus_ReadFifoQueue", rlModbus::ReadFifoQueue)},
    {SWIG_LUA_CONSTTAB_INT("rlOpcXmlDa_OPCXMLDA_ERROR", rlOpcXmlDa::OPCXMLDA_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("rlPPIClient_daveSD", rlPPIClient::daveSD)},
    {SWIG_LUA_CONSTTAB_INT("rlPPIClient_daveInputs", rlPPIClient::daveInputs)},
    {SWIG_LUA_CONSTTAB_INT("rlPPIClient_daveOutputs", rlPPIClient::daveOutputs)},
    {SWIG_LUA_CONSTTAB_INT("rlPPIClient_daveFlags", rlPPIClient::daveFlags)},
    {SWIG_LUA_CONSTTAB_INT("rlPPIClient_daveDB", rlPPIClient::daveDB)},
    {SWIG_LUA_CONSTTAB_INT("rlPPIClient_daveDI", rlPPIClient::daveDI)},
    {SWIG_LUA_CONSTTAB_INT("rlPPIClient_daveLocal", rlPPIClient::daveLocal)},
    {SWIG_LUA_CONSTTAB_INT("rlPPIClient_daveV", rlPPIClient::daveV)},
    {SWIG_LUA_CONSTTAB_INT("rlPPIClient_daveCounter", rlPPIClient::daveCounter)},
    {SWIG_LUA_CONSTTAB_INT("rlPPIClient_daveTimer", rlPPIClient::daveTimer)},
    {SWIG_LUA_CONSTTAB_INT("B0", 0000000)},
    {SWIG_LUA_CONSTTAB_INT("B50", 0000001)},
    {SWIG_LUA_CONSTTAB_INT("B75", 0000002)},
    {SWIG_LUA_CONSTTAB_INT("B110", 0000003)},
    {SWIG_LUA_CONSTTAB_INT("B134", 0000004)},
    {SWIG_LUA_CONSTTAB_INT("B150", 0000005)},
    {SWIG_LUA_CONSTTAB_INT("B200", 0000006)},
    {SWIG_LUA_CONSTTAB_INT("B300", 0000007)},
    {SWIG_LUA_CONSTTAB_INT("B600", 0000010)},
    {SWIG_LUA_CONSTTAB_INT("B1200", 0000011)},
    {SWIG_LUA_CONSTTAB_INT("B1800", 0000012)},
    {SWIG_LUA_CONSTTAB_INT("B2400", 0000013)},
    {SWIG_LUA_CONSTTAB_INT("B4800", 0000014)},
    {SWIG_LUA_CONSTTAB_INT("B9600", 0000015)},
    {SWIG_LUA_CONSTTAB_INT("B19200", 0000016)},
    {SWIG_LUA_CONSTTAB_INT("B38400", 0000017)},
    {SWIG_LUA_CONSTTAB_INT("B57600", 0010001)},
    {SWIG_LUA_CONSTTAB_INT("B115200", 0010002)},
    {SWIG_LUA_CONSTTAB_INT("B230400", 0010003)},
    {SWIG_LUA_CONSTTAB_INT("B460800", 0010004)},
    {SWIG_LUA_CONSTTAB_INT("B500000", 0010005)},
    {SWIG_LUA_CONSTTAB_INT("B576000", 0010006)},
    {SWIG_LUA_CONSTTAB_INT("B921600", 0010007)},
    {SWIG_LUA_CONSTTAB_INT("B1000000", 0010010)},
    {SWIG_LUA_CONSTTAB_INT("B1152000", 0010011)},
    {SWIG_LUA_CONSTTAB_INT("B1500000", 0010012)},
    {SWIG_LUA_CONSTTAB_INT("B2000000", 0010013)},
    {SWIG_LUA_CONSTTAB_INT("B2500000", 0010014)},
    {SWIG_LUA_CONSTTAB_INT("B3000000", 0010015)},
    {SWIG_LUA_CONSTTAB_INT("B3500000", 0010016)},
    {SWIG_LUA_CONSTTAB_INT("B4000000", 0010017)},
    {SWIG_LUA_CONSTTAB_INT("rlSerial_NONE", rlSerial::NONE)},
    {SWIG_LUA_CONSTTAB_INT("rlSerial_ODD", rlSerial::ODD)},
    {SWIG_LUA_CONSTTAB_INT("rlSerial_EVEN", rlSerial::EVEN)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCPClient_ORG_DB", rlSiemensTCPClient::ORG_DB)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCPClient_ORG_M", rlSiemensTCPClient::ORG_M)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCPClient_ORG_E", rlSiemensTCPClient::ORG_E)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCPClient_ORG_A", rlSiemensTCPClient::ORG_A)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCPClient_ORG_PEPA", rlSiemensTCPClient::ORG_PEPA)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCPClient_ORG_Z", rlSiemensTCPClient::ORG_Z)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCPClient_ORG_T", rlSiemensTCPClient::ORG_T)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCP_ORG_DB", rlSiemensTCP::ORG_DB)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCP_ORG_M", rlSiemensTCP::ORG_M)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCP_ORG_E", rlSiemensTCP::ORG_E)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCP_ORG_A", rlSiemensTCP::ORG_A)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCP_ORG_PEPA", rlSiemensTCP::ORG_PEPA)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCP_ORG_Z", rlSiemensTCP::ORG_Z)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCP_ORG_T", rlSiemensTCP::ORG_T)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCP_ANY_SIEMENS_COMPATIBLE_PLC", rlSiemensTCP::ANY_SIEMENS_COMPATIBLE_PLC)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCP_S7_200", rlSiemensTCP::S7_200)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCP_S7_300", rlSiemensTCP::S7_300)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCP_S7_400", rlSiemensTCP::S7_400)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCP_S5", rlSiemensTCP::S5)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCP_RACK_SLOT", rlSiemensTCP::RACK_SLOT)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCP_S7_1200", rlSiemensTCP::S7_1200)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCP_LOGO", rlSiemensTCP::LOGO)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCP_WriteBit", rlSiemensTCP::WriteBit)},
    {SWIG_LUA_CONSTTAB_INT("rlSiemensTCP_WriteByte", rlSiemensTCP::WriteByte)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "rlwsa", _wrap_rlwsa},
    { "rlScoketWrite", _wrap_rlScoketWrite},
    { "rlSetDebugPrintf", _wrap_rlSetDebugPrintf},
    { "rlDebugPrintf", _wrap_rlDebugPrintf},
    { "rlInputAvailable", _wrap_rlInputAvailable},
    { "rlLastLinePrintf", _wrap_rlLastLinePrintf},
    { "rlpass", _wrap_rlpass},
    { "rlstrncpy", _wrap_rlstrncpy},
    { "rlstrlinecpy", _wrap_rlstrlinecpy},
    { "rlsnprintf", _wrap_rlsnprintf},
    { "rlSetSigtermHandler", _wrap_rlSetSigtermHandler},
    { "rlFindFile", _wrap_rlFindFile},
    { "rlGetInifile", _wrap_rlGetInifile},
    { "rlSwapShort", _wrap_rlSwapShort},
    { "rlEib1", _wrap_rlEib1},
    { "rlEib2", _wrap_rlEib2},
    { "rlLon1", _wrap_rlLon1},
    { "rlLon2", _wrap_rlLon2},
    { "rlProfibus1", _wrap_rlProfibus1},
    { "rlProfibus2", _wrap_rlProfibus2},
    { "rlCan1", _wrap_rlCan1},
    { "rlCan2", _wrap_rlCan2},
    { "rlBrowser", _wrap_rlBrowser},
    { "rlsystem", _wrap_rlsystem},
    { "rlSubmitPvserver", _wrap_rlSubmitPvserver},
    { "rlOption", _wrap_rlOption},
    { "rlIntOption", _wrap_rlIntOption},
    { "rlFloatOption", _wrap_rlFloatOption},
    { "rlTextOption", _wrap_rlTextOption},
    { "rlCopyTextfile", _wrap_rlCopyTextfile},
    { "rlupper", _wrap_rlupper},
    { "rllower", _wrap_rllower},
    { "rlStartsWith", _wrap_rlStartsWith},
    { "rlEndsWith", _wrap_rlEndsWith},
    { "rlStrMatch", _wrap_rlStrMatch},
    { "rlFRead", _wrap_rlFRead},
    { "rlFWrite", _wrap_rlFWrite},
    { "rlWriteFile", _wrap_rlWriteFile},
    { "rlMkdir", _wrap_rlMkdir},
    { "rlBitSet", _wrap_rlBitSet},
    { "rlBitClear", _wrap_rlBitClear},
    { "rlBitChange", _wrap_rlBitChange},
    { "rlBitTest", _wrap_rlBitTest},
    { "rlPushToDoubleBuffer", _wrap_rlPushToDoubleBuffer},
    { "rlPushToFloatBuffer", _wrap_rlPushToFloatBuffer},
    { "rlEventInit", _wrap_rlEventInit},
    { "rlSetEventLocation", _wrap_rlSetEventLocation},
    { "rlEventPrintf", _wrap_rlEventPrintf},
    { "rlSetTranslator", _wrap_rlSetTranslator},
    { "rltranslate", _wrap_rltranslate},
    { "rltranslate2", _wrap_rltranslate2},
    { "rlsleep", _wrap_rlsleep},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_THREAD_PARAM,
&_wrap_class_rlThread,
&_wrap_class_rlMutex,
&_wrap_class_rlSemaphore,
&_wrap_class_rlSharedMemory,
&_wrap_class_rlIpAdr,
&_wrap_class_rlUdpSocket,
&_wrap_class_rlSocket,
&_wrap_class_rl3964R,
&_wrap_class_rlCommandlineInterface,
&_wrap_class_rlDataAcquisition,
&_wrap_class_rlDataAcquisitionProvider,
&_wrap_class_rlDataProvider,
&_wrap_class_rlDataProviderClient,
&_wrap_class_rlDataProviderThreads,
&_wrap_class_rlEventLogServer,
&_wrap_class_rlEventLogServerThreads,
&_wrap_class_rlFifo,
&_wrap_class_rlFileLines,
&_wrap_class_rlFileLoad,
&_wrap_class_rlHistoryLogLine,
&_wrap_class_rlHistoryLogger,
&_wrap_class_rlHistoryReaderLine,
&_wrap_class_rlHistoryReader,
&_wrap_class_rlIniFile,
&_wrap_class_rlInterpreter,
&_wrap_class_rlMailbox,
&_wrap_class_rlModbusClient,
&_wrap_class_rlModbus,
&_wrap_class_rlOpcXmlDa,
&_wrap_class_rlPcontrol,
&_wrap_class_rlPlcState,
&_wrap_class_rlPlcMem,
&_wrap_class_rlPPIClient,
&_wrap_class_rlSerial,
&_wrap_class_rlSiemensTCPClient,
&_wrap_class_rlSiemensTCP,
&_wrap_class_rlSpawn,
&_wrap_class_rlSpreadsheetCell,
&_wrap_class_rlSpreadsheetRow,
&_wrap_class_rlSpreadsheetTable,
&_wrap_class_rlSpreadsheetWorkbook,
&_wrap_class_rlString,
&_wrap_class_rlSvgPosition,
&_wrap_class_rlSvgAnimator,
&_wrap_class_rlSvgCat,
&_wrap_class_rlWebcam,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "rllib",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_rlModbusClientTo_p_rlMailbox(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((rlMailbox *)  ((rlModbusClient *) x));
}
static void *_p_rlPPIClientTo_p_rlMailbox(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((rlMailbox *)  ((rlPPIClient *) x));
}
static void *_p_rlSiemensTCPClientTo_p_rlMailbox(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((rlMailbox *)  ((rlSiemensTCPClient *) x));
}
static void *_p_rlSiemensTCPTo_p_rlSocket(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((rlSocket *)  ((rlSiemensTCP *) x));
}
static void *_p_rlModbusClientTo_p_rlSharedMemory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((rlSharedMemory *)  ((rlModbusClient *) x));
}
static void *_p_rlPPIClientTo_p_rlSharedMemory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((rlSharedMemory *)  ((rlPPIClient *) x));
}
static void *_p_rlSiemensTCPClientTo_p_rlSharedMemory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((rlSharedMemory *)  ((rlSiemensTCPClient *) x));
}
static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_THREAD_PARAM = {"_p_THREAD_PARAM", "THREAD_PARAM *", 0, 0, (void*)&_wrap_class_THREAD_PARAM, 0};
static swig_type_info _swigt__p_WSEMAPHORE = {"_p_WSEMAPHORE", "WSEMAPHORE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__rlFileLines_ = {"_p__rlFileLines_", "rlFileLines *|_rlFileLines_ *", 0, 0, (void*)&_wrap_class_rlFileLines, 0};
static swig_type_info _swigt__p__rlHistoryLogLine_ = {"_p__rlHistoryLogLine_", "_rlHistoryLogLine_ *|rlHistoryLogLine *", 0, 0, (void*)&_wrap_class_rlHistoryLogLine, 0};
static swig_type_info _swigt__p__rlHistoryReaderLine_ = {"_p__rlHistoryReaderLine_", "rlHistoryReaderLine *|_rlHistoryReaderLine_ *", 0, 0, (void*)&_wrap_class_rlHistoryReaderLine, 0};
static swig_type_info _swigt__p_a_4__char = {"_p_a_4__char", "char (*)[4]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__unsigned_char_int__void = {"_p_f_p_q_const__unsigned_char_int__void", "void (*)(unsigned char const *,int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__p_void = {"_p_f_p_void__p_void", "void *(*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__void = {"_p_f_p_void__void", "void (*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pthread_attr_t = {"_p_pthread_attr_t", "pthread_attr_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pthread_mutex_t = {"_p_pthread_mutex_t", "pthread_mutex_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pthread_t = {"_p_pthread_t", "pthread_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_rl3964R = {"_p_rl3964R", "rl3964R *", 0, 0, (void*)&_wrap_class_rl3964R, 0};
static swig_type_info _swigt__p_rlCommandlineInterface = {"_p_rlCommandlineInterface", "rlCommandlineInterface *", 0, 0, (void*)&_wrap_class_rlCommandlineInterface, 0};
static swig_type_info _swigt__p_rlDataAcquisition = {"_p_rlDataAcquisition", "rlDataAcquisition *", 0, 0, (void*)&_wrap_class_rlDataAcquisition, 0};
static swig_type_info _swigt__p_rlDataAcquisitionProvider = {"_p_rlDataAcquisitionProvider", "rlDataAcquisitionProvider *", 0, 0, (void*)&_wrap_class_rlDataAcquisitionProvider, 0};
static swig_type_info _swigt__p_rlDataProvider = {"_p_rlDataProvider", "rlDataProvider *", 0, 0, (void*)&_wrap_class_rlDataProvider, 0};
static swig_type_info _swigt__p_rlDataProviderClient = {"_p_rlDataProviderClient", "rlDataProviderClient *", 0, 0, (void*)&_wrap_class_rlDataProviderClient, 0};
static swig_type_info _swigt__p_rlDataProviderThreads = {"_p_rlDataProviderThreads", "rlDataProviderThreads *", 0, 0, (void*)&_wrap_class_rlDataProviderThreads, 0};
static swig_type_info _swigt__p_rlEventLogServer = {"_p_rlEventLogServer", "rlEventLogServer *", 0, 0, (void*)&_wrap_class_rlEventLogServer, 0};
static swig_type_info _swigt__p_rlEventLogServerThreads = {"_p_rlEventLogServerThreads", "rlEventLogServerThreads *", 0, 0, (void*)&_wrap_class_rlEventLogServerThreads, 0};
static swig_type_info _swigt__p_rlFifo = {"_p_rlFifo", "rlFifo *", 0, 0, (void*)&_wrap_class_rlFifo, 0};
static swig_type_info _swigt__p_rlFileLoad = {"_p_rlFileLoad", "rlFileLoad *", 0, 0, (void*)&_wrap_class_rlFileLoad, 0};
static swig_type_info _swigt__p_rlHistoryLogger = {"_p_rlHistoryLogger", "rlHistoryLogger *", 0, 0, (void*)&_wrap_class_rlHistoryLogger, 0};
static swig_type_info _swigt__p_rlHistoryReader = {"_p_rlHistoryReader", "rlHistoryReader *", 0, 0, (void*)&_wrap_class_rlHistoryReader, 0};
static swig_type_info _swigt__p_rlIniFile = {"_p_rlIniFile", "rlIniFile *", 0, 0, (void*)&_wrap_class_rlIniFile, 0};
static swig_type_info _swigt__p_rlInterpreter = {"_p_rlInterpreter", "rlInterpreter *", 0, 0, (void*)&_wrap_class_rlInterpreter, 0};
static swig_type_info _swigt__p_rlIpAdr = {"_p_rlIpAdr", "rlIpAdr *", 0, 0, (void*)&_wrap_class_rlIpAdr, 0};
static swig_type_info _swigt__p_rlMailbox = {"_p_rlMailbox", "rlMailbox *", 0, 0, (void*)&_wrap_class_rlMailbox, 0};
static swig_type_info _swigt__p_rlModbus = {"_p_rlModbus", "rlModbus *", 0, 0, (void*)&_wrap_class_rlModbus, 0};
static swig_type_info _swigt__p_rlModbusClient = {"_p_rlModbusClient", "rlModbusClient *", 0, 0, (void*)&_wrap_class_rlModbusClient, 0};
static swig_type_info _swigt__p_rlMutex = {"_p_rlMutex", "rlMutex *", 0, 0, (void*)&_wrap_class_rlMutex, 0};
static swig_type_info _swigt__p_rlOpcXmlDa = {"_p_rlOpcXmlDa", "rlOpcXmlDa *", 0, 0, (void*)&_wrap_class_rlOpcXmlDa, 0};
static swig_type_info _swigt__p_rlPPIClient = {"_p_rlPPIClient", "rlPPIClient *", 0, 0, (void*)&_wrap_class_rlPPIClient, 0};
static swig_type_info _swigt__p_rlPcontrol = {"_p_rlPcontrol", "rlPcontrol *", 0, 0, (void*)&_wrap_class_rlPcontrol, 0};
static swig_type_info _swigt__p_rlPlcMem = {"_p_rlPlcMem", "rlPlcMem *", 0, 0, (void*)&_wrap_class_rlPlcMem, 0};
static swig_type_info _swigt__p_rlPlcState = {"_p_rlPlcState", "rlPlcState *", 0, 0, (void*)&_wrap_class_rlPlcState, 0};
static swig_type_info _swigt__p_rlSemaphore = {"_p_rlSemaphore", "rlSemaphore *", 0, 0, (void*)&_wrap_class_rlSemaphore, 0};
static swig_type_info _swigt__p_rlSerial = {"_p_rlSerial", "rlSerial *", 0, 0, (void*)&_wrap_class_rlSerial, 0};
static swig_type_info _swigt__p_rlSharedMemory = {"_p_rlSharedMemory", "rlSharedMemory *", 0, 0, (void*)&_wrap_class_rlSharedMemory, 0};
static swig_type_info _swigt__p_rlSiemensTCP = {"_p_rlSiemensTCP", "rlSiemensTCP *", 0, 0, (void*)&_wrap_class_rlSiemensTCP, 0};
static swig_type_info _swigt__p_rlSiemensTCPClient = {"_p_rlSiemensTCPClient", "rlSiemensTCPClient *", 0, 0, (void*)&_wrap_class_rlSiemensTCPClient, 0};
static swig_type_info _swigt__p_rlSocket = {"_p_rlSocket", "rlSocket *", 0, 0, (void*)&_wrap_class_rlSocket, 0};
static swig_type_info _swigt__p_rlSpawn = {"_p_rlSpawn", "rlSpawn *", 0, 0, (void*)&_wrap_class_rlSpawn, 0};
static swig_type_info _swigt__p_rlSpreadsheetCell = {"_p_rlSpreadsheetCell", "rlSpreadsheetCell *", 0, 0, (void*)&_wrap_class_rlSpreadsheetCell, 0};
static swig_type_info _swigt__p_rlSpreadsheetRow = {"_p_rlSpreadsheetRow", "rlSpreadsheetRow *", 0, 0, (void*)&_wrap_class_rlSpreadsheetRow, 0};
static swig_type_info _swigt__p_rlSpreadsheetTable = {"_p_rlSpreadsheetTable", "rlSpreadsheetTable *", 0, 0, (void*)&_wrap_class_rlSpreadsheetTable, 0};
static swig_type_info _swigt__p_rlSpreadsheetWorkbook = {"_p_rlSpreadsheetWorkbook", "rlSpreadsheetWorkbook *", 0, 0, (void*)&_wrap_class_rlSpreadsheetWorkbook, 0};
static swig_type_info _swigt__p_rlString = {"_p_rlString", "rlString *", 0, 0, (void*)&_wrap_class_rlString, 0};
static swig_type_info _swigt__p_rlSvgAnimator = {"_p_rlSvgAnimator", "rlSvgAnimator *", 0, 0, (void*)&_wrap_class_rlSvgAnimator, 0};
static swig_type_info _swigt__p_rlSvgCat = {"_p_rlSvgCat", "rlSvgCat *", 0, 0, (void*)&_wrap_class_rlSvgCat, 0};
static swig_type_info _swigt__p_rlSvgPosition = {"_p_rlSvgPosition", "rlSvgPosition *", 0, 0, (void*)&_wrap_class_rlSvgPosition, 0};
static swig_type_info _swigt__p_rlSvgPosition__rlPositionInit = {"_p_rlSvgPosition__rlPositionInit", "rlSvgPosition::rlPositionInit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_rlThread = {"_p_rlThread", "rlThread *", 0, 0, (void*)&_wrap_class_rlThread, 0};
static swig_type_info _swigt__p_rlTime = {"_p_rlTime", "rlTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_rlUdpSocket = {"_p_rlUdpSocket", "rlUdpSocket *", 0, 0, (void*)&_wrap_class_rlUdpSocket, 0};
static swig_type_info _swigt__p_rlWebcam = {"_p_rlWebcam", "rlWebcam *", 0, 0, (void*)&_wrap_class_rlWebcam, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sockaddr_in = {"_p_sockaddr_in", "sockaddr_in *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_rlSharedMemory__LockUserAddr_t = {"_p_std__shared_ptrT_rlSharedMemory__LockUserAddr_t", "std::shared_ptr< rlSharedMemory::LockUserAddr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_FILE,
  &_swigt__p_THREAD_PARAM,
  &_swigt__p_WSEMAPHORE,
  &_swigt__p__rlFileLines_,
  &_swigt__p__rlHistoryLogLine_,
  &_swigt__p__rlHistoryReaderLine_,
  &_swigt__p_a_4__char,
  &_swigt__p_double,
  &_swigt__p_f_p_q_const__unsigned_char_int__void,
  &_swigt__p_f_p_void__p_void,
  &_swigt__p_f_p_void__void,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_p_char,
  &_swigt__p_p_void,
  &_swigt__p_pthread_attr_t,
  &_swigt__p_pthread_mutex_t,
  &_swigt__p_pthread_t,
  &_swigt__p_rl3964R,
  &_swigt__p_rlCommandlineInterface,
  &_swigt__p_rlDataAcquisition,
  &_swigt__p_rlDataAcquisitionProvider,
  &_swigt__p_rlDataProvider,
  &_swigt__p_rlDataProviderClient,
  &_swigt__p_rlDataProviderThreads,
  &_swigt__p_rlEventLogServer,
  &_swigt__p_rlEventLogServerThreads,
  &_swigt__p_rlFifo,
  &_swigt__p_rlFileLoad,
  &_swigt__p_rlHistoryLogger,
  &_swigt__p_rlHistoryReader,
  &_swigt__p_rlIniFile,
  &_swigt__p_rlInterpreter,
  &_swigt__p_rlIpAdr,
  &_swigt__p_rlMailbox,
  &_swigt__p_rlModbus,
  &_swigt__p_rlModbusClient,
  &_swigt__p_rlMutex,
  &_swigt__p_rlOpcXmlDa,
  &_swigt__p_rlPPIClient,
  &_swigt__p_rlPcontrol,
  &_swigt__p_rlPlcMem,
  &_swigt__p_rlPlcState,
  &_swigt__p_rlSemaphore,
  &_swigt__p_rlSerial,
  &_swigt__p_rlSharedMemory,
  &_swigt__p_rlSiemensTCP,
  &_swigt__p_rlSiemensTCPClient,
  &_swigt__p_rlSocket,
  &_swigt__p_rlSpawn,
  &_swigt__p_rlSpreadsheetCell,
  &_swigt__p_rlSpreadsheetRow,
  &_swigt__p_rlSpreadsheetTable,
  &_swigt__p_rlSpreadsheetWorkbook,
  &_swigt__p_rlString,
  &_swigt__p_rlSvgAnimator,
  &_swigt__p_rlSvgCat,
  &_swigt__p_rlSvgPosition,
  &_swigt__p_rlSvgPosition__rlPositionInit,
  &_swigt__p_rlThread,
  &_swigt__p_rlTime,
  &_swigt__p_rlUdpSocket,
  &_swigt__p_rlWebcam,
  &_swigt__p_short,
  &_swigt__p_sockaddr_in,
  &_swigt__p_std__shared_ptrT_rlSharedMemory__LockUserAddr_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_THREAD_PARAM[] = {  {&_swigt__p_THREAD_PARAM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WSEMAPHORE[] = {  {&_swigt__p_WSEMAPHORE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__rlFileLines_[] = {  {&_swigt__p__rlFileLines_, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__rlHistoryLogLine_[] = {  {&_swigt__p__rlHistoryLogLine_, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__rlHistoryReaderLine_[] = {  {&_swigt__p__rlHistoryReaderLine_, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_4__char[] = {  {&_swigt__p_a_4__char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__unsigned_char_int__void[] = {  {&_swigt__p_f_p_q_const__unsigned_char_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__p_void[] = {  {&_swigt__p_f_p_void__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__void[] = {  {&_swigt__p_f_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pthread_attr_t[] = {  {&_swigt__p_pthread_attr_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pthread_mutex_t[] = {  {&_swigt__p_pthread_mutex_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pthread_t[] = {  {&_swigt__p_pthread_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rl3964R[] = {  {&_swigt__p_rl3964R, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlCommandlineInterface[] = {  {&_swigt__p_rlCommandlineInterface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlDataAcquisition[] = {  {&_swigt__p_rlDataAcquisition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlDataAcquisitionProvider[] = {  {&_swigt__p_rlDataAcquisitionProvider, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlDataProvider[] = {  {&_swigt__p_rlDataProvider, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlDataProviderClient[] = {  {&_swigt__p_rlDataProviderClient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlDataProviderThreads[] = {  {&_swigt__p_rlDataProviderThreads, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlEventLogServer[] = {  {&_swigt__p_rlEventLogServer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlEventLogServerThreads[] = {  {&_swigt__p_rlEventLogServerThreads, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlFifo[] = {  {&_swigt__p_rlFifo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlFileLoad[] = {  {&_swigt__p_rlFileLoad, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlHistoryLogger[] = {  {&_swigt__p_rlHistoryLogger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlHistoryReader[] = {  {&_swigt__p_rlHistoryReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlIniFile[] = {  {&_swigt__p_rlIniFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlInterpreter[] = {  {&_swigt__p_rlInterpreter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlIpAdr[] = {  {&_swigt__p_rlIpAdr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlMailbox[] = {  {&_swigt__p_rlModbusClient, _p_rlModbusClientTo_p_rlMailbox, 0, 0},  {&_swigt__p_rlPPIClient, _p_rlPPIClientTo_p_rlMailbox, 0, 0},  {&_swigt__p_rlMailbox, 0, 0, 0},  {&_swigt__p_rlSiemensTCPClient, _p_rlSiemensTCPClientTo_p_rlMailbox, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlModbus[] = {  {&_swigt__p_rlModbus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlModbusClient[] = {  {&_swigt__p_rlModbusClient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlMutex[] = {  {&_swigt__p_rlMutex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlOpcXmlDa[] = {  {&_swigt__p_rlOpcXmlDa, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlPPIClient[] = {  {&_swigt__p_rlPPIClient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlPcontrol[] = {  {&_swigt__p_rlPcontrol, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlPlcMem[] = {  {&_swigt__p_rlPlcMem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlPlcState[] = {  {&_swigt__p_rlPlcState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlSemaphore[] = {  {&_swigt__p_rlSemaphore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlSerial[] = {  {&_swigt__p_rlSerial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlSharedMemory[] = {  {&_swigt__p_rlModbusClient, _p_rlModbusClientTo_p_rlSharedMemory, 0, 0},  {&_swigt__p_rlPPIClient, _p_rlPPIClientTo_p_rlSharedMemory, 0, 0},  {&_swigt__p_rlSharedMemory, 0, 0, 0},  {&_swigt__p_rlSiemensTCPClient, _p_rlSiemensTCPClientTo_p_rlSharedMemory, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlSiemensTCP[] = {  {&_swigt__p_rlSiemensTCP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlSiemensTCPClient[] = {  {&_swigt__p_rlSiemensTCPClient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlSocket[] = {  {&_swigt__p_rlSiemensTCP, _p_rlSiemensTCPTo_p_rlSocket, 0, 0},  {&_swigt__p_rlSocket, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlSpawn[] = {  {&_swigt__p_rlSpawn, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlSpreadsheetCell[] = {  {&_swigt__p_rlSpreadsheetCell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlSpreadsheetRow[] = {  {&_swigt__p_rlSpreadsheetRow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlSpreadsheetTable[] = {  {&_swigt__p_rlSpreadsheetTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlSpreadsheetWorkbook[] = {  {&_swigt__p_rlSpreadsheetWorkbook, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlString[] = {  {&_swigt__p_rlString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlSvgAnimator[] = {  {&_swigt__p_rlSvgAnimator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlSvgCat[] = {  {&_swigt__p_rlSvgCat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlSvgPosition[] = {  {&_swigt__p_rlSvgPosition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlSvgPosition__rlPositionInit[] = {  {&_swigt__p_rlSvgPosition__rlPositionInit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlThread[] = {  {&_swigt__p_rlThread, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlTime[] = {  {&_swigt__p_rlTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlUdpSocket[] = {  {&_swigt__p_rlUdpSocket, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rlWebcam[] = {  {&_swigt__p_rlWebcam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sockaddr_in[] = {  {&_swigt__p_sockaddr_in, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_rlSharedMemory__LockUserAddr_t[] = {  {&_swigt__p_std__shared_ptrT_rlSharedMemory__LockUserAddr_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_FILE,
  _swigc__p_THREAD_PARAM,
  _swigc__p_WSEMAPHORE,
  _swigc__p__rlFileLines_,
  _swigc__p__rlHistoryLogLine_,
  _swigc__p__rlHistoryReaderLine_,
  _swigc__p_a_4__char,
  _swigc__p_double,
  _swigc__p_f_p_q_const__unsigned_char_int__void,
  _swigc__p_f_p_void__p_void,
  _swigc__p_f_p_void__void,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_p_char,
  _swigc__p_p_void,
  _swigc__p_pthread_attr_t,
  _swigc__p_pthread_mutex_t,
  _swigc__p_pthread_t,
  _swigc__p_rl3964R,
  _swigc__p_rlCommandlineInterface,
  _swigc__p_rlDataAcquisition,
  _swigc__p_rlDataAcquisitionProvider,
  _swigc__p_rlDataProvider,
  _swigc__p_rlDataProviderClient,
  _swigc__p_rlDataProviderThreads,
  _swigc__p_rlEventLogServer,
  _swigc__p_rlEventLogServerThreads,
  _swigc__p_rlFifo,
  _swigc__p_rlFileLoad,
  _swigc__p_rlHistoryLogger,
  _swigc__p_rlHistoryReader,
  _swigc__p_rlIniFile,
  _swigc__p_rlInterpreter,
  _swigc__p_rlIpAdr,
  _swigc__p_rlMailbox,
  _swigc__p_rlModbus,
  _swigc__p_rlModbusClient,
  _swigc__p_rlMutex,
  _swigc__p_rlOpcXmlDa,
  _swigc__p_rlPPIClient,
  _swigc__p_rlPcontrol,
  _swigc__p_rlPlcMem,
  _swigc__p_rlPlcState,
  _swigc__p_rlSemaphore,
  _swigc__p_rlSerial,
  _swigc__p_rlSharedMemory,
  _swigc__p_rlSiemensTCP,
  _swigc__p_rlSiemensTCPClient,
  _swigc__p_rlSocket,
  _swigc__p_rlSpawn,
  _swigc__p_rlSpreadsheetCell,
  _swigc__p_rlSpreadsheetRow,
  _swigc__p_rlSpreadsheetTable,
  _swigc__p_rlSpreadsheetWorkbook,
  _swigc__p_rlString,
  _swigc__p_rlSvgAnimator,
  _swigc__p_rlSvgCat,
  _swigc__p_rlSvgPosition,
  _swigc__p_rlSvgPosition__rlPositionInit,
  _swigc__p_rlThread,
  _swigc__p_rlTime,
  _swigc__p_rlUdpSocket,
  _swigc__p_rlWebcam,
  _swigc__p_short,
  _swigc__p_sockaddr_in,
  _swigc__p_std__shared_ptrT_rlSharedMemory__LockUserAddr_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

